<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Translating Perl to Python</Title>
<Body>&lt;p&gt;I found this Perl script while &lt;a href=&quot;https://stackoverflow.com/questions/18671/quick-easy-way-to-migrate-sqlite3-to-mysql/25860&quot;&gt;migrating my SQLite database to mysql&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I was wondering (since I don&#x27;t know Perl) how could one rewrite this in Python?&lt;/p&gt;&lt;p&gt;Bonus points for the shortest (code) answer :)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;edit&lt;/strong&gt;: sorry I meant shortest code, not strictly shortest answer&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#! /usr/bin/perlwhile ($line = &amp;lt;&amp;gt;){    if (($line !~  /BEGIN TRANSACTION/) &amp;amp;&amp;amp; ($line !~ /COMMIT/) &amp;amp;&amp;amp; ($line !~ /sqlite_sequence/) &amp;amp;&amp;amp; ($line !~ /CREATE UNIQUE INDEX/)){        if ($line =~ /CREATE TABLE \&quot;([a-z_]*)\&quot;(.*)/){                $name = $1;                $sub = $2;                $sub =~ s/\&quot;//g; #&quot;                $line = &quot;DROP TABLE IF EXISTS $name;\nCREATE TABLE IF NOT EXISTS $name$sub\n&quot;;        }        elsif ($line =~ /INSERT INTO \&quot;([a-z_]*)\&quot;(.*)/){                $line = &quot;INSERT INTO $1$2\n&quot;;                $line =~ s/\&quot;/\\\&quot;/g; #&quot;                $line =~ s/\&quot;/\&#x27;/g; #&quot;        }else{                $line =~ s/\&#x27;\&#x27;/\\\&#x27;/g; #&#x27;        }        $line =~ s/([^\\&#x27;])\&#x27;t\&#x27;(.)/$1THIS_IS_TRUE$2/g; #&#x27;        $line =~ s/THIS_IS_TRUE/1/g;        $line =~ s/([^\\&#x27;])\&#x27;f\&#x27;(.)/$1THIS_IS_FALSE$2/g; #&#x27;        $line =~ s/THIS_IS_FALSE/0/g;        $line =~ s/AUTOINCREMENT/AUTO_INCREMENT/g;        print $line;    }}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some additional code was necessary to successfully migrate the sqlite database (handles one line Create table statements, foreign keys, fixes a bug in the original program that converted empty fields &lt;code&gt;&#x27;&#x27;&lt;/code&gt; to &lt;code&gt;\&#x27;&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;I &lt;a href=&quot;https://stackoverflow.com/questions/18671/quick-easy-way-to-migrate-sqlite3-to-mysql/1067365#1067365&quot;&gt;posted the code on the migrating my SQLite database to mysql Question&lt;/a&gt;&lt;/p&gt;</Body>
<Tags>python,perl,rewrite</Tags>
</question>
<answer>
<Body>&lt;p&gt;Based on &lt;a href=&quot;http://docs.python.org/dev/howto/regex.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://docs.python.org/dev/howto/regex.html&lt;/a&gt; ...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Replace &lt;code&gt;$line =~ /.*/&lt;/code&gt; with &lt;code&gt;re.search(r&quot;.*&quot;, line)&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;$line !~ /.*/&lt;/code&gt; is just &lt;code&gt;!($line =~ /.*/)&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Replace &lt;code&gt;$line =~ s/.*/x/g&lt;/code&gt; with &lt;code&gt;line=re.sub(r&quot;.*&quot;, &quot;x&quot;, line)&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Replace &lt;code&gt;$1&lt;/code&gt; through &lt;code&gt;$9&lt;/code&gt; inside &lt;code&gt;re.sub&lt;/code&gt; with &lt;code&gt;\1&lt;/code&gt; through &lt;code&gt;\9&lt;/code&gt; respectively.&lt;/li&gt;&lt;li&gt;Outside a sub, save the return value, i.e. &lt;code&gt;m=re.search()&lt;/code&gt;, and replace &lt;code&gt;$1&lt;/code&gt; with the return value of &lt;code&gt;m.group(1)&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;For &lt;code&gt;&quot;INSERT INTO $1$2\n&quot;&lt;/code&gt; specifically, you can do &lt;code&gt;&quot;INSERT INTO %s%s\n&quot; % (m.group(1), m.group(2))&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;I am not sure what is so hard to understand about this that it requires a snide remark as in your comment above. Note that &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; is called the diamond operator. &lt;code&gt;s///&lt;/code&gt; is the substitution operator and &lt;code&gt;//&lt;/code&gt; is the match operator &lt;code&gt;m//&lt;/code&gt;.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Here&#x27;s a pretty literal translation with just the minimum of obvious style changes (putting all code into a function, using string rather than re operations where possible).&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import re, fileinputdef main():  for line in fileinput.input():    process = False    for nope in (&#x27;BEGIN TRANSACTION&#x27;,&#x27;COMMIT&#x27;,                 &#x27;sqlite_sequence&#x27;,&#x27;CREATE UNIQUE INDEX&#x27;):      if nope in line: break    else:      process = True    if not process: continue    m = re.search(&#x27;CREATE TABLE &quot;([a-z_]*)&quot;(.*)&#x27;, line)    if m:      name, sub = m.groups()      line = &#x27;&#x27;&#x27;DROP TABLE IF EXISTS %(name)s;CREATE TABLE IF NOT EXISTS %(name)s%(sub)s&#x27;&#x27;&#x27;      line = line % dict(name=name, sub=sub)    else:      m = re.search(&#x27;INSERT INTO &quot;([a-z_]*)&quot;(.*)&#x27;, line)      if m:        line = &#x27;INSERT INTO %s%s\n&#x27; % m.groups()        line = line.replace(&#x27;&quot;&#x27;, r&#x27;\&quot;&#x27;)        line = line.replace(&#x27;&quot;&#x27;, &quot;&#x27;&quot;)    line = re.sub(r&quot;([^&#x27;])&#x27;t&#x27;(.)&quot;, r&quot;\1THIS_IS_TRUE\2&quot;, line)    line = line.replace(&#x27;THIS_IS_TRUE&#x27;, &#x27;1&#x27;)    line = re.sub(r&quot;([^&#x27;])&#x27;f&#x27;(.)&quot;, r&quot;\1THIS_IS_FALSE\2&quot;, line)    line = line.replace(&#x27;THIS_IS_FALSE&#x27;, &#x27;0&#x27;)    line = line.replace(&#x27;AUTOINCREMENT&#x27;, &#x27;AUTO_INCREMENT&#x27;)    print line,main()&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Shortest? The tilde signifies a regex in perl. &quot;import re&quot; and go from there. The only key differences are that you&#x27;ll be using \1 and \2 instead of $1 and $2 when you assign values, and you&#x27;ll be using %s for when you&#x27;re replacing regexp matches inside strings.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Real issue is do you know actually how to migrate the database? What is presented is merely a search and replace loop.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Here is a slightly better version of the original.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#! /usr/bin/perluse strict;use warnings;use 5.010; # for s/\K//;while( &amp;lt;&amp;gt; ){  next if m&#x27;    BEGIN TRANSACTION   |    COMMIT              |    sqlite_sequence     |    CREATE UNIQUE INDEX  &#x27;x;  if( my($name,$sub) = m&#x27;CREATE TABLE \&quot;([a-z_]*)\&quot;(.*)&#x27; ){    # remove &quot;    $sub =~ s/\&quot;//g; #&quot;    $_ = &quot;DROP TABLE IF EXISTS $name;\nCREATE TABLE IF NOT EXISTS $name$sub\n&quot;;  }elsif( /INSERT INTO \&quot;([a-z_]*)\&quot;(.*)/ ){    $_ = &quot;INSERT INTO $1$2\n&quot;;    # &quot; =&amp;gt; \&quot;    s/\&quot;/\\\&quot;/g; #&quot;    # &quot; =&amp;gt; &#x27;    s/\&quot;/\&#x27;/g; #&quot;  }else{    # &#x27;&#x27; =&amp;gt; \&#x27;    s/\&#x27;\&#x27;/\\\&#x27;/g; #&#x27;  }  # &#x27;t&#x27; =&amp;gt; 1  s/[^\\&#x27;]\K\&#x27;t\&#x27;/1/g; #&#x27;  # &#x27;f&#x27; =&amp;gt; 0  s/[^\\&#x27;]\K\&#x27;f\&#x27;/0/g; #&#x27;  s/AUTOINCREMENT/AUTO_INCREMENT/g;  print;}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1067060/translating-perl-to-python/1067151#1067151&quot;&gt;Alex Martelli&#x27;s solution above&lt;/a&gt; works good, but needs some fixes and additions:&lt;/p&gt;&lt;p&gt;In the lines using regular expression substitution, the insertion of the matched groups must be double-escaped OR the replacement string must be prefixed with r to mark is as regular expression:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;line = re.sub(r&quot;([^&#x27;])&#x27;t&#x27;(.)&quot;, &quot;\\1THIS_IS_TRUE\\2&quot;, line)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;&lt;pre&gt;&lt;code&gt;line = re.sub(r&quot;([^&#x27;])&#x27;f&#x27;(.)&quot;, r&quot;\1THIS_IS_FALSE\2&quot;, line)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also, this line should be added before print:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;line = line.replace(&#x27;AUTOINCREMENT&#x27;, &#x27;AUTO_INCREMENT&#x27;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Last, the column names in create statements should be backticks in MySQL. Add this in line 15:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  sub = sub.replace(&#x27;&quot;&#x27;,&#x27;`&#x27;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here&#x27;s the complete script with modifications:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import re, fileinputdef main():  for line in fileinput.input():    process = False    for nope in (&#x27;BEGIN TRANSACTION&#x27;,&#x27;COMMIT&#x27;,                 &#x27;sqlite_sequence&#x27;,&#x27;CREATE UNIQUE INDEX&#x27;):      if nope in line: break    else:      process = True    if not process: continue    m = re.search(&#x27;CREATE TABLE &quot;([a-z_]*)&quot;(.*)&#x27;, line)    if m:      name, sub = m.groups()      sub = sub.replace(&#x27;&quot;&#x27;,&#x27;`&#x27;)      line = &#x27;&#x27;&#x27;DROP TABLE IF EXISTS %(name)s;CREATE TABLE IF NOT EXISTS %(name)s%(sub)s&#x27;&#x27;&#x27;      line = line % dict(name=name, sub=sub)    else:      m = re.search(&#x27;INSERT INTO &quot;([a-z_]*)&quot;(.*)&#x27;, line)      if m:        line = &#x27;INSERT INTO %s%s\n&#x27; % m.groups()        line = line.replace(&#x27;&quot;&#x27;, r&#x27;\&quot;&#x27;)        line = line.replace(&#x27;&quot;&#x27;, &quot;&#x27;&quot;)    line = re.sub(r&quot;([^&#x27;])&#x27;t&#x27;(.)&quot;, &quot;\\1THIS_IS_TRUE\\2&quot;, line)    line = line.replace(&#x27;THIS_IS_TRUE&#x27;, &#x27;1&#x27;)    line = re.sub(r&quot;([^&#x27;])&#x27;f&#x27;(.)&quot;, &quot;\\1THIS_IS_FALSE\\2&quot;, line)    line = line.replace(&#x27;THIS_IS_FALSE&#x27;, &#x27;0&#x27;)    line = line.replace(&#x27;AUTOINCREMENT&#x27;, &#x27;AUTO_INCREMENT&#x27;)    if re.search(&#x27;^CREATE INDEX&#x27;, line):        line = line.replace(&#x27;&quot;&#x27;,&#x27;`&#x27;)    print line,main()&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;all of scripts on this page can&#x27;t deal with simple sqlite3:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;PRAGMA foreign_keys=OFF;BEGIN TRANSACTION;CREATE TABLE Filename (  FilenameId INTEGER,  Name TEXT DEFAULT &#x27;&#x27;,  PRIMARY KEY(FilenameId)   );INSERT INTO &quot;Filename&quot; VALUES(1,&#x27;&#x27;);INSERT INTO &quot;Filename&quot; VALUES(2,&#x27;bigfile1&#x27;);INSERT INTO &quot;Filename&quot; VALUES(3,&#x27;%gconf-tree.xml&#x27;);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;None were able to reformat &quot;table_name&quot; into proper mysql&#x27;s `table_name` . Some messed up empty string value.&lt;/p&gt;</Body>
</answer>
</qroot>
