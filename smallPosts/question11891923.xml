<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Why won&#x27;t pygame draw a circle?</Title>
<Body>&lt;p&gt;I am a beginner in python, and I&#x27;m trying to draw a circle wherever the mouse is(I also have a mouse and background image). Here is my code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;while True:    for event in pygame.event.get():        if event.type == QUIT:            pygame.quit()            sys.exit        if event.type == MOUSEBUTTONDOWN:            color = (100,100,100)            posx,posy = pygame.mouse.get_pos()            screen.lock()            pygame.draw.circle(screen, color, (posx,posy), 50)            screen.unlock()    screen.blit(background,(0,0))    x,y = pygame.mouse.get_pos()    x -= mousec.get_width()/2    y -= mousec.get_height()/2    screen.blit(mousec, (x,y))    pygame.display.update()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Whenever I click nothing happens. Why doesn&#x27;t it draw a circle? Thanks for the help!&lt;/p&gt;</Body>
<Tags>python,pygame,geometry</Tags>
</question>
<answer>
<Body>&lt;p&gt;I know almost nothing about pygame so I can&#x27;t be much more help than this... but what I think you are doing is always drawing back over your circle. Try this out:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pygame.init()screen = pygame.display.set_mode((640, 480))screen.fill((0,0,0))while True:    for event in pygame.event.get():        if event.type == QUIT:            pygame.quit()            sys.exit()        if event.type == MOUSEBUTTONDOWN:            # draw background first (however)            screen.fill((0,0,0))            # draw your other layers (mouse image)            # draw the circle            color = (255,255,255)            posx,posy = pygame.mouse.get_pos()            pygame.draw.circle(screen, color, (posx,posy), 50)    pygame.display.update()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Basically what is happening in your example is that when you mouse down event does a draw, you will then draw back over it again with the background. I am not sure what &lt;code&gt;mousec&lt;/code&gt; is but that will be drawn over the background every time. So you will never see a circle drawn from your mouse click&lt;/p&gt;&lt;p&gt;My example fills the background once to start, and then when there is a mouse down, it will fill the background again to draw over the previous state, and then draw the circle.&lt;/p&gt;&lt;p&gt;Another approach, using your exact example, is to only record the mouse position when checking the event, and defer the drawing of the circle until after your layers. You would &quot;remember&quot; the last mouse position to constantly redraw that circle on every loop:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;last_mouse_pos = Nonewhile True:    for event in pygame.event.get():        if event.type == QUIT:            pygame.quit()            sys.exit        if event.type == MOUSEBUTTONDOWN:            last_mouse_pos = pygame.mouse.get_pos()        elif event.type == KEYDOWN and event.unicode == &#x27;c&#x27;:            # clear the circle when pressing the &#x27;c&#x27; key            last_mouse_pos = None    screen.blit(background,(0,0))    x,y = pygame.mouse.get_pos()    x -= mousec.get_width()/2    y -= mousec.get_height()/2    screen.blit(mousec, (x,y))    if last_mouse_pos:        color = (100,100,100)        posx,posy = last_mouse_pos        pygame.draw.circle(screen, color, (posx,posy), 50)    pygame.display.update()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The difference in this approach is that you are always drawing everything on each loop as opposed to only in response to changes in events.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;In response to your question in the comments... a way to modify that second example to retain all the mouse clicks would be to save them up in a &lt;code&gt;set&lt;/code&gt; and draw them back each time.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mouse_clicks = set()while True:    for event in pygame.event.get():        if event.type == QUIT:            pygame.quit()            sys.exit        if event.type == MOUSEBUTTONDOWN:            mouse_clicks.add(pygame.mouse.get_pos())        elif event.type == KEYDOWN and event.unicode == &#x27;c&#x27;:            # clear the circle when pressing the &#x27;c&#x27; key            mouse_clicks.clear()    screen.blit(background,(0,0))    x,y = pygame.mouse.get_pos()    x -= mousec.get_width()/2    y -= mousec.get_height()/2    screen.blit(mousec, (x,y))    for pos in mouse_clicks:        color = (100,100,100)        posx,posy = pos        pygame.draw.circle(screen, color, (posx,posy), 50)    pygame.display.update()&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
