<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How would you access Object properties from within an object method?</Title>
<Body>&lt;p&gt;What is the &quot;purist&quot; or &quot;correct&quot; way to access an object&#x27;s properties from within an object method that is not a getter/setter method?&lt;/p&gt;&lt;p&gt;I know that from outside of the object you should use a getter/setter, but from within would you just do:&lt;/p&gt;&lt;p&gt;Java:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;String property = this.property;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PHP:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$property = $this-&amp;gt;property;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or would you do:&lt;/p&gt;&lt;p&gt;Java:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;String property = this.getProperty();&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PHP:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$property = $this-&amp;gt;getProperty();&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Forgive me if my Java is a little off, it&#x27;s been a year since I programmed in Java...&lt;/p&gt;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;It seems people are assuming I am talking about private or protected variables/properties only. When I learned OO I was taught to use getters/setters for every single property even if it was public (and actually I was told never to make any variable/property public). So, I may be starting off from a false assumption from the get go. It appears that people answering this question are maybe saying that you should have public properties and that those don&#x27;t need getters and setters, which goes against what I was taught, and what I was talking about, although maybe that needs to be discussed as well. That&#x27;s probably a good topic for a different question though...&lt;/p&gt;</Body>
<Tags>java,php,oop,theory</Tags>
</question>
<answer>
<Body>&lt;p&gt;This has religious war potential, but it seems to me that if you&#x27;re using a getter/setter, you should use it internally as well - using both will lead to maintenance problems down the road (e.g. somebody adds code to a setter that &lt;em&gt;needs&lt;/em&gt; to run every time that property is set, and the property is being set internally w/o that setter being called).&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;It depends on how the property is used. For example, say you have a student object that has a name property. You could use your Get method to pull the name from the database, if it hasn&#x27;t been retrieved already. This way you are reducing unnecessary calls to the database.&lt;/p&gt;&lt;p&gt;Now let&#x27;s say you have a private integer counter in your object that counts the number of times the name has been called. You may want to not use the Get method from inside the object because it would produce an invalid count.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;blockquote&gt;  &lt;p&gt;Am I just going overboard here?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Perhaps ;)&lt;/p&gt;&lt;p&gt;Another approach would be to utilize a private/protected method to actually do the getting (caching/db/etc), and a public wrapper for it that increments the count:&lt;/p&gt;&lt;p&gt;PHP:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public function getName() {    $this-&amp;gt;incrementNameCalled();    return $this-&amp;gt;_getName();}protected function _getName() {    return $this-&amp;gt;name;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then from within the object itself:&lt;/p&gt;&lt;p&gt;PHP:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$name = $this-&amp;gt;_getName();&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This way you can still use that first argument for something else (like sending a flag for whether or not to used cached data here perhaps).&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Well, it seems with C# 3.0 properties&#x27; default implementation, the decision is taken for you; you HAVE to set the property using the (possibly private) property setter.&lt;/p&gt;&lt;p&gt;I personally only use the private member-behind when not doing so would cause the object to fall in an less than desirable state, such as when initializing or when caching/lazy loading is involved.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;As stated in some of the comments: Sometimes you should, sometimes you shouldn&#x27;t. The great part about private variables is that you are able to see all the places they are used when you change something. If your getter/setter does something you need, use it. If it doesn&#x27;t matter you decide.&lt;/p&gt;&lt;p&gt;The opposite case could be made that if you use the getter/setter and somebody changes the getter/setter they have to analyze all the places the getter and setter is used internally to see if it messes something up.&lt;/p&gt;</Body>
</answer>
</qroot>
