<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>German number separators using format language on OSX?</Title>
<Body>&lt;h3&gt;Update: The answers show so far that it seems to be a platform-related bug on OSX that has to do with the specific locale settings as they don&#x27;t fully support grouping numbers.&lt;/h3&gt;&lt;h3&gt;Update 2: I have just opened &lt;a href=&quot;http://bugs.python.org/issue16944&quot; rel=&quot;nofollow&quot;&gt;an issue&lt;/a&gt; on Python&#x27;s bug tracker. Let&#x27;s see if there is a solution to this problem.&lt;/h3&gt;&lt;hr&gt;&lt;p&gt;I want to format integer and float numbers according to the German numbering convention. This is possible using the format language and the presentation type &lt;code&gt;n&lt;/code&gt; but fails on my platform. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Platform: OS X 10.8.2 (Mountain Lion)&lt;/li&gt;&lt;li&gt;Python: 2.7.3 64-bit &lt;code&gt;(v2.7.3:70274d53c1dd, Apr  9 2012, 20:52:43) [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;1234&lt;/code&gt; =&gt; &lt;code&gt;1.234&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;1234.56&lt;/code&gt; =&gt; &lt;code&gt;1.234,56&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;1000000&lt;/code&gt; =&gt; &lt;code&gt;1.000.000&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;What I have tried so far:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Setting the German locale&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import localelocale.setlocale(locale.LC_ALL, &#x27;de_DE&#x27;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The format specification option &lt;code&gt;,&lt;/code&gt; only recognizes the English format.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&#x27;{:,}&#x27;.format(1234)&#x27;1,234&#x27;&#x27;{:,}&#x27;.format(1234.56)&#x27;1,234.56&#x27;&#x27;{:,}&#x27;.format(1000000)&#x27;1,000,000&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;According to the &lt;a href=&quot;http://docs.python.org/2/library/string.html#format-specification-mini-language&quot; rel=&quot;nofollow&quot;&gt;Python docs&lt;/a&gt;, the integer and float presentation type &lt;code&gt;n&lt;/code&gt; is supposed to do what I want but it doesn&#x27;t.&lt;/p&gt;&lt;pre&gt;&lt;code&gt; &#x27;{:n}&#x27;.format(1234) &#x27;1234&#x27; &#x27;{:n}&#x27;.format(1234.56) &#x27;1234,56&#x27;  # at least the comma was set correctly here &#x27;{:n}&#x27;.format(1000000) &#x27;1000000&#x27; &#x27;{:n}&#x27;.format(12345769.56) &#x27;1,23458e+07&#x27;  # it&#x27;s doing weird things for large floats&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Some more examples and comparisons inspired by @J.F.Sebastian:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;for n in [1234, 1234.56, 1000000, 12345769.56]:    print(&#x27;{0:,} {0:n}&#x27;.format(n))    fmt, val = &quot;%d %f&quot;, (n, n)    print(fmt % val)    print(locale.format_string(fmt, val))    print(locale.format_string(fmt, val, grouping=True))    print(&#x27;-&#x27;*60)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This yields the following incorrect results on my platform:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    1,234 1234    1234 1234.000000    1234 1234,000000    1234 1234,000000    ------------------------------------------------------------    1,234.56 1234,56    1234 1234.560000    1234 1234,560000    1234 1234,560000    ------------------------------------------------------------    1,000,000 1000000    1000000 1000000.000000    1000000 1000000,000000    1000000 1000000,000000    ------------------------------------------------------------    12,345,769.56 1,23458e+07    12345769 12345769.560000    12345769 12345769,560000    12345769 12345769,560000    ------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The correct results which I&#x27;m not getting would look like that:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    1,234 1.234    1234 1234.000000    1234 1234,000000    1.234 1.234,000000    ------------------------------------------------------------    1,234.56 1.234,56    1234 1234.560000    1234 1234,560000    1.234 1.234,560000    ------------------------------------------------------------    1,000,000 1.000.000    1000000 1000000.000000    1000000 1000000,000000    1.000.000 1.000.000,000000    ------------------------------------------------------------    12,345,769.56 1,23458e+07     12345769 12345769.560000    12345769 12345769,560000    12.345.769 12.345.769,560000    ------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Do you have a solution for me using the format language only? Is there any way to trick the locale settings on my platform to accept grouping?&lt;/p&gt;</Body>
<Tags>python,macos,formatting,osx-mountain-lion</Tags>
</question>
<answer>
<Body>&lt;p&gt;Super ugly, but technically answers the question:&lt;/p&gt;&lt;p&gt;From &lt;a href=&quot;http://www.python.org/dev/peps/pep-0378/&quot;&gt;PEP 378&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&#x27;{:,}&#x27;.format(1234.56).replace(&quot;,&quot;, &quot;X&quot;).replace(&quot;.&quot;, &quot;,&quot;).replace(&quot;X&quot;, &quot;.&quot;)&#x27;1.234,56&#x27;&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;This worked for me when used with the German locale:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import locale&amp;gt;&amp;gt;&amp;gt; locale.setlocale(locale.LC_ALL, &#x27;de_DE&#x27;)&#x27;de_DE&#x27;&amp;gt;&amp;gt;&amp;gt; &#x27;{0:n}&#x27;.format(1234.56)&#x27;1.234,56&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is in Cygwin under Windows 7:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import sys&amp;gt;&amp;gt;&amp;gt; print sys.version2.6.5 (r265:79063, Jun 12 2010, 17:07:01)[GCC 4.3.4 20090804 (release) 1]&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Python&#x27;s &lt;code&gt;locale&lt;/code&gt; module&#x27;s implementation unfortunately varies quite a bit across platforms. It&#x27;s really just a light wrapper around the C library vendor&#x27;s notion of locales.&lt;/p&gt;&lt;p&gt;So, on Windows 7, with Python 2.7.3 64-bit, this happens to work (note: &lt;a href=&quot;https://stackoverflow.com/questions/955986/what-is-the-correct-way-to-set-pythons-locale&quot;&gt;locales have different names in Windows&lt;/a&gt;):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import locale&amp;gt;&amp;gt;&amp;gt; locale.setlocale(locale.LC_ALL, &#x27;deu_deu&#x27;)&#x27;German_Germany.1252&#x27;&amp;gt;&amp;gt;&amp;gt; &#x27;{0:n}&#x27;.format(1234.56)&#x27;1.234,56&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Whether the thousands separator will be used can be determined by examining the &lt;a href=&quot;http://docs.python.org/2/library/locale.html#locale.localeconv&quot; rel=&quot;nofollow noreferrer&quot;&gt;&quot;local conventions&quot;&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; locale.localeconv()[&#x27;grouping&#x27;] # On Windows, &#x27;deu_deu&#x27;.[3, 0] # Insert separator every three digits.&amp;gt;&amp;gt;&amp;gt; locale.localeconv()[&#x27;grouping&#x27;] # On OS X, &#x27;de_DE&#x27;.[127] # No separator (locale.CHAR_MAX == 127).&amp;gt;&amp;gt;&amp;gt; locale.localeconv()[&#x27;grouping&#x27;] # Default C locale.[] # Also no separator.&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;I was asked by @Lattyware to provide my own solution for including separators according to the German numbering convention without using the format language. Here is the best solution that I can come up with:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import redef group_num(num):    if isinstance(num, (int, float)):        if isinstance(num, float):            head, tail = str(num).split(&#x27;.&#x27;)        elif isinstance(num, int):            head, tail = str(num), &#x27;&#x27;        digit_parts = re.findall(r&#x27;\d{1,3}\-?&#x27;, &#x27;&#x27;.join(head[::-1]))        num = &#x27;.&#x27;.join(part[::-1] for part in digit_parts[::-1])        if tail:            num = &#x27;,&#x27;.join((num, tail))        return num    else:        raise TypeError(num, &#x27;is not of type int or float&#x27;)&amp;gt;&amp;gt;&amp;gt; group_num(1234)&#x27;1.234&#x27;&amp;gt;&amp;gt;&amp;gt; group_num(123456.7890)&#x27;123.456,789&#x27;&amp;gt;&amp;gt;&amp;gt; group_num(-1000000000.12)&#x27;-1.000.000.000,12&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The performance is also quite okay, compared to the solution given by @Jon-Eric.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;%timeit group_num(1000000000.12)10000 loops, best of 3: 20.6 us per loop# For integers, it&#x27;s faster since several steps are not necessary%timeit group_num(100000000012)100000 loops, best of 3: 18.2 us per loop%timeit &#x27;{:,}&#x27;.format(1000000000.12).replace(&quot;,&quot;, &quot;X&quot;).replace(&quot;.&quot;, &quot;,&quot;).replace(&quot;X&quot;, &quot;.&quot;)100000 loops, best of 3: 2.63 us per loop%timeit &#x27;{:,}&#x27;.format(100000000012).replace(&quot;,&quot;, &quot;X&quot;).replace(&quot;.&quot;, &quot;,&quot;).replace(&quot;X&quot;, &quot;.&quot;)100000 loops, best of 3: 2.01 us per loop&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you know how my solution could be optimized, please let me know.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Even more ugly with &lt;code&gt;split&lt;/code&gt;, &lt;code&gt;join&lt;/code&gt; and &lt;code&gt;replace&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; amount = &#x27;{0:,}&#x27;.format(12345.67)&amp;gt;&amp;gt;&amp;gt; amount&#x27;12,345.67&#x27;&amp;gt;&amp;gt;&amp;gt; &#x27;,&#x27;.join([s.replace(&#x27;,&#x27;,&#x27;.&#x27;) for s in amount.split(&#x27;.&#x27;)])&#x27;12.345,67&#x27;&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
