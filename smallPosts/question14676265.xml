<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How to read a text file into a list or an array with Python</Title>
<Body>&lt;p&gt;I am trying to read the lines of a text file into a list or array in python.  I just need to be able to individually access any item in the list or array after it is created.&lt;/p&gt;&lt;p&gt;The text file is formatted as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;0,0,200,0,53,1,0,255,...,0.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where the &lt;code&gt;...&lt;/code&gt; is above, there actual text file has hundreds or thousands more items.&lt;/p&gt;&lt;p&gt;I&#x27;m using the following code to try to read the file into a list:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;text_file = open(&quot;filename.dat&quot;, &quot;r&quot;)lines = text_file.readlines()print linesprint len(lines)text_file.close()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output I get is:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[&#x27;0,0,200,0,53,1,0,255,...,0.&#x27;]1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Apparently it is reading the entire file into a list of just one item, rather than a list of individual items.  What am I doing wrong?&lt;/p&gt;</Body>
<Tags>python,arrays,list,text</Tags>
</question>
<answer>
<Body>&lt;p&gt;You will have to split your string into a list of values using &lt;code&gt;split()&lt;/code&gt;&lt;/p&gt;&lt;p&gt;So,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lines = text_file.read().split(&#x27;,&#x27;)&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;You can also use numpy loadtxt like&lt;/p&gt;&lt;pre&gt;&lt;code&gt;from numpy import loadtxtlines = loadtxt(&quot;filename.dat&quot;, comments=&quot;#&quot;, delimiter=&quot;,&quot;, unpack=False)&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;&lt;strong&gt;python&#x27;s file.readLines() method returns a list of the lines in the file:&lt;/strong&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;f = open(&#x27;file_name.ext&#x27;, &#x27;r&#x27;)x = f.readlines()f.close()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you should be able to iterate through the array of lines x.&lt;/p&gt;&lt;p&gt;If you want to use the file and not have to remember to close it afterward, do this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;with open(&#x27;file_name.ext&#x27;, &#x27;r&#x27;) as f:    x = f.readlines()&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;So you want to create a list of lists... We need to start with an empty list&lt;/p&gt;&lt;pre&gt;&lt;code&gt;list_of_lists = []&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;next, we read the file content, line by line&lt;/p&gt;&lt;pre&gt;&lt;code&gt;with open(&#x27;data&#x27;) as f:    for line in f:        inner_list = [elt.strip() for elt in line.split(&#x27;,&#x27;)]        # in alternative, if you need to use the file content as numbers        # inner_list = [int(elt.strip()) for elt in line.split(&#x27;,&#x27;)]        list_of_lists.append(inner_list)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A common use case is that of columnar data, but our units of storage are therows of the file, that we have read one by one, so you may want to &lt;em&gt;transpose&lt;/em&gt;your list of lists.  This can be done with the following idiom&lt;/p&gt;&lt;pre&gt;&lt;code&gt;by_cols = zip(*list_of_lists)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another common use is to give a name to each column&lt;/p&gt;&lt;pre&gt;&lt;code&gt;col_names = (&#x27;apples sold&#x27;, &#x27;pears sold&#x27;, &#x27;apples revenue&#x27;, &#x27;pears revenue&#x27;)by_names = {}for i, col_name in enumerate(col_names):    by_names[col_name] = by_cols[i]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;so that you can operate on homogeneous data items&lt;/p&gt;&lt;pre&gt;&lt;code&gt; mean_apple_prices = [money/fruits for money, fruits in                     zip(by_names[&#x27;apples revenue&#x27;], by_names[&#x27;apples_sold&#x27;])]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Most of what I&#x27;ve written can be speeded up using the &lt;code&gt;csv&lt;/code&gt; module, from the standard library.  Another third party module is &lt;code&gt;pandas&lt;/code&gt;, that lets you automate most aspects of a typical data analysis (but has a number of dependencies).&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;Update&lt;/em&gt; While in Python 2 &lt;code&gt;zip(*list_of_lists)&lt;/code&gt; returns a different (transposed) list of lists, in Python 3 the situation has changed and &lt;code&gt;zip(*list_of_lists)&lt;/code&gt; returns &lt;em&gt;a zip object&lt;/em&gt; that is not subscriptable.&lt;/p&gt;&lt;p&gt;If you &lt;em&gt;need&lt;/em&gt; indexed access you can use&lt;/p&gt;&lt;pre&gt;&lt;code&gt;by_cols = list(zip(*list_of_lists))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;that gives you a list of lists in both versions of Python.&lt;/p&gt;&lt;p&gt;On the other hand, if you &lt;em&gt;don&#x27;t need&lt;/em&gt; indexed access and what you want is just to build a dictionary indexed by column names, a zip object is just fine...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;file = open(&#x27;some_data.csv&#x27;)names = get_names(next(file))columns = zip(*((x.strip() for x in line.split(&#x27;,&#x27;)) for line in file)))d = {}for name, column in zip(names, columns): d[name] = column&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;pre&gt;&lt;code&gt;with open(&#x27;D:\python\positive.txt&#x27;, &#x27;r&#x27;) as myfile: data=myfile.read().replace(&#x27;\n&#x27;, &#x27;&#x27;)&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;&lt;strong&gt;This question is asking how to read the comma-separated value contents from a file into an iterable list:&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;&lt;code&gt;0,0,200,0,53,1,0,255,...,0.&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;The easiest way to do this is with the &lt;code&gt;csv&lt;/code&gt; module as follows:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import csvwith open(&#x27;filename.dat&#x27;, newline=&#x27;&#x27;) as csvfile:    spamreader = csv.reader(csvfile, delimiter=&#x27;,&#x27;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Now, you can easily iterate over &lt;code&gt;spamreader&lt;/code&gt; like this:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;for row in spamreader:    print(&#x27;, &#x27;.join(row))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;See &lt;a href=&quot;https://docs.python.org/3.6/library/csv.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;documentation&lt;/a&gt; for more examples.&lt;/strong&gt;&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;If your file contains numerical values then numpy&#x27;s &lt;code&gt;loadtxt&lt;/code&gt; method seems to be the best approach. You can read the array as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import numpy as npfilename = &#x27;../data/NLPR_MCT/db3/cam1.dat&#x27;x = np.loadtxt(filename, delimiter=&#x27;,&#x27;)print (x)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can index values as array in x and file.readlines() is inconvenient because it inserts &#x27;\n&#x27; in every line and indexing may become erroneous. &lt;/p&gt;</Body>
</answer>
</qroot>
