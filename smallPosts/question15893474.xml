<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Using absolute paths for build dependencies</Title>
<Body>&lt;p&gt;Currently we use Source Safe and start migration to Subversion.All external SDK(&gt; 500 MB) hold in Source Safe now, and I look for way to move them from VSSto some repository.&lt;/p&gt;&lt;p&gt;We have C++ (mostly), C# (many), Java (few) projects. Hundreds projects. Only Windows platform.&lt;/p&gt;&lt;p&gt;I a couple several dependency managers but not satisfied:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;NuGet - good for .Net but painful for C++&lt;/li&gt;&lt;li&gt;Ivy - not look in depth, but seems not acceptable for C++&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;First question: what I can check else? It should be easy for using by end developer. Best case - simple build within IDE.&lt;/strong&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Currently I am inclined to next solution:&lt;/p&gt;&lt;p&gt;Allocate some rarely used drive, like S: and declare it as &#x27;DEV HOME&#x27;.&lt;/p&gt;&lt;p&gt;Then place externals here:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;S:\SDK\boost\1.30\...S:\SDK\boost\1.45\...S:\SDK\oracle\agile_9.0.0.0\...S:\SDK\IBM\lotus_8.0\...S:\SDK\IBM\lotus_9.0\...S:\Tools\NuGet\nuget.exeS:\Tools\clr\gacutil.exe&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Autobuild machine will hold mastercopy of this &#x27;DEV HOME&#x27;. Every developer should copy necessary SDKs from autobuild machine to local and create disk with &lt;strong&gt;subst&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;I can&#x27;t find big problems with this solution:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Branches. Projects in different branches can contains references to different versions of SDK (boost for example)&lt;/li&gt;&lt;li&gt;Version of external component will not change too frequently, so here will no hundreds of, say, boost versions.&lt;/li&gt;&lt;li&gt;Easy for developers to setup. &lt;/li&gt;&lt;li&gt;Absolute paths supported by any tool.&lt;/li&gt;&lt;li&gt;No problems with disk space if you want use not-so-big SSD drive for sources. (Currently I move my externals to separate drive with help of symbolic links. But for other developers this look like black magic)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Minor problems:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Personally for me it is not beautiful solution.&lt;/li&gt;&lt;li&gt;Disk (S:) can be busy&lt;/li&gt;&lt;li&gt;Can&#x27;t be uses as is in Linux (but currently we not interested in it)  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Second question: which troubles in this solution can be?&lt;/strong&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Update 1&lt;/strong&gt;: Why not relative paths.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Is externals should be in one directory up with sources root? :&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;externals/...branch-root-1.0/project_collection_1/project1/...branch-root-2.0/project_collection_2/...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here all projects should be in one place or duplicate externals. Seems not much different from solutions with absolute path.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Externals should be in same folder with sources root? :&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;branch-root-1.0/externals/...branch-root-1.0/project_collection_1/project1/...branch-root-1.0/project_collection_2/...branch-root-2.0/externals/...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then externals will be duplicate in each checkouted branch. This +500MB for every branch checkout + some additional work for setup them.&lt;/p&gt;&lt;p&gt;Well, this look acceptable, but I do not see how it is beter then absolute paths. Really, I want to know advantages of relative paths, because I am also uncomforntable with absolute paths.&lt;/p&gt;</Body>
<Tags>c#,c++,build,external,dependency-management</Tags>
</question>
<answer>
<Body>&lt;p&gt;I have gone down the path you have.... it can work.  However I suggest you make everything relative paths and spend the time getting your projects sorted for relative paths.&lt;/p&gt;&lt;p&gt;The problem with any fixed directory system and source control is you can branch or have multiple check outs of your projects.&lt;/p&gt;&lt;p&gt;Also,  while subversion is good,  it is worth considering Mercurial or Git.  They allow for a number of different kinds of work flows that subversion doesn&#x27;t.  It takes a bit more work thinking how to structure your repositories, but it&#x27;s well worth it. It is a big jump from sourcesafe, and from my experience, many people coming from sourcesafe really struggle / dislike subversion / git / mercurial initially.  They all require you to understand  version control in a bit more detail, but thats a good thing, as it is a very good tool.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;I think, if your platform is Windows only and Visual Studio then NuGet is the best one. What I like about Nuget is almost no configuration. For example, you can use Boost library immediately after you install &lt;a href=&quot;https://www.nuget.org/packages/boost/&quot; rel=&quot;nofollow&quot;&gt;Boost Nuget package&lt;/a&gt; to your project. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;You don&#x27;t need to configure include/library paths (your current problem).&lt;/li&gt;&lt;li&gt;It automatically installs/configures/updates packages for your project on other computers as soon as you copy (store in SVN/mercurial) the packages.config file.&lt;/li&gt;&lt;li&gt;It can solve/warning about compatibility problems between packages. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I&#x27;m not aware about any good cross-platform solution for this problem.&lt;/p&gt;</Body>
</answer>
</qroot>
