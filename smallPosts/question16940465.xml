<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Sympy, is it possible to force a class to stay on the left or on the right side of the expression</Title>
<Body>&lt;p&gt;In &lt;a href=&quot;https://stackoverflow.com/a/16245991/832621&quot;&gt;this answer&lt;/a&gt; it is explained how to avoid &lt;code&gt;args&lt;/code&gt; to be sorted in SymPy classes like &lt;code&gt;Mul&lt;/code&gt;, &lt;code&gt;Add&lt;/code&gt; and so on.&lt;/p&gt;&lt;p&gt;For a new created class &lt;a href=&quot;https://stackoverflow.com/q/15463412/832621&quot;&gt;like this one explained here&lt;/a&gt; it can go to the right hand side when multiplied by a &lt;code&gt;sympy.core.numbers.Float&lt;/code&gt;, &lt;code&gt;sympy.core.numbers.Pi&lt;/code&gt; or &lt;code&gt;sympy.core.numbers.Integer&lt;/code&gt;, for example, giving:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;print D(x) * 1.1.0*D(x)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The original expression gives &lt;code&gt;0.&lt;/code&gt; when evaluated, while the new one gives &lt;code&gt;D(x)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In order for this differential operator to work properly, it must stay on the left hand side:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;print D(x) * 1.D(x)*1.0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Is there any hidden parameter, like &lt;code&gt;_op_priority&lt;/code&gt; for changing &lt;code&gt;__mul__()&lt;/code&gt; priority, that tells SymPy the type that stays more to the left or to the right?&lt;/p&gt;</Body>
<Tags>python,expression,sympy,symbolic-math,symbolic-computation</Tags>
</question>
<answer>
<Body>&lt;p&gt;Multiplication by a Mul does not work the way you expect it to. &lt;/p&gt;&lt;p&gt;First off, the printing order has nothing to do with anything.  If that&#x27;s all you care about, you can change it by modifying the printer.  &lt;/p&gt;&lt;p&gt;You should instead look at the object&#x27;s &lt;code&gt;.args&lt;/code&gt;. But even here, this does not matter. When you multiply something by a multiplication, it does not &quot;apply&quot; each multiplication in the order it is seen.  Rather, it creates a new &lt;code&gt;Mul&lt;/code&gt; object with all the args combined (to be sure, in the &lt;code&gt;commutative=False&lt;/code&gt; case, the args are kept in order).  Mul does not call any special submethods on these objects.  This is a feature we want (see &lt;a href=&quot;https://code.google.com/p/sympy/issues/detail?q=1941&amp;amp;id=1941&quot; rel=&quot;nofollow&quot;&gt;https://code.google.com/p/sympy/issues/detail?q=1941&amp;amp;id=1941&lt;/a&gt; and &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Canonicalization&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/wiki/Canonicalization&lt;/a&gt;), but for now, it is not done. &lt;/p&gt;</Body>
</answer>
</qroot>
