<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How to sort a csv file column by newest time</Title>
<Body>&lt;p&gt;I am trying to read in a csv file which is a result from running &lt;a href=&quot;http://technet.microsoft.com/en-us/sysinternals/bb963902.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;Autoruns&lt;/a&gt; autorunsc command line (i.e., autorunsc -a -m -c &gt; mycsv.csv) and sort it by time in a way which I get the newest date/time at the top like it does in excel.  &lt;/p&gt;&lt;p&gt;I have so far figured out how to convert it the csv file without an encoding error by reading it in as UTF16 using &lt;a href=&quot;https://stackoverflow.com/questions/9177820/python-utf-16-csv-reader&quot;&gt;Recoder&lt;/a&gt; python class to reencode it as utf 8.  &lt;/p&gt;&lt;pre&gt;&lt;code&gt;import sysimport csvimport operatorimport codecsclass Recoder(object):    def __init__(self, stream, decoder, encoder, eol=&#x27;\r\n&#x27;):        self._stream = stream        self._decoder = decoder if isinstance(decoder, codecs.IncrementalDecoder) else codecs.getincrementaldecoder(decoder)()        self._encoder = encoder if isinstance(encoder, codecs.IncrementalEncoder) else codecs.getincrementalencoder(encoder)()        self._buf = &#x27;&#x27;        self._eol = eol        self._reachedEof = False    def read(self, size=None):        r = self._stream.read(size)        raw = self._decoder.decode(r, size is None)        return self._encoder.encode(raw)    def __iter__(self):        return self    def __next__(self):        if self._reachedEof:            raise StopIteration()        while True:            line,eol,rest = self._buf.partition(self._eol)            if eol == self._eol:                self._buf = rest                return self._encoder.encode(line + eol)            raw = self._stream.read(1024)            if raw == &#x27;&#x27;:                self._decoder.decode(b&#x27;&#x27;, True)                self._reachedEof = True                return self._encoder.encode(self._buf)            self._buf += self._decoder.decode(raw)    next = __next__    def close(self):        return self._stream.close()writer = open(&#x27;mycsv1.csv, &#x27;wb&#x27;)f = open(&#x27;mycsv.csv&#x27;,&#x27;rb&#x27;):sr = Recoder(f, &#x27;utf-16&#x27;, &#x27;utf-8&#x27;)s = sorted(csv.reader(sr), key=operator.itemgetter(0), reverse=True))for row in s:    print &amp;gt;&amp;gt; writer, row[0], &quot;,&quot;, row[1], &quot;,&quot; row[2]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The issue is this only sorts it by the month from the looks of it.  Say I had entries for months 1 - 6 for years 2010, 2011, 2012.  &lt;/p&gt;&lt;p&gt;It would sort it by the month only and not include the time or date so that I get the newest dates only.  Instead I get 1/1/2010, 1/1/2011, 1/1/2012, 2/1/2010, 2/1/2011, 2/1/2012.  &lt;/p&gt;&lt;p&gt;If I sort it in excel, it will give me the newest dates/times first which in the case if it was based on this month of June (6/1/2012, 5/1/2012, 4/1/2012, etc.)  Any help on how can I accomplish this using python is most appreciated.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The sample data I am working with is from autorunsc after its been formatted to utf8.  The data in the CSV should be as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Time, Entry Location, Entry, Enabled, Category, Description, Publisher, Launch String6/23/2011 14:23, HKLM\System\CurrentControlSet\Services, JavaQuickStarterService, enabled, Services, Prefetches JRE files for faster startup, Oracle Corporation, C:\Program Files\java, C:\Program Files\Java\jre\blah5/25/2006 1:14,,,,,,,,,4/4/2003 22:10,,,,,,,,,4/17/2006 11:11,,,,,,,,0,,,,,,,,, (Some of the entries do not have date values and are null or blank.6/10/2013 9:30,,,,,,,,,6/23/2013 10:25,,,,,,,,,etc&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Most of these entries have values, but I didn&#x27;t want to copy and paste everything.  I basically want to sort the dates from newest date/time like excel does.  The lambda option someone mentioned below errors out because it is reading in &quot;Time&quot; from the column first.  I want to figure out how to skip the first row and use lambda on the other date/time values to sort appropriately.&lt;/p&gt;</Body>
<Tags>python,date,sorting,csv,time</Tags>
</question>
<answer>
<Body>&lt;p&gt;Ok, didn&#x27;t fully understand what was going on before. You problem is that your &quot;dates&quot; are still strings and being sorted as such. I&#x27;m guessing your date format is Month/Day/Year (US date style) as you say it&#x27;s sorted by Month. All you need to do is parse your dates into datetime objects to solve your sorting problem.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# add this import at the top of your filefrom datetime import datetime# replace your current call to sorted with:s = sorted(csv.reader(sr), key=lambda x:datetime.strptime(x[0],&quot;%m/%d/%Y&quot;), reverse=True))&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;You can use &lt;strong&gt;pandas&lt;/strong&gt; module and &lt;strong&gt;to_datetime()&lt;/strong&gt; method.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Code :&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import pandas as pddata = pd.read_csv(&#x27;mycsv.csv&#x27;)data[&#x27;Time&#x27;] = pd.to_datetime(data[&#x27;Time&#x27;], format=&quot;%m/%d/%Y %H:%M&quot;)data = data.sort_values(by=&#x27;Time&#x27;, ascending=False)print(data.to_csv(index=False))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Input :&lt;/strong&gt; mycsv.csv&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Time, Field6/23/2011 14:23, ABC5/25/2006 1:14, XYZ4/4/2003 22:10, PQR4/17/2006 11:11,GHI, 0, 16/10/2013 9:30, 26/23/2013 10:25, 3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Output :&lt;/strong&gt; &lt;/p&gt;&lt;pre&gt;&lt;code&gt;Time, Field2013-06-23 10:25:00, 32013-06-10 09:30:00, 22011-06-23 14:23:00, ABC2006-05-25 01:14:00, XYZ2006-04-17 11:11:00,GHI2003-04-04 22:10:00, PQR, 0, 1&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
