<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Preventing implicit conversion in C++</Title>
<Body>&lt;p&gt;I ask the user for an integer input and I do not want to execute code unless it is strictly an integer.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;int x;if(cin &amp;gt;&amp;gt; x)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For instance if the user inputs a double above, the if statement will execute with implicit conversion to an integer. Instead I don&#x27;t want the code to execute at all.&lt;/p&gt;&lt;p&gt;How can I prevent this?&lt;/p&gt;</Body>
<Tags>c++</Tags>
</question>
<answer>
<Body>&lt;p&gt;There is no conversion there. If the user enters a fraction (there is no &lt;code&gt;double&lt;/code&gt;), then the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; extraction stops at the decimal point.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://ideone.com/azdOrO&quot; rel=&quot;nofollow&quot;&gt;http://ideone.com/azdOrO&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;int main() {    int x;    std::cin &amp;gt;&amp;gt; x;    std::cout &amp;lt;&amp;lt; std::cin.rdbuf();} input:123.456output:.456&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you want to flag the existence of the decimal point as an error, you will have to do something to extract it from &lt;code&gt;cin&lt;/code&gt; and detect it.&lt;/p&gt;&lt;p&gt;One good parsing strategy with C++ streams is to &lt;code&gt;getline&lt;/code&gt; what you know you will process into an &lt;code&gt;istringstream&lt;/code&gt;, call it &lt;code&gt;s&lt;/code&gt;, then check that that &lt;code&gt;s.peek() == std::char_traits&amp;lt;char&amp;gt;::eof()&lt;/code&gt; when you finish. If you don&#x27;t use &lt;code&gt;getline&lt;/code&gt; to pull the individual number, then &lt;code&gt;peek&lt;/code&gt; can check whether the next character is a space (using &lt;code&gt;std::isspace&lt;/code&gt;) without consuming that character from the stream.&lt;/p&gt;&lt;p&gt;Probably the cleanest way to check that input is finished, although it&#x27;s somewhat esoteric, is to use &lt;code&gt;std::istream::sentry&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;if ( ! ( std::cin &amp;gt;&amp;gt; x ) || std::istream::sentry( std::cin ) ) {    std::cerr &amp;lt;&amp;lt; &quot;Invalid or excessive input.\n&quot;;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This consumes space at the end of the input. &lt;code&gt;sentry&lt;/code&gt; also provides a &lt;code&gt;noskipws&lt;/code&gt; option to avoid consuming the space.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;if ( ! ( std::cin &amp;gt;&amp;gt; x ) || std::istream::sentry( std::cin, true ) ) {    std::cerr &amp;lt;&amp;lt; &quot;Invalid or excessive input. (No space allowed at end!)\n&quot;;}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;This seems to work. It ignores whitespace, I don&#x27;t know if that&#x27;s ok with you.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;string s;cin &amp;gt;&amp;gt; s;stringstream ss(s);int x;if (! (ss &amp;gt;&amp;gt; x)){    cerr &amp;lt;&amp;lt; &quot;You didn&#x27;t enter an integer.&quot; &amp;lt;&amp;lt; endl;    return -1;}string temp;ss &amp;gt;&amp;gt; temp;if (! temp.empty()){    cerr &amp;lt;&amp;lt; &quot;You didn&#x27;t enter an integer.&quot; &amp;lt;&amp;lt; endl;    return -1;}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
