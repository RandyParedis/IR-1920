<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How do I place the elements of a list into the middle of another list? A one dimensional battleship game. (Python)</Title>
<Body>&lt;p&gt;So I&#x27;m creating this simple little battleship program.  I&#x27;m getting a little frustrated at the aspect of a player placing their boats.  What I&#x27;d like is for the function ship_place() to take a boat as a parameter, ask for the index of the array the player would like to place the boat, and then place the boat in the ocean starting at the specified index.  I want the contents of the boat (which is a list) to be &quot;exported&quot; to the ocean (which is also a list).&lt;/p&gt;&lt;p&gt;I created this function and it&#x27;s been giving me two errors.  The first is that for some reason it&#x27;s placing the entire boat array into the specified index.  The second is that the list taken_spots1 is not receiving all of the taken spots it should be.  &lt;/p&gt;&lt;p&gt;P.S. I originally had for loops within the function but was getting the same error, so I tried while loops to see if anything would change.  Nothing did.     &lt;/p&gt;&lt;pre&gt;&lt;code&gt;ocean = [&#x27;O&#x27;]*100taken_spots1 = []boat1 = [&#x27;&amp;lt;&#x27;,&#x27;&amp;gt;&#x27;],boat2 = [&#x27;&amp;lt;&#x27;,&#x27;=&#x27;,&#x27;&amp;gt;&#x27;],boat3 = [&#x27;&amp;lt;&#x27;,&#x27;::&#x27;,&#x27;&amp;gt;&#x27;],boat4 = [&#x27;&amp;lt;&#x27;,&#x27;@&#x27;,&#x27;@&#x27;,&#x27;&amp;gt;&#x27;], #cannonsboat5 = [&#x27;&amp;lt;&#x27;,&#x27;G&#x27;,&#x27;U&#x27;,&#x27;N&#x27;,&#x27;&amp;gt;&#x27;]ship_yard = [boat1,boat2,boat3,boat4,boat5]def ship_place(boat):    spot = &quot;&quot;    while spot == &quot;&quot;:        spot = input(&quot;Place a boat: &quot;)        spot = eval(spot)        if spot in taken_spots1:            spot = &quot;&quot;            print(&quot;That spot&#x27;s already taken, dummy&quot;)        else:            j=0            while j &amp;lt; len(boat):                taken_spots1.append(spot + j)                j += 1    i = 0    while i &amp;lt; len(boat):        ocean[spot - 1 + i] = boat[i]        i += 1for i in range(5):    ship_place(ship_yard[i])    print(ocean)    print(taken_spots1)&lt;/code&gt;&lt;/pre&gt;</Body>
<Tags>python,arrays,list</Tags>
</question>
<answer>
<Body>&lt;p&gt;Your program is almost correct!  The problem is that you have some extra commas after some of the boats.&lt;/p&gt;&lt;p&gt;For example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;boat1 = [&#x27;&amp;lt;&#x27;,&#x27;&amp;gt;&#x27;],&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remove the comma.&lt;/p&gt;&lt;p&gt;It is a little bit surprising, but in Python when you add a comma, you get a &quot;tuple&quot;.  Usually we see tuples written like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;t = (1, 3)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That would be a length-2 tuple with the values &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt;.  But you can declare a length-1 tuple and it is legal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;t = (1,)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And it turns out that the parentheses are not required:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;t = 1,&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is what you did.  You declared a length-1 tuple, whose contents were a list.  Then when your function received its argument, &lt;code&gt;boat&lt;/code&gt;, it received a length-1 tuple, and when it indexed the tuple it got a list.&lt;/p&gt;&lt;p&gt;P.S. You can do what you want using &quot;slicing&quot;.  When you slice a list, you specify some section of it; if you assign to that section, you replace that section.&lt;/p&gt;&lt;p&gt;You put a ship into the ocean with this loop:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;i = 0while i &amp;lt; len(boat):    ocean[spot - 1 + i] = boat[i]    i += 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can replace the loop with this code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;start = spot - 1end = start + len(boat)ocean[start:end] = boat&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can even make a one-liner but I think it is too hard to read and understand.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ocean[spot-1:spot-1+len(boat)] = boat&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;P.P.S.  If I were writing this program, I wouldn&#x27;t maintain the &lt;code&gt;taken_spots&lt;/code&gt; list as well as the &lt;code&gt;ocean&lt;/code&gt;.  I would just look in the ocean to see if there is already a boat there.  Right now you could potentially have a problem where the &lt;code&gt;taken_spots&lt;/code&gt; isn&#x27;t accurate; the ocean is always what it is, so looking at it removes a potential source of bugs.&lt;/p&gt;&lt;p&gt;Here is one way you could look at the ocean to see if a ship will fit in a spot.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def spot_taken(i, ship):    start = i    end = i + len(ship)    for ch in ocean[start:end]:        if ch != &#x27;O&#x27;:            return True    return False&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are just starting out with Python, you may not have learned about the &lt;code&gt;any()&lt;/code&gt; and &lt;code&gt;all()&lt;/code&gt; functions... but they provide a very convenient way to write &lt;code&gt;spot_taken()&lt;/code&gt;.  Like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def spot_taken(i, ship):    start = i    end = i + len(ship)    return any(ch != &#x27;O&#x27; for ch in ocean[start:end])&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could even make it a one-liner, but again maybe it&#x27;s too ugly:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def spot_taken(i, ship):    return any(ch != &#x27;O&#x27; for ch in ocean[i:i+len(ship)])&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If this seems too weird or tricky, ignore it for now.  You will learn it eventually.  But &lt;code&gt;any()&lt;/code&gt; and &lt;code&gt;all()&lt;/code&gt; are among my favorite features in Python, so I just wanted to share them with you!&lt;/p&gt;&lt;p&gt;P.P.P.S. It is often useful, when debugging, to add calls to &lt;code&gt;print()&lt;/code&gt; and make sure that values are what you expect.  When I printed the value of &lt;code&gt;boat&lt;/code&gt; it printed as a tuple: &lt;code&gt;([&#x27;&amp;lt;&#x27;, &#x27;&amp;gt;&#x27;],)&lt;/code&gt;  And that was how I figured this out.&lt;/p&gt;&lt;p&gt;It can also be handy to have a debugger that lets you inspect variables, check their types, etc. without needing to write the &lt;code&gt;print()&lt;/code&gt; statements.  I have used WingWare IDE, which has a free-to-use version that you might want to check out.  &lt;a href=&quot;http://wingware.com/&quot; rel=&quot;nofollow&quot;&gt;http://wingware.com/&lt;/a&gt;&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Okay there we go, this should work:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin pythonocean = [&#x27;O&#x27;]*100taken_spots1 = set()boat1 = [&#x27;[&amp;lt;&#x27;,&#x27;&amp;gt;]&#x27;]boat2 = [&#x27;[&amp;lt;&#x27;,&#x27;=&#x27;,&#x27;&amp;gt;]&#x27;]boat3 = [&#x27;[&amp;lt;&#x27;,&#x27;::&#x27;,&#x27;&amp;gt;]&#x27;]boat4 = [&#x27;[&amp;lt;&#x27;,&#x27;@&#x27;,&#x27;@&#x27;,&#x27;&amp;gt;]&#x27;] #cannonsboat5 = [&#x27;[&amp;lt;&#x27;,&#x27;G&#x27;,&#x27;U&#x27;,&#x27;N&#x27;,&#x27;&amp;gt;]&#x27;]ship_yard = [boat1,boat2,boat3,boat4,boat5]def foundboatpart(start, boatlen):    for t in range(start, start + boatlen):        if t in taken_spots1 or t &amp;gt; len(ocean) or t &amp;lt;= 0: return 1    return 0def ship_place(boat):    spot = &quot;&quot;    while spot == &quot;&quot;:        spot = int(input(&quot;Place a boat: &quot;))        if foundboatpart(spot, len(boat)):            spot = &quot;&quot;            print(&quot;That spot&#x27;s already taken, dummy&quot;)        else:            taken_spots1.update(range(spot, spot + len(boat)))    ocean[spot - 1 : spot + len(boat) - 1] = boatfor i in range(5):    ship_place(ship_yard[i])    print(ocean)    print(taken_spots1)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Sample run&lt;/strong&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Place a boat: 1[&#x27;[&amp;lt;&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;]{1, 2}Place a boat: 2That spot&#x27;s already taken, dummyPlace a boat: 3[&#x27;[&amp;lt;&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;[&amp;lt;&#x27;, &#x27;=&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;]{1, 2, 3, 4, 5}Place a boat: 6[&#x27;[&amp;lt;&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;[&amp;lt;&#x27;, &#x27;=&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;[&amp;lt;&#x27;, &#x27;::&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;]{1, 2, 3, 4, 5, 6, 7, 8}Place a boat: 8That spot&#x27;s already taken, dummyPlace a boat: 9[&#x27;[&amp;lt;&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;[&amp;lt;&#x27;, &#x27;=&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;[&amp;lt;&#x27;, &#x27;::&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;[&amp;lt;&#x27;, &#x27;@&#x27;, &#x27;@&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}Place a boat: 12That spot&#x27;s already taken, dummyPlace a boat: 13[&#x27;[&amp;lt;&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;[&amp;lt;&#x27;, &#x27;=&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;[&amp;lt;&#x27;, &#x27;::&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;[&amp;lt;&#x27;, &#x27;@&#x27;, &#x27;@&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;[&amp;lt;&#x27;, &#x27;G&#x27;, &#x27;U&#x27;, &#x27;N&#x27;, &#x27;&amp;gt;]&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;, &#x27;O&#x27;]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
