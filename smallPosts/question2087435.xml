<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Some Issues About Cygwin[Linux in Windows] (socket,thread,other programming and shell issues)</Title>
<Body>&lt;p&gt;I have some question about cygwin  :&lt;br&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Can I use Cygwin develop socket based code? &lt;br&gt;&lt;/li&gt;&lt;li&gt;Does Cygwin have &lt;code&gt;read()&lt;/code&gt; and &lt;code&gt;write()&lt;/code&gt; functions that work with file descriptors?&lt;br&gt;&lt;/li&gt;&lt;li&gt;Can I use Pthread library in Cygwin?&lt;/li&gt;&lt;li&gt;Does code that compiles in Cygwin alsocompile in Linux without any change or with little change?&lt;br&gt;&lt;/li&gt;&lt;li&gt;Will an executable file that built byCygwin run in Linux ?&lt;br&gt;&lt;/li&gt;&lt;li&gt;Why does Cygwin not need the linkeroption &lt;code&gt;-lpthread&lt;/code&gt; when I use pthread library?&lt;/li&gt;&lt;li&gt;why in &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt; don&#x27;t I need to use &lt;code&gt;using namespace std;&lt;/code&gt; ?&lt;/li&gt;&lt;li&gt;Can I work with QT in Cygwin?  If so,How?&lt;/li&gt;&lt;li&gt;Can I boot my Linux in other&lt;/li&gt;&lt;li&gt;partition with Cygwin and use it?&lt;/li&gt;&lt;li&gt;Can I access the other partition that is EXT3 in Cygwin?&lt;/li&gt;&lt;/ol&gt;</Body>
<Tags>c++,c,linux,cygwin</Tags>
</question>
<answer>
<Body>&lt;p&gt;Yes, Yes, Yes, Yes (if you write it carefully and don&#x27;t use anything specific to cygwin), No.&lt;/p&gt;&lt;p&gt;On 5: it may be possible to cross-compile from Cygwin to Linux, I really don&#x27;t know. If it is, then technically some executables &quot;built by Cygwin&quot; would run on Linux. But Cygwin executables won&#x27;t run on Linux.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;&quot;Yes&quot; to all of those except 5. You&#x27;ll have to build your executables separately for Linux, but that should be straightforward since the answer to 4 is &quot;yes&quot;.&lt;/p&gt;&lt;p&gt;Make sure you install all the development headers you need on both platforms.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;In response to #7, the version of the C++ compiler that you have is probably out of date. If you don&#x27;t need linux/posix portability, I&#x27;d switch to the non-cygwin MinGW GCC compiler - you can get 4.4.1 at &lt;a href=&quot;http://tdragon.net/recentgcc/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://tdragon.net/recentgcc/&lt;/a&gt; &lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Regarding 6, you don&#x27;t need -lpthread because Pthreads support is part of the Cygwin DLL.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;&lt;strong&gt;On 1:&lt;/strong&gt; Yes.  Socket libraries are shipped with Cygwin - many socket based apps such as &lt;a href=&quot;http://apache.active-venture.com/cygwin.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;web servers&lt;/a&gt; are included in the base distribution.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;On 2:&lt;/strong&gt; Yes.  I think all of the &#x27;section 2 and 3&#x27; system calls in the GNU C runtime and library are implemented by the cygwin runtume.  You can check this in the man pages that come with Cygwin.  A list of system calls and std lib calls implementd by Cygwin can be found &lt;a href=&quot;http://cygwin.com/cygwin-api/compatibility.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;On 3:&lt;/strong&gt; Yes. Pthread is included in Cygwin.  The list referred to in the &lt;a href=&quot;http://cygwin.com/cygwin-api/compatibility.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;link above&lt;/a&gt; mentions pthreads as well.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;On 4:&lt;/strong&gt; Anything built against GNU libraries should work with little or no change between Cygwin and Linux (assuming there are no dependencies missing on Cygwin).  Depending on CPU architecture you may have to worry about &lt;a href=&quot;http://en.wikipedia.org/wiki/Data_structure_alignment&quot; rel=&quot;nofollow noreferrer&quot;&gt;word alignment&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Endianness&quot; rel=&quot;nofollow noreferrer&quot;&gt;endianness&lt;/a&gt; and other architecture-specific porting issues, but if you&#x27;re targeting Windows and Linux on Intel your code would have few if any porting issues arising from CPU architecture.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;On 5:&lt;/strong&gt; Cygwin will build a program against its own shared libraries by default but GCC can cross-compile to target other platforms.   You could (in theory) set GCC up to cross-compile to any target supported by the compiler.  There are &lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=gcc+cross+compiling&quot; rel=&quot;nofollow noreferrer&quot;&gt;plenty of resources on the web&lt;/a&gt; about cross-compiling with GCC, and I don&#x27;t think the process will be materially different on Cygwin.&lt;/p&gt;&lt;p&gt;Note that Cygwin binaries will not run on Linux - or Vice-versa.  You will still need separate builds for both.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;On 6:&lt;/strong&gt; Not sure - at a guess it&#x27;s included in the standard runtime, perhaps because it was necessary to wrap the Win32 threading API for some reason.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;On 7:&lt;/strong&gt; &lt;strike&gt;Don&#x27;t know - it&#x27;s probably the same on g++ on all platforms.&lt;/strike&gt;  Apparently a compiler bug.  &lt;a href=&quot;https://stackoverflow.com/questions/2087435/cygwin-socket-thread-other-programming-issues-some-question-to-cygwin/2120744#2120744&quot;&gt;Dan Moulding&#x27;s Answer&lt;/a&gt; covers this in more detail.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;On 8:&lt;/strong&gt; Yes.  IIRC &lt;a href=&quot;http://cygwin.com/packages/qt4/&quot; rel=&quot;nofollow noreferrer&quot;&gt;QT is available in the standard builds&lt;/a&gt; and it will certainly compile on Cygwin.  As with Linux/Unix, QT on Cygwin uses an X11 backend so you will need to have an X server such as &lt;a href=&quot;http://www.straightrunning.com/XmingNotes/&quot; rel=&quot;nofollow noreferrer&quot;&gt;XMing&lt;/a&gt; running.  &lt;/p&gt;&lt;p&gt;In order to avoid the dependency on an X server you may want to &lt;a href=&quot;http://doc.calitko.org/installing_mingw_qt.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;build QT apps against the Win32 API,&lt;/a&gt;.  It is possible to do this with &lt;a href=&quot;http://www.mingw.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;MinGW&lt;/a&gt;, which is a set of header files and libraries to build native Win32 apps with GCC.  MinGW can be used from within a Cygwin environment (an example of GCC on Cygwin cross-compiling to a non-Cygwin target) and the &lt;a href=&quot;http://www.cygwin.com/setup.exe&quot; rel=&quot;nofollow noreferrer&quot;&gt;installer&lt;/a&gt; from &lt;a href=&quot;http://www.cygwin.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;cygwin.com&lt;/a&gt; gives you the option of installing it.  &lt;/p&gt;&lt;p&gt;MinGW is quite mature; it has all of the &#x27;usual suspects&#x27; - libraries and header files you would expect to find on a Unix/Linux GCC development environment and is very stable.  Itis often the tool of choice for building Win32 ports of open-source software because it is (a) free, (b) supports the libraries used by the software and (c) uses GCC so it is not affected by dialectic variations between MSVC and GCC.  &lt;/p&gt;&lt;p&gt;However, these dialectic variations in the language and available libraries (for example MSVC doesn&#x27;t come with an implementation of &lt;code&gt;getopt&lt;/code&gt;) mean that porting programs between MinGW and MSVC can be quite fiddly.  My experience - admittedly not terribly extensive as I&#x27;ve only done this a few times - is that porting applications between MinGW32 and Linux is easier than porting between MinGW and MSVC.  Obviously apps with non-portable dependencies such as Win32 specific API usage would require the dependent components to be re-written for the new platform but you&#x27;ll have far fewer problems with differences in the standard libs, header files and language dialect.&lt;/p&gt;&lt;p&gt;QT does a fairly good job of providing a platform abstraction layer.  It provides APIs for database access, threading, I/O and many other services as well as the GUI.  Using the QT APIs where possible should help with portability and the Unix/Linux flavoured libraries that come with MinGW mean that it might give you a good platform for making applications that will port between Win32 and Linux with relatively little platform dependent code.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; The qt development packages in Cygwin are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;qt4: Qt application framework (source)&lt;/li&gt;&lt;li&gt;qt4-devel-tools: Qt4 Assistant, Designer, and Linguist&lt;/li&gt;&lt;li&gt;qt4-doc: Qt4 API documentation&lt;/li&gt;&lt;li&gt;qt4-qtconfig: Qt4 desktop configuration app&lt;/li&gt;&lt;li&gt;qt4-qtdemo: Qt4 demos and examples&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You&#x27;ll probably also need gcc4-g++ and some other bits and pieces.  &lt;a href=&quot;http://www.cygwin.com/packages/&quot; rel=&quot;nofollow noreferrer&quot;&gt;This listing on the cygwin web site&lt;/a&gt; has a list of the packages.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;&lt;strong&gt;1-4:&lt;/strong&gt; The answers to these are all &quot;yes&quot;, because all of these features you are asking about are part of the POSIX standard. Cygwin is basically a POSIX layer for Windows so, naturally, Cygwin includes all of these features.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5:&lt;/strong&gt; No, Cygwin binaries will not execute under the Linux kernel, because ultimately the code generated by Cygwin is Windows native code. It will link with the usual Windows DLLs (like kernel32.dll), whereas Linux does not even have a notion of DLLs (it has shared objects which are similar, but different). More importantly, executables built under Cygwin will be in the PE format, but Linux generally uses the ELF format for executables. You could, of course, do cross-compiling under Cygwin, and thereby generate native Linux executables, but it doesn&#x27;t sound like this is what you are looking for. Also, compiling a new version of GCC to use as a cross-compiler under Cygwin is probably no trivial task.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6:&lt;/strong&gt; GCC under Cygwin doesn&#x27;t require use of &lt;code&gt;-lpthread&lt;/code&gt; because all of the pthread code under Cygwin is in cygwin1.dll which is always linked in by default.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;7:&lt;/strong&gt; &lt;a href=&quot;https://stackoverflow.com/questions/1882689/why-does-gcc-allow-use-of-round-in-c-even-with-the-ansi-and-pedantic-flags&quot;&gt;This is a bug in GCC&lt;/a&gt; (on all platforms). It has been around for a &lt;em&gt;long&lt;/em&gt; time and will probably never be fixed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;8:&lt;/strong&gt; ConcernedOfTunbridgeWells did a great job of explaining this, so there&#x27;s not much left for me to say. However, it&#x27;s worth noting that Cygwin has the X.org X Window System in its package list. With Cygwin 1.7.x, setting it up and using it is a &lt;em&gt;breeze&lt;/em&gt; and it seems pretty rock-solid. If you want to use Qt with X, I&#x27;d recommend using Cygwin&#x27;s X server.&lt;/p&gt;</Body>
</answer>
</qroot>
