<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>QTimer won&#x27;t advance screen</Title>
<Body>&lt;p&gt;I create my scene in my dialog.cpp and draw some QGraphicsItem&#x27;s in my scene.cpp. When I add my QTimer to my dialog.cpp it makes whenever I move the cursor over the scene to crash. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;dialog.cpp&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &quot;dialog.h&quot;#include &quot;scene.h&quot;#include &quot;ui_dialog.h&quot;#include &quot;instructions.h&quot;#include &quot;settings.h&quot;#include &quot;highscore.h&quot;Dialog::Dialog(QWidget *parent) :    QDialog(parent),    ui(new Ui::Dialog){    ui-&amp;gt;setupUi(this);    // Create and configure scene     scene = new Scene;     scene-&amp;gt;setBackgroundBrush(Qt::black);     scene-&amp;gt;setItemIndexMethod(QGraphicsScene::NoIndex);     ui-&amp;gt;graphicsView-&amp;gt;setScene(scene);     scene-&amp;gt;setSceneRect(-200, -150, 400, 300);     ui-&amp;gt;graphicsView-&amp;gt;setMouseTracking(true);     QPixmap tankbase1(&quot;:/images/tankbase.jpg&quot;);     ui-&amp;gt;tankbaseplay1-&amp;gt;setPixmap(tankbase1);//\/\/\/This is my problem. And not sure why\/\/\/\/\/\///     timer = new QTimer(this);//     QObject::connect(timer, SIGNAL(timeout()), scene, SLOT(advance()));//     timer-&amp;gt;start(10);}Dialog::~Dialog(){    delete ui;}//void Dialog::shoot()//{//}void Dialog::on_startButton_clicked(){    ui-&amp;gt;settingsButton-&amp;gt;hide();    ui-&amp;gt;titlescreen-&amp;gt;hide();    ui-&amp;gt;highscoreButton-&amp;gt;hide();    ui-&amp;gt;instructionButton-&amp;gt;hide();    ui-&amp;gt;startButton-&amp;gt;hide();    QGraphicsTextItem *FirstP;    QString P1 = &quot;Player1&quot;;    FirstP = scene-&amp;gt;addText(P1);    FirstP-&amp;gt;setFont(QFont(&quot;Nimbus Mono L&quot;, 12,QFont::Bold));    FirstP-&amp;gt;setDefaultTextColor(Qt::white);    FirstP-&amp;gt;setPos(-300, -220);    QGraphicsTextItem *SecondP;    QString P2 = &quot;Player2&quot;;    SecondP = scene-&amp;gt;addText(P2);    SecondP-&amp;gt;setFont(QFont(&quot;Nimbus Mono L&quot;, 12,QFont::Bold));    SecondP-&amp;gt;setDefaultTextColor(Qt::white);    SecondP-&amp;gt;setPos(230, -220);}void Dialog::on_instructionButton_clicked(){    Instructions intDialog;    intDialog.setModal(true);    intDialog.exec();}void Dialog::on_settingsButton_clicked(){    settings intDialog;    intDialog.setModal(true);    intDialog.exec();}void Dialog::on_highscoreButton_clicked(){    highscore intDialog;    intDialog.setModal(true);    intDialog.exec();}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;scene.cpp&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &quot;scene.h&quot;#include &amp;lt;QGraphicsEllipseItem&amp;gt;#include &amp;lt;QGraphicsLineItem&amp;gt;#include &amp;lt;QGraphicsSceneMouseEvent&amp;gt;#include &amp;lt;QTimer&amp;gt;#include &quot;qmath.h&quot;#include &amp;lt;math.h&amp;gt;class GraphicsCircle : public QGraphicsEllipseItem// class for the fire bullets{public:    GraphicsCircle(qreal dirx, qreal diry)        : m_Speed(3)        , m_DirX(dirx)        , m_DirY(diry)    {        setRect(-3.0,-3.0,8.0,8.0);        setPos(-195, 130);        QRadialGradient rGrad( 0.0, 0.0, 20.0, 0.0, 0.0);        rGrad.setColorAt(0.0, QColor(255,255,255));        rGrad.setColorAt(0.7, QColor(255,255,225));        rGrad.setColorAt(1.0, QColor(255,0,0,0));        setBrush(QBrush(rGrad) );        setPen(QPen(Qt::NoPen));    }    virtual ~GraphicsCircle() {}    void advance(int phase)    {        if(!phase) return;        setPos(x()+m_Speed*m_DirX, y()+m_Speed*m_DirY);    }private:    qreal m_Speed;    qreal m_DirX;    qreal m_DirY;};Scene::Scene() : QGraphicsScene(){    // added the lines below to setup an item, pointing in the positive x direction    int x1 = 0;    int y1 = 0;    cannon = new QGraphicsLineItem(x1, y1, x1 + 50, y1);    cannon-&amp;gt;setPen(QPen(Qt::white, 6));    this-&amp;gt;addItem(cannon);    cannon-&amp;gt;setPos(-195, 130);    //Create bullets    m_FireTimer= new QTimer();    QObject::connect(m_FireTimer, SIGNAL(timeout()), this, SLOT(fire()));}void Scene::mousePressEvent(QGraphicsSceneMouseEvent *e){    m_FireTarget = e-&amp;gt;scenePos();    m_FireTimer-&amp;gt;start();    QGraphicsScene::mousePressEvent(e);}void Scene::mouseMoveEvent(QGraphicsSceneMouseEvent *e){//    emit mouseMoving(e-&amp;gt;scenePos());//    FirstPlayer-&amp;gt;setPos(e-&amp;gt;scenePos());//    qAtan2(cannon-&amp;gt;pos(), e-&amp;gt;scenePos());    m_FireTarget = e-&amp;gt;scenePos();    QGraphicsScene::mouseMoveEvent(e);    QLineF arm(cannon-&amp;gt;pos(), e-&amp;gt;scenePos());    cannon-&amp;gt;setRotation(360 - arm.angle());}void Scene::mouseReleaseEvent ( QGraphicsSceneMouseEvent * e ){    m_FireTimer-&amp;gt;stop();    QGraphicsScene::mouseReleaseEvent(e);}void Scene::fire()// creates a fire bullet// the bullet will move in the direction of the mouse cursor// the trajectory is sligthly perturbated by a random small angle{    qreal dirx = m_FireTarget.x()-195;    qreal diry = m_FireTarget.y()-195;    qreal length = sqrt(dirx*dirx+diry*diry);    if (length!=0)    {        // normalized direction vector        qreal invLength= 1.0/length;        dirx *= invLength;        diry *= invLength;        // creating an angle perturbation of +/- 3Â°        qreal alphaPerturbation = static_cast&amp;lt;qreal&amp;gt;(qrand()%6-3) * M_PI / 180.0;        qreal xPerturbation = cos(alphaPerturbation);        qreal yPerturbation = sin(alphaPerturbation);        dirx = dirx*xPerturbation - diry*yPerturbation;                    diry = diry*xPerturbation + dirx*yPerturbation;        GraphicsCircle * circle = new GraphicsCircle(dirx, diry);        addItem(circle);    }}void Scene::advance(){   // first remove the pellet out of the sceneRect    for (int i=0; i&amp;lt;items().count(); ++i)    {        QGraphicsItem * item = items().at(i);        qreal x= item-&amp;gt;x();        qreal y= item-&amp;gt;y();        qreal sx=sceneRect().width();        qreal sy= sceneRect().height();        if ( (x &amp;lt; 0.0) || (y &amp;lt; 0.0) || (x &amp;gt; sx) || (y &amp;gt; sy))        {            removeItem(item);            delete item;        }    }    QGraphicsScene::advance();}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When I run the code without the QTimer code in dialog.cpp it runs and my QGraphicsItems are displayed and move accordingly. When I add the QTimer the QGraphicsItem disappears. Completely lost to what the issue is. &lt;/p&gt;&lt;p&gt;Also I have taken the scene code and ran it separately and it works. The only difference is the scene and QTimer is created in main.cpp. &lt;/p&gt;&lt;p&gt;Help greatly needed!!!!!&lt;/p&gt;</Body>
<Tags>c++,qt,qgraphicsscene,qtimer</Tags>
</question>
<answer>
<Body>&lt;p&gt;You are iterating through a list of items while you are deleting items in the list.  That sounds like trouble.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://qt-project.org/doc/qt-5/qrect.html#intersects&quot; rel=&quot;nofollow&quot;&gt;http://qt-project.org/doc/qt-5/qrect.html#intersects&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://qt-project.org/doc/qt-5/qgraphicsitem.html#boundingRect&quot; rel=&quot;nofollow&quot;&gt;http://qt-project.org/doc/qt-5/qgraphicsitem.html#boundingRect&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://qt-project.org/doc/qt-5/qrectf.html#contains&quot; rel=&quot;nofollow&quot;&gt;http://qt-project.org/doc/qt-5/qrectf.html#contains&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I think this might be a little cleaner in your &lt;code&gt;advance()&lt;/code&gt; function.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;QList &amp;lt;QGraphicsItem *&amp;gt; itemsToRemove;foreach( QGraphicsItem * item, this-&amp;gt;items() ){    if( !this-&amp;gt;sceneRect().intersects(item-&amp;gt;boundingRect()) )    {        // The item is no longer in the scene rect, get ready to delete it        itemsToRemove.append(item);    }}foreach( QGraphicsItem * item, itemsToRemove ){    this-&amp;gt;removeItem(item);    delete(item);}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also reading the description of QGraphicsScene,&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://qt-project.org/doc/qt-5/qgraphicsscene.html#details&quot; rel=&quot;nofollow&quot;&gt;http://qt-project.org/doc/qt-5/qgraphicsscene.html#details&lt;/a&gt;&lt;/p&gt;&lt;p&gt;there a number of com.stackoverflow.helper methods that can make finding items in an area or one item colliding with another, much easier.&lt;/p&gt;&lt;p&gt;Hope that helps.&lt;/p&gt;</Body>
</answer>
</qroot>
