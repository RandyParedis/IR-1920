<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Constructor not called c++</Title>
<Body>&lt;p&gt;I have this code in a DLL:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Game::Game(int width, int height)   : world(width, height),     renderer(&quot;Game&quot;, 800, 600),     font(),     text(),     keyboard(){    // Code}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;keyboard&lt;/code&gt; is a pointer to a Keyboard object.  The code inside the constructor is called, but the keyboard object remains null.  Why is the object not being created?  &lt;/p&gt;&lt;p&gt;The keyboard constructor:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Keyboard() { A = new Key(&#x27;a&#x27;); B = new Key(&#x27;b&#x27;); C = new Key(&#x27;c&#x27;); D = new Key(&#x27;d&#x27;); E = new Key(&#x27;e&#x27;); F = new Key(&#x27;f&#x27;); G = new Key(&#x27;g&#x27;); H = new Key(&#x27;h&#x27;); I = new Key(&#x27;i&#x27;); J = new Key(&#x27;j&#x27;); K = new Key(&#x27;k&#x27;); L = new Key(&#x27;l&#x27;); M = new Key(&#x27;m&#x27;); N = new Key(&#x27;n&#x27;); O = new Key(&#x27;o&#x27;); P = new Key(&#x27;p&#x27;); Q = new Key(&#x27;q&#x27;); R = new Key(&#x27;r&#x27;); S = new Key(&#x27;s&#x27;); T = new Key(&#x27;t&#x27;); U = new Key(&#x27;u&#x27;); V = new Key(&#x27;v&#x27;); W = new Key(&#x27;w&#x27;); X = new Key(&#x27;x&#x27;); Y = new Key(&#x27;y&#x27;); Z = new Key(&#x27;z&#x27;); ZERO = new Key(&#x27;0&#x27;); ONE = new Key(&#x27;1&#x27;); TWO = new Key(&#x27;2&#x27;); THREE = new Key(&#x27;3&#x27;); FOUR = new Key(&#x27;4&#x27;); FIVE = new Key(&#x27;5&#x27;); SIX = new Key(&#x27;6&#x27;); SEVEN = new Key(&#x27;7&#x27;); EIGHT = new Key(&#x27;8&#x27;); NINE = new Key(&#x27;9&#x27;); ARROW_UP = new Key(&#x27; &#x27;); ARROW_DOWN = new Key(&#x27; &#x27;); ARROW_LEFT = new Key(&#x27; &#x27;); ARROW_RIGHT = new Key(&#x27; &#x27;); SHIFT = new Key(&#x27; &#x27;);}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;How do I cause the keyboard constructor to be called?&lt;/p&gt;</Body>
<Tags>c++</Tags>
</question>
<answer>
<Body>&lt;p&gt;if &lt;code&gt;keyboard&lt;/code&gt; is a pointer the syntax should be&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Game::Game(int width, int height)  : world(width, height),    renderer(&quot;Game&quot;, 800, 600),    keyboard(new Keyboard){ ... }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same also should be done for &lt;code&gt;text&lt;/code&gt;/&lt;code&gt;font&lt;/code&gt; if they&#x27;re also pointers.&lt;/p&gt;&lt;p&gt;I don&#x27;t want to offend you, but this is a quite basic question about how pointers/instances work in C++. If you&#x27;re learning C++ by writing and trying code before reading about the language then please consider investing some time on reading first instead.&lt;/p&gt;&lt;p&gt;The reason is that C++ is an horrible language to learn by experimentation for two main reasons:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Not everything is logical. Much of C++ rules are a consequence of the evolution of the language and of committee decisions. The most obvious answer to a problem is often NOT the correct one in C++. The only way to know the language is to read about it.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The language main philosophy is that programmers never make mistakes. In other languages when you make a mistake a &quot;runtime error angel&quot; stops the program and tells you what went wrong. In C++ instead when you make a mistake an &quot;undefined behavior daemon&quot; takes the legal ownership of the code and will try hard to cause you the most possible damage, for example by making the program running anyway silently and nicely for a while until you decide to show it to someone, and only crashing it at that point.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The mix 1 + 2 is very dangerous: the language is complex and you will not be told about mistakes. Do yourself a favor instead and read first &lt;a href=&quot;https://stackoverflow.com/q/388242/320726&quot;&gt;a good C++ book&lt;/a&gt; cover to cover.&lt;/p&gt;</Body>
</answer>
</qroot>
