<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How to use the C socket API in C++ on z/OS</Title>
<Body>&lt;p&gt;I&#x27;m having issues getting the C sockets API to work properly in C++ on &lt;code&gt;z/OS&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Although I am including &lt;code&gt;sys/socket.h&lt;/code&gt;, I still get compile time errors telling me that &lt;code&gt;AF_INET&lt;/code&gt; is not defined.&lt;/p&gt;&lt;p&gt;Am I missing something obvious, or is this related to the fact that being on &lt;code&gt;z/OS&lt;/code&gt; makes my problems much more complicated?&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Upon further investigation, I discovered that there is an &lt;code&gt;#ifdef&lt;/code&gt; that I&#x27;m hitting. Apparently &lt;code&gt;z/OS&lt;/code&gt; isn&#x27;t happy unless I define which &quot;type&quot; of sockets I&#x27;m using with:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#define _OE_SOCKETS&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, I personally have no idea what this &lt;code&gt;_OE_SOCKETS&lt;/code&gt; is actually for, so if any &lt;code&gt;z/OS&lt;/code&gt; sockets programmers are out there (all 3 of you), perhaps you could give me a rundown of how this all works?&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Test App&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;sys/socket.h&amp;gt;int main(){    return AF_INET;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Compile/Link Output:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cxx -Wc,xplink -Wl,xplink -o inet_test inet.C&quot;./inet.C&quot;, line 5.16: CCN5274 (S) The name lookup for &quot;AF_INET&quot; did not find a declaration.CCN0797(I) Compilation failed for file ./inet.C. Object file not created.&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&lt;p&gt;A check of sys/sockets.h does include the definition I need, and as far as I can tell, it is not being blocked by any #ifdef statements.&lt;/p&gt;&lt;p&gt;I have however noticed it contains the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#ifdef __cplusplus  extern &quot;C&quot; {#endif&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which encapsulates basically the whole file. Not sure if it matters.&lt;/p&gt;</Body>
<Tags>c++,c,sockets,mainframe,zos</Tags>
</question>
<answer>
<Body>&lt;p&gt;I&#x27;ve had no trouble using the BSD sockets API in C++, in GNU/Linux. Here&#x27;s the sample program I used:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;sys/socket.h&amp;gt;intmain(){    return AF_INET;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So my take on this is that z/OS is probably the complicating factor here, however, because I&#x27;ve never used z/OS before, much less programmed in it, I can&#x27;t say this definitively. :-P&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;@Jax: The &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; thing matters, very very much. If a header file doesn&#x27;t have one, then (unless it&#x27;s a C++-only header file), you would have to enclose your &lt;code&gt;#include&lt;/code&gt; with it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;extern &quot;C&quot; {#include &amp;lt;sys/socket.h&amp;gt;// include other similarly non-compliant header files}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Basically, anytime where a C++ program wants to link to C-based facilities, the &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; is vital. In practical terms, it means that the names used in external references will not be mangled, like normal C++ names would. &lt;a href=&quot;http://www.parashift.com/c++-faq-lite/mixing-c-and-cpp.html&quot; rel=&quot;noreferrer&quot;&gt;Reference.&lt;/a&gt;&lt;/p&gt;</Body>
</answer>
</qroot>
