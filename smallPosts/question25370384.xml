<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>texture(...) function always returns 0</Title>
<Body>&lt;p&gt;I have been trying to get shadow mapping to work for quite some time now and I am still no closer than I was a month ago. I am beginning to think it may be an issue with my GL drivers because I haven&#x27;t been able to see any side effects such as &quot;light acne.&quot; &lt;/p&gt;&lt;p&gt;I was told to start using a &lt;code&gt;sampler2DShadow&lt;/code&gt; instead of a &lt;code&gt;sampler2D&lt;/code&gt; and this is what I did. However, whenever I sample the map using &lt;code&gt;texture(...)&lt;/code&gt; the result is always 0. Why would this be happening?&lt;/p&gt;&lt;p&gt;I have tried entering manual depthCoord values and I still get 0. Could this be a result of the shadowMap itself (i.e the way it has been setup?) or is it a driver issue?&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Framebuffer Setup&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;FramebufferName = 0;glGenFramebuffers(1, &amp;amp;FramebufferName);glBindFramebuffer(GL_FRAMEBUFFER, FramebufferName);glGenTextures(1, &amp;amp;depthTexture);glBindTexture(GL_TEXTURE_2D, depthTexture);glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST );glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST );glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE );glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE );glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_FUNC, GL_LEQUAL);glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_MODE, GL_COMPARE_REF_TO_TEXTURE);glTexImage2D(GL_TEXTURE_2D, 0,GL_DEPTH_COMPONENT, 512, 512, 0, GL_DEPTH_COMPONENT, GL_FLOAT, 0);glFramebufferTexture(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, depthTexture, 0);glDrawBuffer(GL_NONE);glReadBuffer(GL_NONE);glBindFramebuffer(GL_FRAMEBUFFER, 0);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fragment Shader&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;uniform sampler2DShadow shadowMap;in vec4 depthCoord;void main(){    //The final color after lighting is stored as &#x27;FinalColor&#x27;    float visibility = 1.0;    if (texture(shadowMap, depthCoord.xyz) == 0.0){        visibility = 0.1;    }    color = vec4(finalColor.rgb * visibility, 1.0);}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Rendering Code&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    glm::vec3 lightInvDir = glm::vec3(0,-10,-10);    glm::mat4 depthProjectionMatrix = glm::ortho&amp;lt;float&amp;gt;(-10,10,-10,10,-10,20);    glm::mat4 depthViewMatrix = glm::lookAt(lightInvDir, glm::vec3(0,0,0), glm::vec3(0,1,0));    glm::mat4 depthModelMatrix = glm::mat4(1.0);    glm::mat4 depthMVP = depthProjectionMatrix * depthViewMatrix * depthModelMatrix;    glm::mat4 biasMatrix(                0.5, 0.0, 0.0, 0.0,                0.0, 0.5, 0.0, 0.0,                0.0, 0.0, 0.5, 0.0,                0.5, 0.5, 0.5, 1.0    );    glm::mat4 depthBiasMVP = biasMatrix*depthMVP;    /*  Shadow */    subShader-&amp;gt;useShader();    glViewport(0,0,512,512);    glUniformMatrix4fv(glGetUniformLocation(subShader-&amp;gt;getShader(),&quot;depthMVP&quot;), 1, GL_FALSE, &amp;amp;depthMVP[0][0]);    glBindFramebuffer(GL_FRAMEBUFFER, Shadows::framebuffer());    renderBuffer(objBuffer);    glBindFramebuffer(GL_FRAMEBUFFER, 0);    /* Clear */    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);    /* Shader */    objShader-&amp;gt;useShader();    glActiveTexture(GL_TEXTURE0);    glBindTexture(GL_TEXTURE_2D, Shadows::shadowmap());    glUniform1f(glGetUniformLocation(objShader-&amp;gt;getShader(),&quot;shadowMap&quot;),0);    /* Render Scene */    glUniformMatrix4fv(glGetUniformLocation(objShader-&amp;gt;getShader(),&quot;depthBiasMVP&quot;), 1, GL_FALSE, &amp;amp;depthBiasMVP[0][0]);    glViewport(0,0,640,480);    glUniform1f(glGetUniformLocation(objShader-&amp;gt;getShader(),&quot;renderingPass&quot;),1.0);    renderBuffer(objBuffer);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The majority of this code has been learned from sites such as (&lt;a href=&quot;http://www.opengl-tutorial.org/&quot; rel=&quot;nofollow&quot;&gt;http://www.opengl-tutorial.org/&lt;/a&gt;) with modifications based on (&lt;a href=&quot;http://www.fabiensanglard.net/shadowmapping/index.php&quot; rel=&quot;nofollow&quot;&gt;http://www.fabiensanglard.net/shadowmapping/index.php&lt;/a&gt;) and the red book. &lt;/p&gt;</Body>
<Tags>c++,opengl,glsl,shader,opengl-3</Tags>
</question>
</qroot>
