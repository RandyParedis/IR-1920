<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>c++11: Templated wrapper function</Title>
<Body>&lt;p&gt;I try to create a general wrapper function which takes any function as argument and also their parameters. Just something like the &lt;code&gt;std::thread&lt;/code&gt; constructor.&lt;/p&gt;&lt;p&gt;My current code is:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;using namespace std;template&amp;lt;typename FUNCTION, typename... ARGS&amp;gt;void wrapper(FUNCTION&amp;amp;&amp;amp; func, ARGS&amp;amp;&amp;amp;... args){    cout &amp;lt;&amp;lt; &quot;WRAPPER: BEFORE&quot; &amp;lt;&amp;lt; endl;    auto res = func(args...);    cout &amp;lt;&amp;lt; &quot;WRAPPER: AFTER&quot; &amp;lt;&amp;lt; endl;    //return res;}int dummy(int a, int b){    cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &#x27;+&#x27; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &#x27;=&#x27; &amp;lt;&amp;lt; (a + b) &amp;lt;&amp;lt; endl;    return a + b;}int main(void){    dummy(3, 4);    wrapper(dummy, 3, 4);}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The wrapper function itself works. It calls the given function object (&lt;code&gt;std::function&lt;/code&gt;, functor or just a &quot;normal&quot; function) with the given arguments. But i also like to return its return value.&lt;/p&gt;&lt;p&gt;This should work with the removed &lt;code&gt;return&lt;/code&gt;-statement, but unfortunately i dont know how to declare the wrapper functions return type.&lt;/p&gt;&lt;p&gt;I tried many things (e.g. with &lt;code&gt;decltype&lt;/code&gt;), but nothing worked. My question is now, how i get the following code running?&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;template&amp;lt;typename FUNCTION, typename... ARGS&amp;gt;??? wrapper(FUNCTION&amp;amp;&amp;amp; func, ARGS&amp;amp;&amp;amp;... args){    cout &amp;lt;&amp;lt; &quot;WRAPPER: BEFORE&quot; &amp;lt;&amp;lt; endl;    auto res = func(args...);    cout &amp;lt;&amp;lt; &quot;WRAPPER: AFTER&quot; &amp;lt;&amp;lt; endl;    return res;}int dummy(int a, int b){    cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &#x27;+&#x27; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &#x27;=&#x27; &amp;lt;&amp;lt; (a + b) &amp;lt;&amp;lt; endl;    return a + b;}int main(void){    dummy(3, 4);    cout &amp;lt;&amp;lt; &quot;WRAPPERS RES IS: &quot; &amp;lt;&amp;lt; wrapper(dummy, 3, 4) &amp;lt;&amp;lt; endl;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I think the code should work, except for the &lt;code&gt;???&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Thank you for any ideas&lt;/p&gt;&lt;p&gt;RegardsKevin&lt;/p&gt;</Body>
<Tags>c++,templates,c++11,wrapper,functor</Tags>
</question>
<answer>
<Body>&lt;p&gt;Use &lt;a href=&quot;http://en.cppreference.com/w/cpp/types/result_of&quot;&gt;&lt;code&gt;std::result_of&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;template &amp;lt;typename F, typename ...Args&amp;gt;typename std::result_of&amp;lt;F &amp;amp;&amp;amp;(Args &amp;amp;&amp;amp;...)&amp;gt;::type wrapper(F &amp;amp;&amp;amp; f, Args &amp;amp;&amp;amp;... args){    return std::forward&amp;lt;F&amp;gt;(f)(std::forward&amp;lt;Args&amp;gt;(args)...);}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In C++14 you can use the &lt;code&gt;result_of_t&lt;/code&gt; alias:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;template &amp;lt;typename F, typename ...Args&amp;gt;std::result_of_t&amp;lt;F &amp;amp;&amp;amp;(Args &amp;amp;&amp;amp;...)&amp;gt; wrapper(F &amp;amp;&amp;amp; f, Args &amp;amp;&amp;amp;... args){    return std::forward&amp;lt;F&amp;gt;(f)(std::forward&amp;lt;Args&amp;gt;(args)...);}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or you can use return type deduction:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;template &amp;lt;typename F, typename ...Args&amp;gt;decltype(auto) wrapper(F &amp;amp;&amp;amp; f, Args &amp;amp;&amp;amp;... args){    std::cout &amp;lt;&amp;lt; &quot;before\n&quot;;    auto &amp;amp;&amp;amp; res = std::forward&amp;lt;F&amp;gt;(f)(std::forward&amp;lt;Args&amp;gt;(args)...);    std::cout &amp;lt;&amp;lt; &quot;after\n&quot;;    return res;}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;You can use &lt;code&gt;decltype&lt;/code&gt; with the C++11 auto trailing return type :&lt;/p&gt;&lt;pre&gt;&lt;code&gt;template&amp;lt;typename FUNCTION, typename... ARGS&amp;gt;auto wrapper(FUNCTION&amp;amp;&amp;amp; func, ARGS&amp;amp;&amp;amp;... args) -&amp;gt; decltype(func(std::forward&amp;lt;ARGS&amp;gt;(args)...))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://coliru.stacked-crooked.com/a/de9cc92d8d305070&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;Live demo&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;And in &lt;strong&gt;C++14&lt;/strong&gt;, simply do :&lt;/p&gt;&lt;pre&gt;&lt;code&gt;template&amp;lt;typename FUNCTION, typename... ARGS&amp;gt;decltype(auto) wrapper(FUNCTION&amp;amp;&amp;amp; func, ARGS&amp;amp;&amp;amp;... args)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://coliru.stacked-crooked.com/a/158fd792b0972671&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;Live demo&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</Body>
</answer>
</qroot>
