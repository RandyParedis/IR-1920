<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Django ORM Model Property VS Select Extra Which is better</Title>
<Body>&lt;p&gt;I am calculating &lt;code&gt;size&lt;/code&gt; of the item by multiplying two fields.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Size = order_size_weight x requested_selling_price&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I have two approches to do that. &lt;/p&gt;&lt;h2&gt;1. Model Property&lt;/h2&gt;&lt;p&gt;&lt;code&gt;return float(self.order_size_weight) * float(self.requested_selling_price)&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;2. Modify QuerySet&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;return self.extra(                select={&quot;priority&quot;: &quot;COALESCE(bm_rank, sales_rank, id)&quot;,        &quot;size&quot;: &quot;order_size_weight*requested_selling_price&quot;,  # for oder_by size.})&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Problem&lt;/h2&gt;&lt;p&gt;When i use the &lt;code&gt;second&lt;/code&gt; approach, i can not use &lt;code&gt;Annotate&lt;/code&gt; to aggregate or take sum of all the Sizes. &lt;/p&gt;&lt;h2&gt;Question&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;What is the best / Fast approach to &lt;code&gt;calculate Size&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Can i use Annotate after using &lt;code&gt;extra select&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;EDIT&lt;/h2&gt;&lt;h2&gt;Solution of 2.&lt;/h2&gt;&lt;p&gt;I am able to solve the second problem by Using &lt;code&gt;select extra&lt;/code&gt; before using annotate will help solve the problem. &lt;/p&gt;</Body>
<Tags>python,django,django-orm</Tags>
</question>
<answer>
<Body>&lt;p&gt;While it should still be possible to do both &lt;code&gt;annotate&lt;/code&gt; and &lt;code&gt;aggregate&lt;/code&gt; for calculated fields, it&#x27;s not recommended in terms of database performance if you also want to sort on it (and don&#x27;t have an index for the calculated result).&lt;/p&gt;&lt;p&gt;For cases like these I would recommend the usage of &lt;a href=&quot;http://initcrash.github.io/django-denorm/&quot; rel=&quot;nofollow&quot; title=&quot;Django Denorm&quot;&gt;enter link description here&lt;/a&gt; (or something similar). You can use a callback function to store the results in the database: &lt;a href=&quot;http://initcrash.github.io/django-denorm/tutorial.html#creating-denormalized-fields-using-callback-functions&quot; rel=&quot;nofollow&quot;&gt;http://initcrash.github.io/django-denorm/tutorial.html#creating-denormalized-fields-using-callback-functions&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class SomeModel(models.Model):    order_size_weight = models.IntegerField()    requested_selling_price = models.IntegerField()    @denormalized(models.IntegerField)    def calculate_size(self):        return float(self.order_size_weight) * float(self.requested_selling_price)&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
