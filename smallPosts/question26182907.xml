<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Range based for-loop on array passed to non-main function</Title>
<Body>&lt;p&gt;When I try to compile the following code in gcc 4.8.2, I get the following error:&lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;&lt;code&gt;test.cc: In function ‘void foo(int*)’:test.cc:15:16: error: no matching function for call to ‘begin(int*&amp;amp;)’   for (int i : bar) {                ^&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;Along with a bunch of others from deeper in the template library. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;using namespace std;void foo(int*);int main() {  int bar[3] = {1,2,3};  for (int i : bar) {    cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;  }  foo(bar);}void foo(int* bar) {  for (int i : bar) {    cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;  }}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If I redefine &lt;code&gt;foo&lt;/code&gt; to use an indexed for loop, then the code compiles and behaves as expected. Also, if I move the range-based output loop into &lt;code&gt;main&lt;/code&gt;, I get the expected behaviour as well. &lt;/p&gt;&lt;p&gt;How do I pass the array &lt;code&gt;bar&lt;/code&gt; to &lt;code&gt;foo&lt;/code&gt; in such a way that it is capable of executing a range-based for-loop on it?&lt;/p&gt;</Body>
<Tags>c++,gcc,c++11,for-loop</Tags>
</question>
<answer>
<Body>&lt;p&gt;With the &lt;a href=&quot;https://stackoverflow.com/q/1461432/1938163&quot;&gt;array decaying&lt;/a&gt; into a pointer you&#x27;re losing one important piece of information: its size.&lt;/p&gt;&lt;p&gt;With an array reference your range based loop works:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;void foo(int (&amp;amp;bar)[3]);int main() {  int bar[3] = {1,2,3};  for (int i : bar) {    cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;  }  foo(bar);}void foo(int (&amp;amp;bar)[3]) {  for (int i : bar) {    cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;  }}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or, in a generic fashion (i.e. without specifying the array size in the function signature),&lt;/p&gt;&lt;pre&gt;&lt;code&gt;template &amp;lt;std::size_t array_size&amp;gt;void foo(int (&amp;amp;bar)[array_size]) {  for (int i : bar) {    cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;  }}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;kbd&gt;&lt;a href=&quot;http://ideone.com/hqC1cK&quot; rel=&quot;noreferrer&quot;&gt;Try it out&lt;/a&gt;&lt;/kbd&gt;&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;For a fixed size array you can&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Pass a raw array by reference.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Pass a &lt;code&gt;std::array&lt;/code&gt; by reference.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Pass a &lt;code&gt;std::vector&lt;/code&gt; by reference.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The natural choice (for a fixed size array) is &lt;code&gt;std::array&lt;/code&gt;, i.e.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;array&amp;gt;using namespace std;void foo(array&amp;lt;int, 3&amp;gt; const&amp;amp; bar) {  for (int i : bar) {    cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;  }}int main() {  array&amp;lt;int,3&amp;gt; const bar = {1,2,3};  for (int i : bar) {    cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;  }  foo(bar);}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
