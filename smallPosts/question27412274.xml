<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Why is getopt_long ignoring some command line options</Title>
<Body>&lt;p&gt;ref: &lt;a href=&quot;https://stackoverflow.com/questions/10797731/getopt-long-doesnt-handle-my-arguments-right&quot;&gt;getopt_long doesnt handle my arguments right&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Win7&lt;/p&gt;&lt;p&gt;cygwin&lt;/p&gt;&lt;p&gt;gcc 4.8.3&lt;/p&gt;&lt;p&gt;Some input command line options are not returned by getopt_long. Before I put the code into production, I am trying to find the behavior of getopt_long. For correctly formed options it seems to work fine. For incorrectly formed options getopt_long sometimes fails to return an incorrect value. &lt;/p&gt;&lt;p&gt;Here is the command line, input, output &amp;amp; code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;COMMAND LINE-s -t -u -v -h --solution --statistics --unique --verbose --statistics=&quot;key, node, part, bins&quot; -t &quot;keys,node,part,bin&quot; -s (max min) --solution=(max,min) -s max /cygdrive/c/home/skidmarks/Projects/MPHASH/old/mphash.files/SYM/ADAWORDS.SYM&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;INPUT&lt;/p&gt;&lt;pre&gt;&lt;code&gt;argv[ 1]-sargv[ 2]-targv[ 3]-uargv[ 4]-vargv[ 5]-hargv[ 6]--solutionargv[ 7]--statisticsargv[ 8]--uniqueargv[ 9]--verboseargv[10]--statistics=key, node, part, binsargv[11]-targv[12]keys,node,part,binargv[13]-sargv[14](maxargv[15]min)argv[16]--solution=(max,min)argv[17]-sargv[18]maxargv[19]/cygdrive/c/home/skidmarks/Projects/MPHASH/old/mphash.files/SYM/ADAWORDS.SYM&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;OUTPUT&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&#x27;s&#x27; 0x73  &#x27;t&#x27; 0x74  &#x27;u&#x27; 0x75  &#x27;v&#x27; 0x76  &#x27;h&#x27; 0x68  &#x27;s&#x27; 0x73  &#x27;t&#x27; 0x74  &#x27;&#x27; 0x00  &#x27;&#x27; 0x00  &#x27;t&#x27; 0x74  key, node, part, bins&#x27;t&#x27; 0x74  &#x27;s&#x27; 0x73  &#x27;s&#x27; 0x73  (max,min)&#x27;s&#x27; 0x73   missing argv[12], argv[14-15], argv[18]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CODE&lt;/p&gt;&lt;pre&gt;&lt;code&gt;bool FrontEnd::getopt(int argc, char** argv) {   int option_index;   int printUniqueFlag = 0;   int optionFlags = 0;   char short_Option[] = &quot;bhs::uvt::\0&quot;;   static struct option long_options[] =    { {&quot;solution&quot;,   optional_argument, 0, &#x27;s&#x27;}               //!&amp;lt; &quot;max&quot;, &quot;min&quot;   , {&quot;statistics&quot;, optional_argument, 0, &#x27;t&#x27;}               //!&amp;lt; (&quot;part&quot;, &quot;node&quot;, &quot;key&quot;, &quot;bins&quot;)   , {&quot;unique&quot;,     no_argument,       &amp;amp;printUniqueFlag, 0x01 }   , {&quot;verbose&quot;,    no_argument,       &amp;amp;optionFlags,     0x7F }   , {0,            0,                 0,  0 }   };   int c;   inputFlag = true;   for(int ndx = 0; ndx &amp;lt; argc; ndx++) {      cout &amp;lt;&amp;lt; &quot;argv[&quot; &amp;lt;&amp;lt; setw(2)&amp;lt;&amp;lt; ndx &amp;lt;&amp;lt; &quot;]&quot; &amp;lt;&amp;lt; argv[ndx] &amp;lt;&amp;lt; endl;   }   while ((c = ::getopt_long(argc, argv, short_Option, long_options, &amp;amp;option_index)) != -1) {      cout &amp;lt;&amp;lt; &#x27;\&#x27;&#x27; &amp;lt;&amp;lt; (char)c &amp;lt;&amp;lt; &quot;\&#x27; 0x&quot; &amp;lt;&amp;lt; setw(2) &amp;lt;&amp;lt; setfill(&#x27;0&#x27;) &amp;lt;&amp;lt; hex &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &quot;  &quot; ;      if (optarg) cout &amp;lt;&amp;lt; optarg;      cout &amp;lt;&amp;lt; endl;   }   return inputFlag;}; // int FrontEnd::getopt(int argc, char** argv)&lt;/code&gt;&lt;/pre&gt;</Body>
<Tags>c,c++11,g++4.8</Tags>
</question>
<answer>
<Body>&lt;p&gt;There are no badly formatted options here. There are just options and positional parameters. getopt doesn&#x27;t return positional parameters, you process them separately. â€“ n.m.&lt;/p&gt;</Body>
</answer>
</qroot>
