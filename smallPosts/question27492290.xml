<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>c++ implicit class member initialization for (POD struct, POD class and POD) members</Title>
<Body>&lt;p&gt;I&#x27;m trying to understand how implicit class member initialization works for member {POD structs, POD classes and POD}s. After reading around a little I expected them to be initialized to their default values but the actual behavior seems to differ here -&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;struct S1{    void* a;    int b;};struct S2{    S2() { std::cout &amp;lt;&amp;lt; &quot;!&quot;; }    void* a;    int b;};struct S3{    S3() : a(), b() { std::cout &amp;lt;&amp;lt; &quot;!&quot;; }    void* a;    int b;};class C1{public:    void* a;    int b;};class C2{public:    C2() { std::cout &amp;lt;&amp;lt; &quot;!&quot;; }    void* a;    int b;};class C3{public:    C3() : a(), b() { std::cout &amp;lt;&amp;lt; &quot;!&quot;; }    void* a;    int b;};template &amp;lt;typename T&amp;gt;class FOO1{public:    T s;    int a;};template &amp;lt;typename T&amp;gt;class FOO2{public:    FOO2() {}    T s;    int a;};template &amp;lt;typename T&amp;gt;class FOO3{public:    FOO3() : s(), a() {}    T s;    int a;};//#define SKIP_S1C1template &amp;lt;typename T&amp;gt;void moo(){#ifndef SKIP_S1C1    T* f = new T();    T foo = *f;    std::cout &amp;lt;&amp;lt; &quot;:\ts = (&quot; &amp;lt;&amp;lt; foo.s.a &amp;lt;&amp;lt; &quot;, &quot; &amp;lt;&amp;lt; foo.s.b &amp;lt;&amp;lt; &quot;)\ta = &quot; &amp;lt;&amp;lt; foo.a &amp;lt;&amp;lt; std::endl;    delete f;#else    T foo;    std::cout &amp;lt;&amp;lt; &quot;:\ts = (&quot; &amp;lt;&amp;lt; foo.s.a &amp;lt;&amp;lt; &quot;, &quot; &amp;lt;&amp;lt; foo.s.b &amp;lt;&amp;lt; &quot;)\ta = &quot; &amp;lt;&amp;lt; foo.a &amp;lt;&amp;lt; std::endl;#endif}int main(){#ifndef SKIP_S1C1    moo&amp;lt;FOO1&amp;lt;S1&amp;gt; &amp;gt;();#endif    moo&amp;lt;FOO1&amp;lt;S2&amp;gt; &amp;gt;();    moo&amp;lt;FOO1&amp;lt;S3&amp;gt; &amp;gt;();#ifndef SKIP_S1C1    moo&amp;lt;FOO1&amp;lt;C1&amp;gt; &amp;gt;();#endif    moo&amp;lt;FOO1&amp;lt;C2&amp;gt; &amp;gt;();    moo&amp;lt;FOO1&amp;lt;C3&amp;gt; &amp;gt;();std::cout &amp;lt;&amp;lt; std::endl;#ifndef SKIP_S1C1    moo&amp;lt;FOO2&amp;lt;S1&amp;gt; &amp;gt;();#endif    moo&amp;lt;FOO2&amp;lt;S2&amp;gt; &amp;gt;();    moo&amp;lt;FOO2&amp;lt;S3&amp;gt; &amp;gt;();#ifndef SKIP_S1C1    moo&amp;lt;FOO2&amp;lt;C1&amp;gt; &amp;gt;();#endif    moo&amp;lt;FOO2&amp;lt;C2&amp;gt; &amp;gt;();    moo&amp;lt;FOO2&amp;lt;C3&amp;gt; &amp;gt;();std::cout &amp;lt;&amp;lt; std::endl;#ifndef SKIP_S1C1    moo&amp;lt;FOO3&amp;lt;S1&amp;gt; &amp;gt;();#endif    moo&amp;lt;FOO3&amp;lt;S2&amp;gt; &amp;gt;();    moo&amp;lt;FOO3&amp;lt;S3&amp;gt; &amp;gt;();#ifndef SKIP_S1C1    moo&amp;lt;FOO3&amp;lt;C1&amp;gt; &amp;gt;();#endif    moo&amp;lt;FOO3&amp;lt;C2&amp;gt; &amp;gt;();    moo&amp;lt;FOO3&amp;lt;C3&amp;gt; &amp;gt;();}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Obvious run results aren&#x27;t enough to say whether the POD were initialized to their default value 0 or just contain noise. But here are some results, anyway:&lt;/p&gt;&lt;p&gt;Building and running it on ubuntu with gcc 4.6.3 &lt;code&gt;#define SKIP_S1C1&lt;/code&gt; uncommented, I get&lt;/p&gt;&lt;pre&gt;&lt;code&gt;!:      s = (0x7ffffe557770, 4196620)   a = 1!:      s = (0, 0)      a = 1!:      s = (0, 0)      a = 1!:      s = (0, 0)      a = 1!:      s = (0x1, 6299744)      a = 6299744!:      s = (0, 0)      a = 6299744!:      s = (0, 0)      a = 6299744!:      s = (0, 0)      a = 6299744!:      s = (0x1, 6299744)      a = 0!:      s = (0, 0)      a = 0!:      s = (0, 0)      a = 0!:      s = (0, 0)      a = 0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and with it commented out, I get&lt;/p&gt;&lt;pre&gt;&lt;code&gt;:       s = (0, 0)      a = 0!:      s = (0, 0)      a = 0!:      s = (0, 0)      a = 0:       s = (0, 0)      a = 0!:      s = (0, 0)      a = 0!:      s = (0, 0)      a = 0:       s = (0, 0)      a = 0!:      s = (0, 0)      a = 0!:      s = (0, 0)      a = 0:       s = (0, 0)      a = 0!:      s = (0, 0)      a = 0!:      s = (0, 0)      a = 0:       s = (0, 0)      a = 0!:      s = (0, 0)      a = 0!:      s = (0, 0)      a = 0:       s = (0, 0)      a = 0!:      s = (0, 0)      a = 0!:      s = (0, 0)      a = 0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and with VS2013, with it commented,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;:       s = (00000000, 0)       a = 0!:      s = (CDCDCDCD, -842150451)      a = -842150451!:      s = (00000000, 0)       a = -842150451:       s = (00000000, 0)       a = 0!:      s = (00000000, 0)       a = 0!:      s = (00000000, 0)       a = 0:       s = (CDCDCDCD, -842150451)      a = -842150451!:      s = (CDCDCDCD, -842150451)      a = -842150451!:      s = (00000000, 0)       a = -842150451:       s = (00000000, 0)       a = 0!:      s = (00000000, 0)       a = 0!:      s = (00000000, 0)       a = 0:       s = (00000000, 0)       a = 0!:      s = (CDCDCDCD, -842150451)      a = 0!:      s = (00000000, 0)       a = 0:       s = (00000000, 0)       a = 0!:      s = (00000000, 0)       a = 0!:      s = (00000000, 0)       a = 0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and uncommented,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;!:      s = (CCCCCCCC, -858993460)      a = -858993460!:      s = (00000000, 0)       a = -858993460!:      s = (00000000, 0)       a = 0!:      s = (00000000, 0)       a = 0!:      s = (CCCCCCCC, -858993460)      a = -858993460!:      s = (00000000, 0)       a = -858993460!:      s = (00000000, 0)       a = 0!:      s = (00000000, 0)       a = 0!:      s = (CCCCCCCC, -858993460)      a = 0!:      s = (00000000, 0)       a = 0!:      s = (00000000, 0)       a = 0!:      s = (00000000, 0)       a = 0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I would really like to understand what should I expect and when it&#x27;s UB when it comes to implicit initialization of {POS struct, POD classes and POD} members. Any help would be greatly appreciated... :)&lt;/p&gt;</Body>
<Tags>c++,constructor</Tags>
</question>
<answer>
<Body>&lt;p&gt;Constructors are complicated, and the details are technical, but here&#x27;s a generic summary*:&lt;/p&gt;&lt;p&gt;There are three ways to initialize:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Zero Initialize - The details are technical, but effectively sets all bits to zero.  This bypasses constructors&lt;/li&gt;&lt;li&gt;Default Initialize - If it has a constructor, the default constructor is called.  Otherwise, no initialization happens.  &lt;strong&gt;Reading from these is the UB you found.&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Value Initialize - If it has a constructor, the default constructor is called.  Otherwise, its bits are all (effectively) set to zero.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And they&#x27;re called in many situations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;static globals - Zero Initialized, and then Value Initialized. (quite wierd)&lt;/li&gt;&lt;li&gt;locals - Default initialized.&lt;/li&gt;&lt;li&gt;&lt;code&gt;new T;&lt;/code&gt; - Default Initialize&lt;/li&gt;&lt;li&gt;&lt;code&gt;new T();&lt;/code&gt; - Value Initialize&lt;/li&gt;&lt;li&gt;member not in init list - Default Initialize&lt;/li&gt;&lt;li&gt;member in init list - Value Initialize.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For more details refer to sections ยง8.5 and ยง12.6 in the C++11 draft. They&#x27;re long and boring.&lt;/p&gt;&lt;p&gt;Also note that the rules for C are surprisingly different technically, though the effects appear the same to me.&lt;/p&gt;&lt;p&gt;*My summary is not technically accurate, but is accurate enough for most real code.  For instance, arrays have special rules technically, but they&#x27;re so intuitive that they&#x27;re not worth mentioning.&lt;/p&gt;&lt;p&gt;**Yes, it&#x27;s &quot;Initialization&quot; is &quot;No Initialization&quot;, which makes other paragraphs about &quot;if it was initialized&quot; ambiguous technically, but apply common sense.  It&#x27;s not initialized.&lt;/p&gt;</Body>
</answer>
</qroot>
