<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Python: append to numpy array</Title>
<Body>&lt;p&gt;In some cases the original numpy array is desired to be overwritten by the concatenated numpy array. I want to discuss an exemplar case of a numpy array inside a complex structured array.This question arose by answering a question about structured arrays &lt;a href=&quot;https://stackoverflow.com/a/27563022/2062965&quot;&gt;https://stackoverflow.com/a/27563022/2062965&lt;/a&gt; .&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import numpy as npx = np.zeros(1, dtype = [(&#x27;Table&#x27;, float64, (2, 2)),                         (&#x27;Number&#x27;, float),                         (&#x27;String&#x27;, &#x27;|S10&#x27;)])# Append values to the arrayprint(np.append(x[&#x27;Table&#x27;], array([[[1], [2]]]), axis=2))# This assignment will lead to the error message mentioned below:x[&#x27;Table&#x27;] = np.append(x[&#x27;Table&#x27;], array([[[1], [2]]]), axis=2)&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Similar questions&lt;/h3&gt;&lt;p&gt;There are several ways around, like &lt;code&gt;numpy.append&lt;/code&gt;, &lt;code&gt;numpy.concatenate&lt;/code&gt;, &lt;code&gt;numpy.vstack&lt;/code&gt; or &lt;code&gt;numpy.hstack&lt;/code&gt;. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/9775297/2062965&quot;&gt;Append a NumPy array to a NumPy array&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/20094664/2062965&quot;&gt;numpy append array to array&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/27185013/2062965&quot;&gt;Numpy append to an empty array&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Each of them creates a new array, which can not be assigned back to the old variable by returning an error message like the following one:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ValueError: could not broadcast input array from shape (1,2,3) into shape (1,2,2)&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Possible approach&lt;/h3&gt;&lt;p&gt;I could, as a straight but time-consuming solution, define a new empty numpy array which I fill with the old data and the ones that should be append.&lt;/p&gt;&lt;p&gt;Thank you also for other solutions.&lt;/p&gt;</Body>
<Tags>arrays,python-2.7,numpy</Tags>
</question>
<answer>
<Body>&lt;p&gt;A &lt;code&gt;numpy&lt;/code&gt; array keeps its data in a fixed size buffer.  Attributes like &lt;code&gt;shape&lt;/code&gt;, &lt;code&gt;strides&lt;/code&gt; and &lt;code&gt;dtype&lt;/code&gt; are used to interpret that data.  Those attributes can be changed, and values within the data buffer can be changed.  But anything that changes the size of the buffer requires a copy.&lt;/p&gt;&lt;p&gt;&lt;code&gt;append&lt;/code&gt;, &lt;code&gt;concatenate&lt;/code&gt;, etc all create a new array, and fill it with data from the original arrays.  &lt;/p&gt;&lt;p&gt;Your &lt;code&gt;append&lt;/code&gt; action creates a new &lt;code&gt;(1,2,3)&lt;/code&gt; array.  It cannot replace the &lt;code&gt;(1,2,2)&lt;/code&gt; string of bytes in the &lt;code&gt;x&lt;/code&gt; buffer.&lt;/p&gt;&lt;p&gt;If &lt;code&gt;(&#x27;Table&#x27;, float64, (2, 2))&lt;/code&gt; was replaced by &lt;code&gt;(&#x27;Table&#x27;, object)&lt;/code&gt;, then &lt;code&gt;x[&#x27;Table&#x27;]&lt;/code&gt; could be changed.  That&#x27;s because &lt;code&gt;x&lt;/code&gt; now contains a pointer to a separate array.  The assignment replaces one pointer with another, without changing the size of the &lt;code&gt;x&lt;/code&gt; buffer.  It&#x27;s like changing the value of a dictionary, or replacing a nest list within a list.  &lt;/p&gt;&lt;p&gt;Why are you trying to use a structured array rather than conventional Python structures like &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt; or a custom class object?  &lt;/p&gt;&lt;p&gt;Here&#x27;s a sequence that works:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;In [116]: x = np.zeros(1, dtype = [(&#x27;Table&#x27;, &#x27;O&#x27;),                         (&#x27;Number&#x27;, np.float),                         (&#x27;String&#x27;, &#x27;|S10&#x27;)])In [117]: x[&#x27;Table&#x27;][0] = np.zeros((2,2),dtype=np.float64)In [118]: x[&#x27;Table&#x27;][0] = np.append(x[&#x27;Table&#x27;][0], np.array([[[1], [2]]]))In [119]: xOut[119]: array([([0.0, 0.0, 0.0, 0.0, 1.0, 2.0], 0.0, &#x27;&#x27;)],       dtype=[(&#x27;Table&#x27;, &#x27;O&#x27;), (&#x27;Number&#x27;, &#x27;&amp;lt;f8&#x27;), (&#x27;String&#x27;, &#x27;S10&#x27;)])&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But notice that I have to assign the new arrays to &lt;code&gt;x[&#x27;Table&#x27;][0]&lt;/code&gt; - a &#x27;row&#x27; within in the &#x27;Table&#x27; field.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;In [120]: x[&#x27;Table&#x27;]Out[120]: array([array([ 0.,  0.,  0.,  0.,  1.,  2.])], dtype=object)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;x[&#x27;Table&#x27;]&lt;/code&gt; is another structured array.&lt;/p&gt;&lt;p&gt;Looking back at your original &lt;code&gt;x&lt;/code&gt; definition, let&#x27;s give it 3 &#x27;rows&#x27; (elements):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;In [132]: x = np.zeros(3, dtype = [(&#x27;Table&#x27;, np.float64, (2, 2)),                         (&#x27;Number&#x27;, np.float),                         (&#x27;String&#x27;, &#x27;|S10&#x27;)])In [133]: xOut[133]: array([([[0.0, 0.0], [0.0, 0.0]], 0.0, &#x27;&#x27;),       ([[0.0, 0.0], [0.0, 0.0]], 0.0, &#x27;&#x27;),       ([[0.0, 0.0], [0.0, 0.0]], 0.0, &#x27;&#x27;)],       dtype=[(&#x27;Table&#x27;, &#x27;&amp;lt;f8&#x27;, (2, 2)), (&#x27;Number&#x27;, &#x27;&amp;lt;f8&#x27;), (&#x27;String&#x27;, &#x27;S10&#x27;)])In [134]: x[&#x27;Table&#x27;].shapeOut[134]: (3, 2, 2)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The data buffer for &lt;code&gt;x&lt;/code&gt; is a sequence of float 0s, interspersed with 10 blanks.  When I ask for &lt;code&gt;x[&#x27;Table&#x27;]&lt;/code&gt; it gives me a non contiguous view of 12 of those 0s, with a &lt;code&gt;(3,2,2)&lt;/code&gt; shape.&lt;/p&gt;&lt;p&gt;I can change elements of that array:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;In [137]: x[&#x27;Table&#x27;][0,0,:]=[1,1]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But I can&#x27;t expand it in anyway - not without making a new &lt;code&gt;x&lt;/code&gt; array.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Another structure like construct is a dictionary:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;In [156]: x={&#x27;Table&#x27;: np.zeros((1,2,2),dtype=np.float64),             &#x27;Number&#x27;:np.zeros((1,)),              &#x27;String&#x27;:[&#x27;&#x27;]}In [157]: xOut[157]: {&#x27;Number&#x27;: array([ 0.]), &#x27;String&#x27;: [&#x27;&#x27;], &#x27;Table&#x27;: array([[[ 0.,  0.],        [ 0.,  0.]]])}In [158]: x[&#x27;Table&#x27;] =np.append(x[&#x27;Table&#x27;],[1,2])In [159]: xOut[159]: {&#x27;Number&#x27;: array([ 0.]), &#x27;String&#x27;: [&#x27;&#x27;], &#x27;Table&#x27;: array([ 0.,  0.,  0.,  0.,  1.,  2.])}&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&lt;p&gt;Complex data structures like this make most sense when read from a CSV file.  For example&lt;/p&gt;&lt;pre&gt;&lt;code&gt;In [161]: dt = np.dtype([(&#x27;Table&#x27;, np.float64, (2, 2)),                         (&#x27;Number&#x27;, np.float),                         (&#x27;String&#x27;, &#x27;|S10&#x27;)])In [162]: txt=&quot;&quot;&quot;0 0 0 0 0 astring   .....: 1 2 3 4 0 another   .....: 1 1 1 1 10 end   .....: &quot;&quot;&quot;In [163]: A=np.genfromtxt(txt.splitlines(),dtype=dt)In [164]: AOut[164]: array([([[0.0, 0.0], [0.0, 0.0]], 0.0, &#x27;astring&#x27;),       ([[1.0, 2.0], [3.0, 4.0]], 0.0, &#x27;another&#x27;),       ([[1.0, 1.0], [1.0, 1.0]], 10.0, &#x27;end&#x27;)],       dtype=[(&#x27;Table&#x27;, &#x27;&amp;lt;f8&#x27;, (2, 2)), (&#x27;Number&#x27;, &#x27;&amp;lt;f8&#x27;), (&#x27;String&#x27;, &#x27;S10&#x27;)])&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;genfromtxt&lt;/code&gt; reads the lines, parses them into a list of lists, and only at end does it pack them into the structured array.&lt;/p&gt;</Body>
</answer>
</qroot>
