<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How do these nested lambda functions work?</Title>
<Body>&lt;p&gt;What does this code do? And what are some of the appropriate n, f, and x?&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def successor(n):    return lambda f: lambda x: f(n(f)(x))&lt;/code&gt;&lt;/pre&gt;</Body>
<Tags>python,function,lambda</Tags>
</question>
<answer>
<Body>&lt;p&gt;So this... is pretty bad code.  You shouldn&#x27;t write it, because as you have found (and the comment section indicates) it is very, very hard to tell what is happening.  Lets break it down.&lt;/p&gt;&lt;p&gt;The original code looks like this&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def successor(n):    return lambda f: lambda x: f(n(f)(x))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The function &lt;code&gt;successor&lt;/code&gt; is returning an &lt;a href=&quot;http://www.diveintopython.net/power_of_introspection/lambda_functions.html&quot; rel=&quot;nofollow&quot;&gt;anonymous function&lt;/a&gt; using lambda.  That is hard to read, so lets replace it with a named function.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def successor(n):    def inner_function_one(f):        return lambda x: f(n(f)(x))    return inner_function_one&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is still pretty hard to read.  Lets replace the other anonymous function with a named function.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def successor(n):    def inner_function_one(f):        def inner_function_two(x):            return f(n(f)(x))        return inner_function_two    return inner_function_one&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So now we&#x27;ve broken apart the function, and we can see that &lt;code&gt;successor&lt;/code&gt; returns a function that in turn returns another function, which returns... that.  The line &lt;code&gt;f(n(f)(x))&lt;/code&gt; is pretty hard to read.  It is saying that a function f is being called with the argument &lt;code&gt;n(f)(x)&lt;/code&gt;, which is a way of saying that &lt;code&gt;n(f)&lt;/code&gt; returns a function that is then being passed the argument &lt;code&gt;x&lt;/code&gt;.  Lets use some more descriptive variable names to see what is happening here.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def successor(first_function):    def inner_function_one(second_function):        def inner_function_two(arg):            return second_function(first_function(second_function)(arg))            # Equivalent to something like            #     return second_function(returned_function(arg))            # where returned_function is the result of             #     first_function(second_function)        return inner_function_two    return inner_function_one&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As for what is specifically happening here?  I have no idea.  You&#x27;d have to ask whoever wrote the code.  However, I&#x27;d guess that this is intended to be a decorator of some kind.  There is a somewhat similar example &lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=240845&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def decoratorFunctionWithArguments(arg1, arg2, arg3):    def wrap(f):        print &quot;Inside wrap()&quot;        def wrapped_f(*args):            print &quot;Inside wrapped_f()&quot;            print &quot;Decorator arguments:&quot;, arg1, arg2, arg3            f(*args)            print &quot;After f(*args)&quot;        return wrapped_f    return wrap&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This allows you to use arguments passed to a decorator to be used inside the actual decorator of the function.  That is calling the following function&lt;/p&gt;&lt;pre&gt;&lt;code&gt;@decoratorFunctionWithArguments(1, 2, 3)def my_function():    print &quot;Inner function&quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;would have an output of&lt;/p&gt;&lt;pre class=&quot;lang-none prettyprint-override&quot;&gt;&lt;code&gt;Inside wrap()Inside wrapped_f()Decorator arguments: 1 2 3Inner functionAfter f(*args)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thus, appropriate values of &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt; are:&lt;/p&gt;&lt;pre class=&quot;lang-none prettyprint-override&quot;&gt;&lt;code&gt;f : functionn : function that returns a function when passed a functionx : anything that the result of n being passed f accepts&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
