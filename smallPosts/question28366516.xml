<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>OpenOPC tag activation?</Title>
<Body>&lt;p&gt;I&#x27;m trying to use OpenOPC as a client to connect to an OPC server generated thanks to Dymola.&lt;/p&gt;&lt;p&gt;What I can&#x27;t figure out is the way to read from a particular tag. &lt;/p&gt;&lt;p&gt;Some tags are available (&#x27;SimControl&#x27;) and others are not (&#x27;ModelVariables&#x27;) whereas those tags should be available after server Initialization.&lt;/p&gt;&lt;p&gt;Is there a way to activate tags in the same way that what is it done in Matrikon Explorer.&lt;/p&gt;&lt;p&gt;Here is the code that I used :&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*-&quot;&quot;&quot;Created on Fri Feb 06 09:48:09 2015Simple test to connect to the Dymosim server generated with Dymola&quot;&quot;&quot;import os,sysimport time,OpenOPC#%% Connexion to serveropcserv=&#x27;Dymosim.OPCServer&#x27;opc = OpenOPC.client()opc.connect(opcserv)#%% Tags description in a dictionnary form# Following tags are for simulation control # and are available as soon as the client is connected to the serverroot1=&#x27;SimControl.&#x27;l1=[&#x27;Realtime&#x27;,&#x27;tScale&#x27;,&#x27;Initialize&#x27;,&#x27;Pause&#x27;,&#x27;Run&#x27;,&#x27;Stop&#x27;,&#x27;Delay&#x27;,&#x27;Initialized&#x27;,&#x27;Time&#x27;,&#x27;Status&#x27;]Sim={t:root1+t for t in l1}# Following tags are for variables display during simulation.# They should be available after the simulation was &quot;Initialize&quot;root2=&#x27;ModelVariables.&#x27;  # Available once the model has been initializedv1=[&#x27;heatCapacitor.port.T&#x27;,&#x27;heatCapacitor.port.Q_flow&#x27;]l2=[&#x27;T&#x27;,&#x27;Q&#x27;]Var={k:root2+v for (k,v) in zip(l2,v1)}#%% Simulation# Initialization of the simulationopc.write((Sim[&#x27;Initialize&#x27;],True))#%% Run the simulationopc.write((Sim[&#x27;Run&#x27;],True))# Pause simulation after 2 stime.sleep(2)opc.write((Sim[&#x27;Pause&#x27;],True)) #%% Read variablesopc.read(Sim[&#x27;Time&#x27;]) # OKopc.read(Var[&#x27;T&#x27;])       # Seems not accessible. Quality is badopc.list() # The 2 tags appear (SimControl and ModelVariables)#%% Run the simulation until the endopc.write((Sim[&#x27;Run&#x27;],True))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Many thanks for any help.&lt;/p&gt;</Body>
<Tags>python,opc,dymola</Tags>
</question>
<answer>
<Body>&lt;p&gt;I&#x27;ve been able to find a workaround by using the &lt;code&gt;properties&lt;/code&gt; method of OpenOPC.&lt;/p&gt;&lt;p&gt;The value and quality return by the method &lt;code&gt;properties&lt;/code&gt; are not consistent with the &lt;code&gt;read&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;It seems that the &lt;code&gt;properties&lt;/code&gt; method return the right value (with good quality) whereas the &lt;code&gt;read&lt;/code&gt; method does not.&lt;/p&gt;</Body>
</answer>
</qroot>
