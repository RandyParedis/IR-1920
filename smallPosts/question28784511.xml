<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>c++ template callbacks with function pointer</Title>
<Body>&lt;p&gt;I was wondering if it is possible to achieve something like this, without an error being thrown:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;template&amp;lt;typename T&amp;gt;T Sum(T _arg, T (*callbackFunction)(T)){    T result = (*callbackFunction)(_arg);    return result;}template&amp;lt;typename T&amp;gt;T Callback(T _arg){    std::cout &amp;lt;&amp;lt; &quot;Callback is called&quot; &amp;lt;&amp;lt; std::endl;    return _arg;}int main(){    std::cout &amp;lt;&amp;lt; Sum(10.2f, Callback);    getchar();    return 0;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is what I get:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cannot use function template &#x27;T Callback(T)&#x27; as a function argumentcould not deduce template argument for &#x27;T&#x27; from &#x27;float&#x27;&lt;/code&gt;&lt;/pre&gt;</Body>
<Tags>c++</Tags>
</question>
<answer>
<Body>&lt;pre&gt;&lt;code&gt;#include &amp;lt;functional&amp;gt;#include &amp;lt;iostream&amp;gt;template&amp;lt;typename T&amp;gt;T Sum(T _arg, std::function&amp;lt;T(T)&amp;gt; callbackFunction) // Note the std::function replacement and how callbackFunction is called below{    T result = callbackFunction(_arg);    return result;}template&amp;lt;typename T&amp;gt;T Callback(T _arg){    std::cout &amp;lt;&amp;lt; &quot;Callback is called&quot; &amp;lt;&amp;lt; std::endl;    return _arg;}int main(){    std::cout &amp;lt;&amp;lt; Sum(10.2f, Callback);    getchar();    return 0;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This should work. This code is standard C++11, you should enable it in your compilation command.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;You can&#x27;t pass a function template as an argument, you must pass an instantiation, this is an example:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;kbd&gt;&lt;a href=&quot;http://coliru.stacked-crooked.com/a/33fe5b6359e02493&quot; rel=&quot;nofollow&quot;&gt;Live On Coliru&lt;/a&gt;&lt;/kbd&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;template&amp;lt;typename T, typename F&amp;gt;T Sum(T arg, F f){    return f(arg);}template&amp;lt;typename T&amp;gt;T Callback(T arg){    std::cout &amp;lt;&amp;lt; &quot;Callback is called&quot; &amp;lt;&amp;lt; std::endl;    return arg;}auto Callback2 = [](auto arg){    std::cout &amp;lt;&amp;lt; &quot;Callback2, a generic lambda, is called&quot; &amp;lt;&amp;lt; std::endl;    return arg;};int main(){    std::cout &amp;lt;&amp;lt; Sum(10.2f, Callback&amp;lt;float&amp;gt;) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; Sum(10.2f, Callback2) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; Sum(10.2f, [](auto arg) {        std::cout &amp;lt;&amp;lt; &quot;An in-place generic lambda is called&quot; &amp;lt;&amp;lt; std::endl;        return arg;    }) &amp;lt;&amp;lt; std::endl;    getchar();    return 0;}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
