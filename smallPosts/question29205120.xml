<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Faster way to sort a list of objects based on a attribute in Python</Title>
<Body>&lt;p&gt;I&#x27;ve got a &lt;strong&gt;list of object in python&lt;/strong&gt; which i want to &lt;strong&gt;sort based on a attribute&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;For eg:&lt;/p&gt;&lt;p&gt;abc is a class with attributes id and count.&lt;/p&gt;&lt;p&gt;I have a list objects of the class abc.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;list=[abc(&#x27;1&#x27;,120),abc(&#x27;2&#x27;,0),abc(&#x27;0&#x27;,180),abc(&#x27;5&#x27;,150)].&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I want to sort the list in ascending order of the attribute &#x27;count&#x27; &lt;/p&gt;&lt;p&gt;I have done it using:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;list.sort(key=attrgetter(&#x27;count&#x27;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I have found using profiling my python script that it takes &lt;strong&gt;lot of time for sorting&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Can anyone suggest a better and &lt;strong&gt;faster way to sort list of object based on a attribute minimizing the time for sorting&lt;/strong&gt;.&lt;/p&gt;</Body>
<Tags>python,list,python-2.7,sorting</Tags>
</question>
<answer>
<Body>&lt;p&gt;I believe the &lt;code&gt;sort&lt;/code&gt; method is implemented using Timsort algorithm, so there is not much you can improve in terms of sorting.  &lt;/p&gt;&lt;p&gt;What you can do is to insert the elements differently provided you have the control over the inserting part of code.&lt;br&gt;For example you could use a &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_heap&quot; rel=&quot;nofollow&quot;&gt;binary heap&lt;/a&gt; to optimize retreiving of the largest element (see &lt;code&gt;heapq&lt;/code&gt; module in Python) or &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_search_tree&quot; rel=&quot;nofollow&quot;&gt;binary search tree&lt;/a&gt; to maintain the sorting order. The data strcuture you choose, mainly depends on what do you want to do with the elements.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;A nitpick: you&#x27;re using the name &lt;code&gt;list&lt;/code&gt; for your list which will overwrite the standard &lt;code&gt;list&lt;/code&gt; class. You&#x27;d be better off using &lt;code&gt;l&lt;/code&gt; as the list name.&lt;/p&gt;&lt;p&gt;I tested sorting a list containing 12 times the contents of your list 100000 times. It took 0.848 s without a comparator function or a key when I used the sorted() function to avoid re-sorting an already sorted list.&lt;/p&gt;&lt;p&gt;There are at least three ways I can think of:&lt;/p&gt;&lt;p&gt;A. Use the sort() with the comparator function:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def comparator(x, y):  return cmp(x.count, y.count)l.sort(cmp=comparator)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This took 9.598 s on my system when I used the sorted() function to avoid re-sorting an already sorted list.&lt;/p&gt;&lt;p&gt;B. Use the sort() with the key function:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;l.sort(key=operator.attrgetter(&#x27;count&#x27;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This took 3.111 s on my system when I used the sorted() function to avoid re-sorting an already sorted list.&lt;/p&gt;&lt;p&gt;C. Use native C code to improve the performance of the sorting. I didn&#x27;t test this.&lt;/p&gt;&lt;p&gt;So, you seem to be already using the fastest all-Python way there is and the way forward would be the use of native C code.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;If I understand you correctly:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class Abc(object):    def __init__(self, name, count):        self.name = name        self.count = count    @classmethod    def sort_key(cls, key):        if key == &#x27;count&#x27;:            return lambda obj: obj.count        elif key == &#x27;name&#x27;:            return lambda obj: obj.namelst = [Abc(&#x27;1&#x27;, 120), Abc(&#x27;2&#x27;, 0), Abc(&#x27;0&#x27;, 180), Abc(&#x27;5&#x27;, 150)]lst.sort(key=Abc.sort_key(&#x27;count&#x27;))for e in lst:    print e.name, e.countprintlst.sort(key=Abc.sort_key(&#x27;name&#x27;))for e in lst:    print e.name, e.countprint&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&#x27;d not recommend you use &#x27;id&#x27;, &#x27;abc&#x27; and &#x27;list&#x27; as names of arbitrary variables because they are keywords in python.&lt;/p&gt;</Body>
</answer>
</qroot>
