<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Using DFS algorithm to flood-fill a shape</Title>
<Body>&lt;p&gt;I am working on a project that must be something like windows&#x27;s paint. I&#x27;ve already implemented 8 tools (which are brush, rectangle, oval, polygon, triangle, line, spray and filler tool). Now I want to make a &quot;bucket&quot; tool which must fill the area around itself. I use DFS algorithm for this tool but when the area is large, gdb give below errors:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Program received signal SIGSEGV, Segmentation fault.0xb7c47f9d in _IO_new_file_xsputn (f=0xb7d82ac0 &amp;lt;_IO_2_1_stdout_&amp;gt;, data=0xbf80009e, n=6)    at fileops.c:12731273    fileops.c: No such file or directory.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Does anyone know what does this error mean?You can see bucket.h and bucket.cpp below:&lt;/p&gt;&lt;p&gt;bucket.h:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#ifndef BUCKET_H#define BUCKET_H#include &quot;tool.h&quot;#include &quot;SDL/SDL.h&quot;#include &quot;SDL/SDL_gfxPrimitives.h&quot;#include &amp;lt;cmath&amp;gt;class Bucket : public Tool {    private:        bool **mark;        Color selectedPointColor;    public:        Bucket( bool state, SDLKey key ) : Tool( state, key ) {}        virtual void draw( SDL_Surface*, int, int, int, int, int, Color color );        friend void DFS( SDL_Surface*, int, int, Color, bool** );        friend Color getColor( SDL_Surface*, int, int );};inline Color getColor( SDL_Surface *screen, int x, int y ){    Uint32* pixel = (Uint32*) screen-&amp;gt;pixels;    Uint8* color = (Uint8*) &amp;amp;( pixel[ y * screen-&amp;gt;w + x ] );    return Color( (int) color[2], (int) color[1], (int) color[0] );}inline void DFS( SDL_Surface *screen, int x, int y, Color color, Color selectedPointColor ){    static int counter;    counter++;    cout &amp;lt;&amp;lt; counter &amp;lt;&amp;lt; endl;    pixelRGBA( screen, x, y, color.red(), color.green(), color.blue(), 255 );    if ( x + 1 &amp;lt; screen-&amp;gt;w &amp;amp;&amp;amp; getColor( screen, x + 1, y ) == selectedPointColor )        DFS( screen, x + 1, y, color, selectedPointColor );    if ( y + 1 &amp;lt; screen-&amp;gt;h &amp;amp;&amp;amp; getColor( screen, x, y + 1 ) == selectedPointColor )        DFS( screen, x, y + 1, color, selectedPointColor );    if ( x - 1 &amp;gt;= 0 &amp;amp;&amp;amp; getColor( screen, x - 1, y) == selectedPointColor )        DFS( screen, x - 1, y, color, selectedPointColor );    if ( y - 1 &amp;gt;= 0 &amp;amp;&amp;amp; getColor( screen, x, y - 1) == selectedPointColor )        DFS( screen, x, y - 1, color, selectedPointColor );}#endif&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;bucket.cpp: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &quot;bucket.h&quot;void Bucket::draw( SDL_Surface *screen, int x, int y, int, int, int, Color color ){    selectedPointColor = getColor( screen, x, y );    if ( selectedPointColor == color )        return;    DFS( screen, x, y, color, this-&amp;gt;selectedPointColor );}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;any help would be appreciated.&lt;/p&gt;</Body>
<Tags>c++,sdl,depth-first-search</Tags>
</question>
<answer>
<Body>&lt;p&gt;It&#x27;s stack overflow. If you fill a large space which has a simple shape (like a rectangle), the depth of recursion will be roughly equal to the area of that space, because it will almost always go to some branch and not return.&lt;/p&gt;&lt;p&gt;That is if image is e.g 1000x1000, the depth of recursion is about one million, which is too much.&lt;/p&gt;&lt;p&gt;You shouldn&#x27;t use DFS for flood-filling, use BFS instead.&lt;/p&gt;</Body>
</answer>
</qroot>
