<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Running python script in Django from submit</Title>
<Body>&lt;p&gt;Perhaps there is a different way of going about this problem, but I am fairly new to using Django.&lt;/p&gt;&lt;p&gt;I have written a custom python script and would like to run a function or .py file when a user presses a &quot;submit&quot; button on the webpage.&lt;/p&gt;&lt;p&gt;How can I get a parameter to be passed into a python function from a submit button using Django?&lt;/p&gt;</Body>
<Tags>python,django</Tags>
</question>
<answer>
<Body>&lt;p&gt;Typically what is done is you&#x27;d have your form submit a post request. You&#x27;d then intercept the request in your urls.py, where you&#x27;d call your function.  So if your form looks like this: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&quot;submit&quot; method=&quot;post&quot;&amp;gt;    &amp;lt;input type=&quot;text&quot; name=&quot;info&quot;&amp;gt;&amp;lt;br&amp;gt;    &amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;your urls.py would have something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;url(r&#x27;^submit&#x27;, views.submit)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and your views.py would have the function that would get the parameters that were passed through the post:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def submit(request):    info=request.POST[&#x27;info&#x27;]    # do something with info&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This &lt;a href=&quot;https://docs.djangoproject.com/en/1.8/intro/tutorial04/&quot; rel=&quot;noreferrer&quot;&gt;link&lt;/a&gt; gives a more in depth explanation.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;After googling for a couple of days, i managed to piece together some solution on this question, which i needed for my project.&lt;/p&gt;&lt;p&gt;SwankSwashbucklers gave the general approach and i just wanted to add to it to complete the circle. This might not be the only solution so i am just giving one working example. So.. your template should contain the following code (as above with some extras):&lt;/p&gt;&lt;p&gt;&lt;strong&gt;your_template.html&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{% extends base.html %}{% block main_content %}&amp;lt;form action=&quot;your_view_url&quot; method=&quot;post&quot;&amp;gt;{% csrf_token %}  {{ form.as_table }}  // &amp;lt;input type=&quot;text&quot; name=&quot;info_name&quot; value=&quot;info_value&quot;&amp;gt;  &amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;p&amp;gt; Post Data: {{ info }} &amp;lt;/p&amp;gt;&amp;lt;p&amp;gt; Result: {{ output }} &amp;lt;/p&amp;gt;{% endblock main_content %}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you defined your form in &lt;strong&gt;forms.py&lt;/strong&gt; and/or using your models for form rendering, then examine the rendered HTML to find out what was given to the &quot;value&quot; attributes rendered by Django in the form. &quot;value&quot; is what will be submitted in your POST request.&lt;/p&gt;&lt;p&gt;Your defined view will display the form, and also will process it once submited, so you will have 2 sections in it with an &#x27;if&#x27; statement.Django uses &quot;GET&quot; to open views, so the initial rendering display blank form&lt;/p&gt;&lt;p&gt;&lt;strong&gt;views.py&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import subprocessdef your_view_name(request):  if request.method == &#x27;GET&#x27;:    form = your_form_name()   else:    if form.is_valid():      info = request.POST[&#x27;info_name&#x27;]      output = script_function(info)       // Here you are calling script_function,       // passing the POST data for &#x27;info&#x27; to it;      return render(request, &#x27;your_app/your_template.html&#x27;, {        &#x27;info&#x27;: info,        &#x27;output&#x27;: output,      })  return render(request, &#x27;your_app/your_template.html&#x27;, {    &#x27;form&#x27;: form,  })def script_function( post_from_form )  print post_from_form //optional,check what the function received from the submit;  return subprocess.check_call([&#x27;/path/to/your/script.py&#x27;, post_from_form])  &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;forms.py&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class your_form_name(forms.Form):  error_css_class = &#x27;error&#x27; //custom css for form errors - &quot;.error&quot;;  required_css_class = &#x27;required&#x27; //custom css for required fields - &quot;.required&quot;;  info_text = forms.CharField()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &quot;info_text&quot; is what will be rendered in the template as in &quot;input&quot; field when you call &lt;strong&gt;form = your_form_name()&lt;/strong&gt; . More on Django forms is here &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/forms/fields/&quot; rel=&quot;nofollow&quot;&gt;https://docs.djangoproject.com/en/1.9/ref/forms/fields/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;When you press submit, the form will submit the data back to itself, so your view will pick that its a POST and will run &lt;strong&gt;is_valid&lt;/strong&gt; , and then the value of &lt;strong&gt;output&lt;/strong&gt; will be the error code returned by &lt;strong&gt;subprocess.check_call&lt;/strong&gt; . If your script run OK, the value of &quot;output&quot; will be &quot;0&quot;.&lt;/p&gt;&lt;p&gt;This is for &quot;Django 1.4&quot;, and &quot;Python 2.6&quot;. Latest versions have &lt;strong&gt;subprocess.check_output&lt;/strong&gt; which can actually return the output from the script so you can render it back on the template.&lt;/p&gt;&lt;p&gt;Hope this helps:)&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;What @SwankSwashbucklers says is the way to go.&lt;/p&gt;&lt;p&gt;If you also want to maintain your script separate from the view, you can also use a &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/django-admin/&quot; rel=&quot;nofollow&quot;&gt;custom management command&lt;/a&gt; and use &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/django-admin/#django.core.management.call_command&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;call_command&lt;/code&gt;&lt;/a&gt; to call it in the view. This way you can run the script from the command line as well with &lt;code&gt;manage.py mycommand [myargument]&lt;/code&gt;.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;In django 1.11 and python 3.6, I had to use&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return subprocess.run([&#x27;python&#x27;, &#x27;path_to_script//prog17.py&#x27;, post_from_form], shell=False, timeout=1800)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The rest of @kossta&#x27;s code worked fine.&lt;/p&gt;</Body>
</answer>
</qroot>
