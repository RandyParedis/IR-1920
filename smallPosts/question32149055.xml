<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Public structs inheriting private struct C++</Title>
<Body>&lt;p&gt;I have a class that controls all IO to/from a device. When a thread makes an IO request it&#x27;s added to a FIFO queue in case another IO request is being handled at the time. As soon as an IO request has been completed it&#x27;s popped off the queue and the next IO request is handled.&lt;/p&gt;&lt;p&gt;Leaving out extraneous functions, member variables, and ctors/dtors, my class is laid out like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class IOInterface{  public:    struct ReadRequest: public IORequest    {      ReadRequest(int a, int b)        : IORequest(a, b) {}    };    struct WriteRequest: public IORequest    {      WriteRequest(int a, int b)        : IORequest(a, b) {}    };    void makeIORequest(IORequest request);  protected:    void performIO(ReadRequest request);    void performIO(WriteRequest request);    std::queue&amp;lt;IORequest&amp;gt; m_ioQueue;  private:    struct IORequest    {      IORequest(int a, int b)        : m_a(a), m_b(b) {}      int m_a;      int m_b;    }}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(This isn&#x27;t an exact copy of my code, so I don&#x27;t think it will compile as is)&lt;/p&gt;&lt;p&gt;The idea is to be able to have a thread that would check if queue had a request and then simply call:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;performIO(m_ioQueue.front());&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The problem is that at compile time the compiler has no idea what IORequest is when it gets to ReadRequest and WriteRequest. I can&#x27;t just move the private section of the class to the top because then the overloaded performIO functions don&#x27;t know what ReadRequest and WriteRequest are.&lt;/p&gt;&lt;p&gt;I want to keep IORequest private so it can never be instantiated down the road when this IOInterface class gets inherited.&lt;/p&gt;&lt;p&gt;Normally this could be solved with forward declaration, but how can I forward declare IORequest while still keeping it private?&lt;/p&gt;&lt;p&gt;Is forward declaration the correct way to do this?&lt;/p&gt;</Body>
<Tags>c++,inheritance,struct,forward-declaration</Tags>
</question>
<answer>
<Body>&lt;p&gt;The reason why your class is not compiling is that the definition of the private &lt;code&gt;struct&lt;/code&gt; is textually after the place where you inherit it. Move the private section to the top of the class, so it would compile:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class IOInterface {  private:    struct IORequest {      IORequest(int a, int b)        : m_a(a), m_b(b) {}      int m_a;      int m_b;    };  public:    struct ReadRequest: public IORequest {      ReadRequest(int a, int b)        : IORequest(a, b) {}    };    struct WriteRequest: public IORequest {      WriteRequest(int a, int b)        : IORequest(a, b) {}    };    void makeIORequest(IORequest request);  protected:    void performIO(ReadRequest request);    void performIO(WriteRequest request);    std::queue&amp;lt;IORequest&amp;gt; m_ioQueue;};&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://ideone.com/XQQyqz&quot; rel=&quot;nofollow&quot;&gt;Demo.&lt;/a&gt;&lt;/p&gt;</Body>
</answer>
</qroot>
