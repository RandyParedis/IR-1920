<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>MSVC14 treats the u8 prefix differently depending on whether the source is UTF-8 or UTF-8 BOM</Title>
<Body>&lt;p&gt;I was experimenting with UTF-8 and Qt and encountered a weird issue, so I investigated. I have created a simple program that prints bytes in &lt;code&gt;const char[]&lt;/code&gt; literals:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;cstdio&amp;gt;const char* koshka = &quot;кошка&quot;;const char* utf8_koshka = u8&quot;кошка&quot;;void printhex(const char* str){    for (; *str; ++str)    {        printf(&quot;%02X &quot;, *str &amp;amp; 0xFF);    }    puts(&quot;&quot;);}int main(int argc, char *argv[]){    printhex(koshka);    printhex(utf8_koshka);    return 0;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we save the file as UTF-8 with BOM, then run it from Visual Studio 2015, this will be printed:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;3F 3F 3F 3F 3FD0 BA D0 BE D1 88 D0 BA D0 B0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While I don&#x27;t really understand where the first string came from, the second is exactly what is should be, according to &lt;a href=&quot;http://www.utf8-chartable.de/unicode-utf8-table.pl?start=1024&amp;amp;number=1024&quot; rel=&quot;nofollow&quot;&gt;this UTF-8 encoding table&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;If the &lt;em&gt;exact same code&lt;/em&gt; is saved as UTF-8 without BOM, this is the output:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;D0 BA D0 BE D1 88 D0 BA D0 B0 C3 90 C2 BA C3 90 C2 BE C3 91 CB 86 C3 90 C2 BA C3 90 C2 B0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So while it causes the unprefixed &lt;code&gt;const char[]&lt;/code&gt; literal to be saved in the binary as UTF8, it breaks the &lt;code&gt;u8&lt;/code&gt; prefix for some reason.&lt;/p&gt;&lt;p&gt;If, however, we force the execution charset using &lt;code&gt;#pragma execution_character_set(&quot;utf-8&quot;)&lt;/code&gt;, both strings are printed as &lt;code&gt;D0 BA D0 BE D1 88 D0 BA D0 B0&lt;/code&gt; in &lt;em&gt;both cases&lt;/em&gt; (UTF-8 with and without BOM).&lt;/p&gt;&lt;p&gt;I&#x27;ve used Notepad++ to convert between the encodings.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;What is going on?&lt;/strong&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Alan&#x27;s answer explains the cause of this behavior, but I&#x27;d like to add a word of warning. I&#x27;ve run into this issue while using Qt Creator to develop a Qt 5.5.1 application. In 5.5.1, the &lt;code&gt;QString (const char*)&lt;/code&gt; constructor will assume the given string is encoded as UTF-8, and so will end up calling &lt;code&gt;QString::fromUtf8&lt;/code&gt; to construct the object. However, Qt Creator (by default) saves every file as UTF without BOM; this causes MSVC to misinterpret the source input as MBCS, exactly what has happened in this case, so under the default settings, the following will work:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;QMessageBox::information(0, &quot;test&quot;, &quot;кошка&quot;);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and this will fail (mojibake):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;QMessageBox::information(0, &quot;test&quot;, u8&quot;кошка&quot;);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A solution would be to enable the BOM in Tools -&gt; Options -&gt; Text Editor. Note that this only applied to MSVC 2015 (or actually 14.0); older versions have less/no C++11 support, and &lt;code&gt;u8&lt;/code&gt; simply doesn&#x27;t exist there, so if you&#x27;re working with Qt on an older version, your best bet is to rely on the compiler getting confused by the lack of the BOM.&lt;/p&gt;</Body>
<Tags>c++,visual-studio,visual-c++,utf-8,character-encoding</Tags>
</question>
<answer>
<Body>&lt;p&gt;The compiler doesn&#x27;t know what the encoding of the file is. It attempts to guess by looking at a prefix of the input. If it sees a UTF-8 encoded BOM then it assumes it is dealing with UTF-8. In the absence of that, and of any obvious UTF-16 characters, it defaults to something else. (ISO Latin 1? Whatever the common local MBCS is?)&lt;/p&gt;&lt;p&gt;Without the BOM the compiler fails to determine your input is UTF-8 encoded and so assumes it isn&#x27;t.&lt;/p&gt;&lt;p&gt;It then sees each byte of the UTF-8 encoding as a single character; for the simple literal it is copied across verbatim, and for the u8 string it is encoded as UTF-8, giving the double encoding you see.&lt;/p&gt;&lt;p&gt;The only solution seems to be to force the BOM; alternatively, use UTF-16 which is really what the Windows platform prefers.&lt;/p&gt;&lt;p&gt;See also &lt;a href=&quot;https://stackoverflow.com/questions/1660712/specification-of-source-charset-encoding-in-msvc-like-gcc-finput-charset-ch&quot;&gt;Specification of source charset encoding in MSVC++, like gcc &amp;quot;-finput-charset=CharSet&amp;quot;&lt;/a&gt;.&lt;/p&gt;</Body>
</answer>
</qroot>
