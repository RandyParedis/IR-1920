<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Qt - Create a time-based UUID</Title>
<Body>&lt;p&gt;I want to create v1 UUID (time-based) in Qt&lt;/p&gt;&lt;p&gt;I tried using &lt;a href=&quot;https://github.com/sean-/ossp-uuid&quot; rel=&quot;nofollow&quot;&gt;cppuuid&lt;/a&gt; but couldn&#x27;t get correct uuidI also tried &lt;a href=&quot;http://www.ossp.org/pkg/lib/uuid/&quot; rel=&quot;nofollow&quot;&gt;ossp uuid&lt;/a&gt; but got error while building, and I prefer to avoid using it anyway&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;I need the most simple and short way to generate such uuid in Qt (I prefer a Qt class, if any)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;I want v1 uuid&#x27;s to use it as a primary key in my database &lt;/p&gt;&lt;p&gt;see &lt;a href=&quot;http:////https://www.percona.com/blog/2014/12/19/store-uuid-optimized-way/&quot; rel=&quot;nofollow&quot;&gt;//https://www.percona.com/blog/2014/12/19/store-uuid-optimized-way/&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;strong&gt;I tried cppuuid as follows&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    qulonglong v1 = 0x19432987;    qulonglong v2= 0x33;    uuid::Uuid u = uuid::uuid1( v1,v2 );    QByteArray uuid = QByteArray().append( QString::fromStdString( u.hex()));    qDebug() &amp;lt;&amp;lt; &quot;uuid size&quot; &amp;lt;&amp;lt; uuid.size(); // 25    qDebug() &amp;lt;&amp;lt; &quot;uuid&quot; &amp;lt;&amp;lt; uuid;    qDebug() &amp;lt;&amp;lt; &quot;uuid hex&quot; &amp;lt;&amp;lt; uuid.toHex();    qDebug() &amp;lt;&amp;lt; &quot;uuid hex size&quot; &amp;lt;&amp;lt; uuid.toHex().size(); //50&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: I have found why cppuuid was giving wrong results, details are in my answer&lt;/p&gt;</Body>
<Tags>c++,qt,uuid</Tags>
</question>
<answer>
<Body>&lt;p&gt;Use &lt;code&gt;QUuid::createUuid&lt;/code&gt; which is seeded by the local random number generator. You can seed with &lt;code&gt;qsrand(time())&lt;/code&gt; or something similar.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;I have found a logic error in cppuuid which caused strange results.&lt;/p&gt;&lt;p&gt;The gettime function in cppuuid is as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;static uint64_t gettime(){    static uint64_t last_uuid_time = 0; // On the heap!    int rc = 0;    struct timespec tp;    uint64_t uuid_time = 0;    rc = clock_gettime(CLOCK_REALTIME, &amp;amp;tp);    // Convert to 100-nanosecond intervals    uuid_time = tp.tv_sec * 10000000;    uuid_time = uuid_time + (tp.tv_nsec / 100);    uuid_time = uuid_time + kNum_100nsec_1582_1970;    // If the clock looks like it went backwards, or is the same, increment it.    if (last_uuid_time &amp;lt;= uuid_time) {    uuid_time = last_uuid_time + 1;    }    last_uuid_time = uuid_time;    return uuid_time;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The login error is in this &lt;em&gt;if condition&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    // If the clock looks like it went backwards, or is the same, increment it.if (last_uuid_time &amp;lt;= uuid_time) {    uuid_time = last_uuid_time + 1;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;the &lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&amp;lt;=&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;should be &lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&gt;=&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;now cppuuid is giving correct results. Hope this helps&lt;/p&gt;&lt;pre&gt;&lt;code&gt;uuid::Uuid u = uuid::uuid1(0x19432987, 0x33);QByteArray uuid = QByteArray().append( QString::fromStdString( u.hex()));qDebug() &amp;lt;&amp;lt; &quot;uuid size&quot; &amp;lt;&amp;lt; uuid.size(); // 32qDebug() &amp;lt;&amp;lt; &quot;uuid&quot; &amp;lt;&amp;lt; uuid;&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
