<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Why declare a variable type p as new type instead of declare it just as type p?</Title>
<Body>&lt;p&gt;the following is a chunk of code that I am analyzing. As I am a beginner C++ programmer, I did not understand why the owner&#x27;s code declared the variable  of type &lt;strong&gt;node-point&lt;/strong&gt; as &lt;strong&gt;node *p = new node&lt;/strong&gt;, instead of just declare it as &lt;strong&gt;node *p&lt;/strong&gt;. It seems to me that both approaches results in the same behavior. Am I wrong? If so, why? &lt;/p&gt;&lt;pre&gt;&lt;code&gt;class Queue {    private:        node *front;        node *rear;    public:        Queue();        ~Queue();        bool isEmpty();        void enqueue(int);        int dequeue();        void display();};void Queue::display(){    node *p = new node;    p = front;    if(front == NULL){        cout&amp;lt;&amp;lt;&quot;\nNothing to Display\n&quot;;    }else{        while(p!=NULL){            cout&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;p-&amp;gt;info;            p = p-&amp;gt;next;        }        cout &amp;lt;&amp;lt; endl;    }}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thanks.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;EDITED&lt;/strong&gt;Now, I have other question. The following code is the destructor of the Queue class, and as we can see, owner&#x27;s code decided to use the operator &lt;strong&gt;delete&lt;/strong&gt; upon the variable &lt;strong&gt;front&lt;/strong&gt; of the type pointer-node. From the readings that I did, the operator &lt;strong&gt;delete&lt;/strong&gt; should be used in pair with the operator new, or in other words, it just necessary do deallocate the memory (delete) that was directly allocated by the programmer (new). So, why is the owner&#x27;s code using &lt;strong&gt;delete&lt;/strong&gt;. Is it another mistake?&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Queue::~Queue() {    delete front;}&lt;/code&gt;&lt;/pre&gt;</Body>
<Tags>c++,pointers,destructor,declaration</Tags>
</question>
<answer>
<Body>&lt;p&gt;Assuming that default constructing a &lt;code&gt;node&lt;/code&gt; has no side-effects, the behaviour of the program is indeed the same whether you write &lt;code&gt;node *p&lt;/code&gt; or &lt;code&gt;node *p = new node&lt;/code&gt;, because &lt;code&gt;p&lt;/code&gt; is reassigned on the very next line.&lt;/p&gt;&lt;p&gt;However, since the object created by &lt;code&gt;new node&lt;/code&gt; is never deleted, &lt;code&gt;Queue::display&lt;/code&gt; leaks memory every time it is called. It seems like you have found a bug in the code. It can probably be fixed by removing &lt;code&gt;new node&lt;/code&gt; and just initializing &lt;code&gt;p&lt;/code&gt; to &lt;code&gt;front&lt;/code&gt;, as I suspect the author didn&#x27;t really know what he was doing.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;node *p = front;&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
