<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Why does this recursive function work?</Title>
<Body>&lt;p&gt;So a friend of mine is taking one of his first CS classes and mentions that he&#x27;s using recursion in his very first program. He sends me the code below. Right off the bat I noticed that he isn’t catching the return value of his recursive call and I assumed it wouldn’t work. But he insists that it does work so I try his program out, and to my surprise it functions exactly as expected. Ignoring the fact that this is a dumb way to get from point A to point B, why does this even work?&lt;/p&gt;&lt;p&gt;I was playing around with what he sent me and added a &lt;code&gt;cout&lt;/code&gt; after the if statement. Besides that, the first chunk of code and the second chunk are identical.&lt;/p&gt;&lt;p&gt;If I input the following for the first program, here&#x27;s what I get...&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Enter a Number: 10&lt;/p&gt;    &lt;p&gt;You entered: 10 Is this correct? (Y/N): N&lt;/p&gt;    &lt;p&gt;Enter a Number: 12&lt;/p&gt;    &lt;p&gt;You entered: 12 Is this correct? (Y/N): Y&lt;/p&gt;    &lt;p&gt;main() = 12&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;And then if I do the same thing with the second program, here&#x27;s what I get...&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Enter a Number: 10&lt;/p&gt;    &lt;p&gt;You entered: 10 Is this correct? (Y/N): N&lt;/p&gt;    &lt;p&gt;Enter a Number: 12&lt;/p&gt;    &lt;p&gt;You entered: 12 Is this correct? (Y/N): Y&lt;/p&gt;    &lt;p&gt;main() = 6300096&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;What&#x27;s going on!?&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;cctype&amp;gt;using namespace std;int getNum() {    cout &amp;lt;&amp;lt; &quot;Enter a Number: &quot;;    int x;    cin &amp;gt;&amp;gt; x;    cin.ignore(100, &#x27;\n&#x27;);    while(x &amp;lt; 0) {        cout &amp;lt;&amp;lt; &quot;Please enter amount greater than 0: &quot;;        cin &amp;gt;&amp;gt; x;        cin.ignore(100, &#x27;\n&#x27;);    }    cout &amp;lt;&amp;lt; &quot;You entered: &quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &quot; Is this correct? (Y/N): &quot;;    char response;    cin &amp;gt;&amp;gt; response;    cin.ignore(100, &#x27;\n&#x27;);    if (response != &#x27;Y&#x27;) {        getNum();    } else {        return x;    }}int main() {    cout &amp;lt;&amp;lt; &quot;\nmain() = &quot; &amp;lt;&amp;lt; getNum() &amp;lt;&amp;lt; endl;    return 0;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The only difference between the top and the bottom is a &lt;code&gt;cout&lt;/code&gt; statement after the if statement.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;cctype&amp;gt;using namespace std;int getNum() {    cout &amp;lt;&amp;lt; &quot;Enter a Number: &quot;;    int x;    cin &amp;gt;&amp;gt; x;    cin.ignore(100, &#x27;\n&#x27;);    while(x &amp;lt; 0) {        cout &amp;lt;&amp;lt; &quot;Please enter amount greater than 0: &quot;;        cin &amp;gt;&amp;gt; x;        cin.ignore(100, &#x27;\n&#x27;);    }    cout &amp;lt;&amp;lt; &quot;You entered: &quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &quot; Is this correct? (Y/N): &quot;;    char response;    cin &amp;gt;&amp;gt; response;    cin.ignore(100, &#x27;\n&#x27;);    if (response != &#x27;Y&#x27;) {        getNum();    } else {        return x;    }    cout &amp;lt;&amp;lt; &quot;returning... &quot; &amp;lt;&amp;lt; x;}int main() {    cout &amp;lt;&amp;lt; &quot;\nmain() = &quot; &amp;lt;&amp;lt; getNum() &amp;lt;&amp;lt; endl;    return 0;}&lt;/code&gt;&lt;/pre&gt;</Body>
<Tags>c++</Tags>
</question>
<answer>
<Body>&lt;p&gt;In C++, compilers don&#x27;t thoroughly check that function ends its flow without return statement because it&#x27;s not easy task to check all control paths. Behavior of this code is undefined, what will actually occur depends on calling convention. &lt;/p&gt;&lt;p&gt;I think they merely forgot &lt;code&gt;return&lt;/code&gt; before &lt;code&gt;getNum()&lt;/code&gt;. It will work and will not pollute stack because if tail recursion optimization.&lt;/p&gt;&lt;p&gt;This code is weird for first CS classes though. &lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;At the machine code level, a small enough function result is usually returned in a particular processor register.&lt;/p&gt;&lt;p&gt;Formally the code has Undefined Behavior by not executing a &lt;code&gt;return&lt;/code&gt; statement in some calls of &lt;code&gt;getNum&lt;/code&gt;, but what happens is probably this:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;getNum()&lt;/code&gt; is called, user answers &lt;code&gt;N&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;getNum()&lt;/code&gt; calls itself recursively, user answer &lt;code&gt;Y&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;getNum()&lt;/code&gt; executes &lt;code&gt;return x;&lt;/code&gt;. With a typical C++ implementation this places the return value in a register, let&#x27;s call it R.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Execution returns up to &lt;code&gt;getNum()&lt;/code&gt; (original call), which now returns by execution passing through the end of the function, no &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The calling code finds the value in register R, as expected.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;So, it can &amp;ldquo;work&amp;rdquo;.&lt;/p&gt;&lt;p&gt;But it&#x27;s formally Undefined Behavior, and with some other compiler and/or options, it might not work.&lt;/p&gt;</Body>
</answer>
</qroot>
