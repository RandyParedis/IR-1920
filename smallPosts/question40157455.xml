<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Sending Vector Winsock Problems</Title>
<Body>&lt;p&gt;first time asking a question!&lt;/p&gt;&lt;p&gt;I have a small server that sends a vector of objects to a client:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;void sendFoo(vector&amp;lt;Foo&amp;gt; &amp;amp;foo){    int num = foo.size();    sSend = accept(sListen, (SOCKADDR*)&amp;amp;addr, &amp;amp;addrLen);    for(int i = 0; i &amp;lt; num; i++){        if(sSend == NULL){            cout &amp;lt;&amp;lt; &quot;Not connected&quot; &amp;lt;&amp;lt; endl;        } else {            //send vector size            send(sSend, (char*)&amp;amp;num, sizeof(num), NULL);            //send foo(s)            send(sSend, (char*)&amp;amp;foo[i], sizeof(foo[i]), NULL);        }    }    closesocket(sSend);            }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The foo class contains an &lt;code&gt;int id&lt;/code&gt; and a &lt;code&gt;double transformation[3][4]&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;My client app prints out the ids and the transformations it receives:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sRecv = socket(AF_INET, SOCK_STREAM, NULL);if (connect(sRecv, (SOCKADDR*)&amp;amp;addr, addrLen) != 0) {    cout &amp;lt;&amp;lt; &quot;Not connected to server&quot; &amp;lt;&amp;lt; endl;} else {    recv(sRecv, (char*)&amp;amp;num, sizeof(num), NULL);    vector&amp;lt;Foo&amp;gt; foo(num);    for (int i = 0; i &amp;lt; num; i++){        recv(sRecv, (char*)&amp;amp;foo[i], sizeof(foo[i]), NULL);        //prints them out    }}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If I create 1 Foo and send it across the client correctly prints this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Foo ID: 1Foo Transformation:1.0000 2.0000 3.0000 4.00001.0000 2.0000 3.0000 4.00001.0000 2.0000 3.0000 4.0000&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But when I try to send across more than one I get what look like memory references every other block:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Foo ID: 1Foo 1 Transformation:1.0000 2.0000 3.0000 4.00001.0000 2.0000 3.0000 4.00001.0000 2.0000 3.0000 4.0000Foo ID: 4Foo 4 Transformation:-6.27744e+66 -6.27744e+66 -6.27744e+66 -6.27744e+66-6.27744e+66 -6.27744e+66 -6.27744e+66 -6.27744e+66-6.27744e+66 -6.27744e+66 -6.27744e+66 -6.27744e+66Foo ID: 2Foo 2 Transformation:1.0000 2.0000 3.0000 4.00001.0000 2.0000 3.0000 4.00001.0000 2.0000 3.0000 4.0000Foo ID: 4Foo 4 Transformation:1.70592e-314 5.29981e-315 5.30499e-315 5.30758e-3155.31017e-315 5.29981e-315 5.30499e-315 5.30758e-3155.31017e-315 5.29981e-315 5.30499e-315 5.30758e-315//etc&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[SOLVED] I was trying to send the size of the vector multiple times and the client was only set up to receive it once. Thanks for the answers!&lt;/p&gt;</Body>
<Tags>c++,vector,winsock</Tags>
</question>
<answer>
<Body>&lt;p&gt;Well, I&#x27;d say a debugger will be your best friend. I&#x27;m also a little surprised the received end gave the printed output you show, perhaps more issues that aren&#x27;t shown.&lt;/p&gt;&lt;p&gt;Look at the location of the following line:&lt;code&gt;send(sSend, (char*)&amp;amp;num, sizeof(num), NULL);&lt;/code&gt;&lt;/p&gt;&lt;p&gt;And compare to where you have the receiving of that:&lt;code&gt;recv(sRecv, (char*)&amp;amp;num, sizeof(num), NULL);&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Hint, you call send more than recv.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;To send your class over a socket you need to serialize it in a raw chunk of memory. you can&#x27;t send the C++ object directly.&lt;/p&gt;&lt;p&gt;Make a function &lt;code&gt;uint_32_t Foo::exportRaw( void **buffer) ;&lt;/code&gt; that will allocate raw memory for a buffer, put you class&#x27; members in it, then return the size allocated to send it over the socket.&lt;/p&gt;&lt;p&gt;Don&#x27;t forget to free your buffer memory when it is sent and useless.&lt;/p&gt;&lt;p&gt;Here is an example :&lt;/p&gt;&lt;pre&gt;&lt;code&gt;void *buffer;uint32_t sizeAlloc;sizeAlloc = foo[i].exportRaw(&amp;amp;buffer); // serialize object//send foo(s)send(sSend, (char*)buffer, sizeAlloc, NULL);free(buffer);&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
