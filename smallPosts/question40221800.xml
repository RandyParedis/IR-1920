<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Why greater&lt;int&gt; and less&lt;int&gt; showing opposite behaviour?</Title>
<Body>&lt;p&gt;Please consider following code,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;using namespace std;std::priority_queue&amp;lt;int,vector&amp;lt;int&amp;gt;,std::greater&amp;lt;int&amp;gt;&amp;gt; queue; //firstqueue.push(26);queue.push(12);queue.push(22);queue.push(25);std::cout&amp;lt;&amp;lt;queue.top()&amp;lt;&amp;lt;endl;std::priority_queue&amp;lt;int,vector&amp;lt;int&amp;gt;,std::less&amp;lt;int&amp;gt;&amp;gt; queue2; //secondqueue2.push(26);queue2.push(12);queue2.push(22);queue2.push(25);std::cout&amp;lt;&amp;lt;queue2.top()&amp;lt;&amp;lt;endl;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;  &lt;p&gt;Output:&lt;/p&gt;    &lt;p&gt;12&lt;/p&gt;    &lt;p&gt;26&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In first definition I used &lt;code&gt;greater&amp;lt;int&amp;gt;&lt;/code&gt; still I am getting 12 (min value) as output, while when I use &lt;code&gt;less&amp;lt;int&amp;gt;&lt;/code&gt; I get 26 (max value).&lt;/p&gt;&lt;p&gt;Shouldn&#x27;t &lt;code&gt;greater&amp;lt;int&amp;gt;&lt;/code&gt; create max heap? &lt;/p&gt;</Body>
<Tags>c++,stl</Tags>
</question>
<answer>
<Body>&lt;p&gt;Because that&#x27;s their job. &lt;code&gt;less&lt;/code&gt; and &lt;code&gt;greater&lt;/code&gt; are supposed to model operators &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; respectively and are used by &lt;code&gt;priority_queue&lt;/code&gt; to give order to its elements.&lt;/p&gt;&lt;p&gt;They yield opposite results because they&#x27;re defined to do so (except for equal elements).&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Shouldn&#x27;t &lt;code&gt;greater&amp;lt;int&amp;gt;&lt;/code&gt; create max heap? &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;You&#x27;re mistaking internal representation of the container with the interface of &lt;code&gt;top()&lt;/code&gt; member function, which is supposed to yield the top element, as per the comparator.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;As far as the internal algorithm itself is concerned, &lt;code&gt;std::priority_queue&lt;/code&gt; always creates &quot;max heap&quot;. You just need to teach it to compare the elements in order for it know what&#x27;s &quot;max&quot;.&lt;/p&gt;&lt;p&gt;To determine the ordering for that &quot;max heap&quot;, it uses a &quot;less&quot;-style comparison predicate: when given a pair &lt;code&gt;(a, b)&lt;/code&gt; (in that specific order) the predicate should tell whether &lt;code&gt;a&lt;/code&gt; is &lt;em&gt;less than&lt;/em&gt; &lt;code&gt;b&lt;/code&gt;. By using the ordering information obtained from the predicate &lt;code&gt;std::priority_queue&lt;/code&gt; will make sure that the &lt;em&gt;greater&lt;/em&gt; element is at the top of the heap. Standard &lt;code&gt;std::less&lt;/code&gt; is an example of such predicate. Whatever predicate you supply, the implementation will treat it as a &quot;less&quot;-style predicate.&lt;/p&gt;&lt;p&gt;If you supply a predicate that implements the opposite comparison (like &lt;code&gt;std::greater&lt;/code&gt;), you will naturally end up with minimum element at the top.  Basically, one can put it this way: &lt;code&gt;std::priority_queue&lt;/code&gt; expects a &quot;less&quot; comparison predicate, and by supplying a &quot;greater&quot; comparison predicate instead you are essentially &lt;em&gt;deceiving&lt;/em&gt; the queue (in a well-defined fashion). The primary consequence of that deceit is that for you (the external observer) &quot;max heap&quot; turns into a &quot;min heap&quot;.&lt;/p&gt;&lt;p&gt;And this is exactly what you observe.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;std::priority_queue is a &quot;max heap&quot;. You provide a less-than operator; and the element at the top is the largest.&lt;/p&gt;&lt;p&gt;In your second example, you provided less-than to be the intuitive std::less; and you see the largest element at the top.&lt;/p&gt;&lt;p&gt;In your first example, you consider a larger int to be &quot;less-than&quot; a smaller int; and the &quot;largest&quot; element based your &quot;less-than&quot; is in fact the smallest int.&lt;/p&gt;</Body>
</answer>
</qroot>
