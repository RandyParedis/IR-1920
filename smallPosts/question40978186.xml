<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Mapping index values from one dataframe to another in pandas</Title>
<Body>&lt;p&gt;I have a dataframe &lt;code&gt;df_in&lt;/code&gt; like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import pandas as pdimport numpy as npdic_in = {&#x27;A&#x27;:[&#x27;A1&#x27;,&#x27;A1&#x27;,&#x27;A1&#x27;,&#x27;L3&#x27;,&#x27;A3&#x27;,&#x27;A3&#x27;,&#x27;B1&#x27;,&#x27;B1&#x27;,&#x27;B1&#x27;,&#x27;B2&#x27;,&#x27;A2&#x27;],       &#x27;B&#x27;:[&#x27;xxx&#x27;,&#x27;ttt&#x27;,&#x27;qqq&#x27;,&#x27;nnn&#x27;,&#x27;lll&#x27;,&#x27;nnn&#x27;,&#x27;eee&#x27;,&#x27;xxx&#x27;,&#x27;qqq&#x27;,&#x27;bbb&#x27;,&#x27;sss&#x27;],       &#x27;C&#x27;:[&#x27;fas&#x27;,&#x27;efe&#x27;,&#x27;pfo&#x27;,&#x27;scs&#x27;,&#x27;grj&#x27;,&#x27;rpo&#x27;,&#x27;cbb&#x27;,&#x27;asf&#x27;,&#x27;asc&#x27;,&#x27;wq3&#x27;,&#x27;mls&#x27;]}df_in = pd.DataFrame(dic_in)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I also have a another dataframe which is called &lt;code&gt;df_map&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;dic_map = {&#x27;X&#x27;:[&#x27;A1&#x27; ,&#x27;A1&#x27; ,&#x27;A1&#x27; ,&#x27;A2&#x27; ,&#x27;A3&#x27; ,&#x27;B1&#x27; ,&#x27;B1&#x27; ,&#x27;B1&#x27; ,&#x27;B1&#x27; ,&#x27;B2&#x27; ,&#x27;B3&#x27; ,&#x27;B3&#x27; ,&#x27;L1&#x27;, &#x27;L3&#x27; ,&#x27;L3&#x27;],           &#x27;Y&#x27;:[&#x27;qqq&#x27;,&#x27;ttt&#x27;,&#x27;xxx&#x27;,&#x27;sss&#x27;,&#x27;lll&#x27;,&#x27;eee&#x27;,&#x27;qqq&#x27;,&#x27;xxx&#x27;,&#x27;zzz&#x27;,&#x27;bbb&#x27;,&#x27;mmm&#x27;,&#x27;ooo&#x27;,&#x27;kkk&#x27;,&#x27;nnn&#x27;,&#x27;ttt&#x27;]}df_map = pd.DataFrame(dic_map)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;My goal is to study every single &lt;code&gt;row[[&#x27;A&#x27;,&#x27;B&#x27;]]&lt;/code&gt; of &lt;code&gt;df_in&lt;/code&gt;; if the couple of items is identified within &lt;code&gt;df_map&lt;/code&gt;, then I extract the value of the corresponding index and I set it to another column in the first dataframe.&lt;/p&gt;&lt;p&gt;Ex:  the couple &lt;code&gt;A1 - xxx&lt;/code&gt; is found in map in the &lt;code&gt;0&lt;/code&gt;; therefore I will place a &lt;code&gt;0&lt;/code&gt; next to the couple &lt;code&gt;A1 - xxx&lt;/code&gt;. If a couple is not found then I will place &lt;code&gt;NaN&lt;/code&gt;.  &lt;/p&gt;&lt;p&gt;The result should look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    Idx   A    B    C0     2  A1  xxx  fas1     1  A1  ttt  efe2     0  A1  qqq  pfo3    13  L3  nnn  scs4     4  A3  lll  grj5   NaN  A3  nnn  rpo6     5  B1  eee  cbb7     7  B1  xxx  asf8     6  B1  qqq  asc9     9  B2  bbb  wq310    3  A2  sss  mls&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Can you suggest me a smart and efficient way to reach my goal?&lt;/p&gt;</Body>
<Tags>python,pandas,dataframe,replace,mapping</Tags>
</question>
<answer>
<Body>&lt;p&gt;You can use &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.merge.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;merge&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;reset_index&lt;/code&gt;&lt;/a&gt;, last remove columns by &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;print (pd.merge(df_in,                 df_map.reset_index(),                 left_on=[&#x27;A&#x27;,&#x27;B&#x27;],                 right_on=[&#x27;X&#x27;,&#x27;Y&#x27;],                 how=&#x27;left&#x27;).drop([&#x27;X&#x27;,&#x27;Y&#x27;], axis=1))     A    B    C  index0   A1  xxx  fas    2.01   A1  ttt  efe    1.02   A1  qqq  pfo    0.03   L3  nnn  scs   13.04   A3  lll  grj    4.05   A3  nnn  rpo    NaN6   B1  eee  cbb    5.07   B1  xxx  asf    7.08   B1  qqq  asc    6.09   B2  bbb  wq3    9.010  A2  sss  mls    3.0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another solution, thank you &lt;a href=&quot;https://stackoverflow.com/questions/40978186/mapping-index-values-from-one-dataframe-to-another-in-pandas#comment69165978_40978236&quot;&gt;Julien Marrec&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;df_in.merge(df_map.reset_index()                  .set_index([&#x27;X&#x27;,&#x27;Y&#x27;]),             left_on=[&#x27;A&#x27;,&#x27;B&#x27;],             right_index=True,             how=&#x27;left&#x27;)&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&lt;p&gt;Last if want change order of columns:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;df = pd.merge(df_in,               df_map.reset_index(),               left_on=[&#x27;A&#x27;,&#x27;B&#x27;],               right_on=[&#x27;X&#x27;,&#x27;Y&#x27;],               how=&#x27;left&#x27;).drop([&#x27;X&#x27;,&#x27;Y&#x27;], axis=1)cols = df.columns[-1:].tolist() + df.columns[:-1].tolist()print (cols)[&#x27;index&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]df = df[cols]print (df)    index   A    B    C0     2.0  A1  xxx  fas1     1.0  A1  ttt  efe2     0.0  A1  qqq  pfo3    13.0  L3  nnn  scs4     4.0  A3  lll  grj5     NaN  A3  nnn  rpo6     5.0  B1  eee  cbb7     7.0  B1  xxx  asf8     6.0  B1  qqq  asc9     9.0  B2  bbb  wq310    3.0  A2  sss  mls&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
