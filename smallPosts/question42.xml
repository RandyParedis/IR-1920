<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Best way to allow plugins for a PHP application</Title>
<Body>&lt;p&gt;I am starting a new web application in PHP and this time around I want to create something that people can extend by using a plugin interface. &lt;/p&gt;&lt;p&gt;How does one go about writing &#x27;hooks&#x27; into their code so that plugins can attach to specific events?&lt;/p&gt;</Body>
<Tags>php,plugins,architecture,hook</Tags>
</question>
<answer>
<Body>&lt;p&gt;I believe the easiest way would be to follow Jeff&#x27;s own advice and have a look around existing code. Try looking at Wordpress, Drupal, Joomla and other well known PHP-based CMS&#x27;s to see how their API hooks look and feel. This way you can even get ideas you may have not thought of previously to make things a little more rubust.&lt;/p&gt;&lt;p&gt;A more direct answer would be to write general files that they would &quot;include_once&quot; into their file that would provide the usability they would need. This would be broken up into categories and NOT provided in one MASSIVE &quot;hooks.php&quot; file. Be careful though, because what ends up happening is that files that they include end up having more and more dependencies and functionality improves. Try to keep API dependencies low. I.E fewer files for them to include.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;You could use an Observer pattern.  A simple functional way to accomplish this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php/** Plugin system **/$listeners = array();/* Create an entry point for plugins */function hook() {    global $listeners;    $num_args = func_num_args();    $args = func_get_args();    if($num_args &amp;lt; 2)        trigger_error(&quot;Insufficient arguments&quot;, E_USER_ERROR);    // Hook name should always be first argument    $hook_name = array_shift($args);    if(!isset($listeners[$hook_name]))        return; // No plugins have registered this hook    foreach($listeners[$hook_name] as $func) {        $args = $func($args);     }    return $args;}/* Attach a function to a hook */function add_listener($hook, $function_name) {    global $listeners;    $listeners[$hook][] = $function_name;}//////////////////////////** Sample Plugin **/add_listener(&#x27;a_b&#x27;, &#x27;my_plugin_func1&#x27;);add_listener(&#x27;str&#x27;, &#x27;my_plugin_func2&#x27;);function my_plugin_func1($args) {    return array(4, 5);}function my_plugin_func2($args) {    return str_replace(&#x27;sample&#x27;, &#x27;CRAZY&#x27;, $args[0]);}//////////////////////////** Sample Application **/$a = 1;$b = 2;list($a, $b) = hook(&#x27;a_b&#x27;, $a, $b);$str  = &quot;This is my sample application\n&quot;;$str .= &quot;$a + $b = &quot;.($a+$b).&quot;\n&quot;;$str .= &quot;$a * $b = &quot;.($a*$b).&quot;\n&quot;;$str = hook(&#x27;str&#x27;, $str);echo $str;?&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;This is my CRAZY application4 + 5 = 94 * 5 = 20&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;For this example source code, you must declare all your plugins before the actual source code that you want to be extendable.  I&#x27;ve included an example of how to handle single or multiple values being passed to the plugin.  The hardest part of this is writing the actual documentation which lists what arguments get passed to each hook.&lt;/p&gt;&lt;p&gt;This is just one method of accomplishing a plugin system in PHP.  There are better alternatives, I suggest you check out the WordPress Documentation for more information.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Sorry, it appears underscore characters are replaced by HTML entities by Markdown?  I can re-post this code when this bug gets fixed.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Edit: Nevermind, it only appears that way when you are editing&lt;/em&gt;&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;The &lt;em&gt;hook&lt;/em&gt; and &lt;em&gt;listener&lt;/em&gt; method is the most commonly used, but there are other things you can do.  Depending on the size of your app, and who your going to allow see the code (is this going to be a FOSS script, or something in house) will influence greatly how you want to allow plugins.&lt;/p&gt;&lt;p&gt;kdeloach has a nice example, but his implementation and hook function is a little unsafe.  I would ask for you to give more information of the nature of php app your writing, And how you see plugins fitting in.  &lt;/p&gt;&lt;p&gt;+1 to kdeloach from me.&lt;/p&gt;</Body>
</answer>
</qroot>
