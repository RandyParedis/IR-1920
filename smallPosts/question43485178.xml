<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How to pass a private member variable to another class?</Title>
<Body>&lt;p&gt;Based on my Snack.cpp, Snack header file, MiniVend header file &amp;amp; miniVend.cpp file, I am trying to move my Snack private member - price into my MiniVend.cpp file to generate the amount * price to return a total value of items in my machine. How do I access the price from another class? &lt;/p&gt;&lt;p&gt;Portion of my miniVend.cpp file &lt;/p&gt;&lt;pre&gt;&lt;code&gt;   double miniVend::valueOfSnacks()    {        return //// I don&#x27;t know how to get snacks price in here? I need to access snacks &amp;amp; getSnackPrice.     }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;miniVend header &lt;/p&gt;&lt;pre&gt;&lt;code&gt;   #ifndef MINIVEND    #define MINIVEND    #include &amp;lt;string&amp;gt;    #include &quot;VendSlot.h&quot;    #include &quot;Snack.h&quot;    using std::string;    class miniVend    {    public:        miniVend(VendSlot, VendSlot, VendSlot, VendSlot, double); //constructor        int numEmptySlots();        double valueOfSnacks();        //void buySnack(int);        double getMoney();        ~miniVend(); //desructor    private:        VendSlot vendslot1; //declare all the vending slots.        VendSlot vendslot2; //declare all the vending slots.        VendSlot vendslot3; //declare all the vending slots.        VendSlot vendslot4; //declare all the vending slots.        double moneyInMachine; //money in the machine    };    #endif // !MINIVEND&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Snack.cpp &lt;/p&gt;&lt;pre&gt;&lt;code&gt;    #include &quot;Snack.h&quot;    #include &amp;lt;iostream&amp;gt;    #include &amp;lt;string&amp;gt;    using std::endl;    using std::string;    using std::cout;    using std::cin;    Snack::Snack() //default constructor    {        nameOfSnack = &quot;bottled water&quot;;        snackPrice = 1.75;        numOfCalories = 0;    }    Snack::Snack(string name, double price, int cals)    {        nameOfSnack = name;        snackPrice = price;        numOfCalories = cals;    }    Snack::~Snack()    {    }    string Snack::getNameOfSnack()    {        return nameOfSnack;    }    double Snack::getSnackPrice()    {        return snackPrice;    }    int Snack::getNumOfCalories()    {        return numOfCalories;    }Snack.h file #ifndef SNACK_CPP#define SNACK_CPP#include &amp;lt;string&amp;gt;using std::string;class Snack{private:    string nameOfSnack;    double snackPrice;    int numOfCalories;public:    Snack(); //default constructor    Snack(string name, double price, int cals); //overload constructor    ~Snack(); //destructor              //Accessor functions    string getNameOfSnack(); //returns name of snack    double getSnackPrice(); //returns the price of the snack    int getNumOfCalories(); //returns number of calories of snack};#endif // !SNACK_CPP&lt;/code&gt;&lt;/pre&gt;</Body>
<Tags>c++</Tags>
</question>
<answer>
<Body>&lt;p&gt;Assuming getSnackPrice() is public, and Snack.h does exist, you should just be able to call &lt;/p&gt;&lt;pre&gt;&lt;code&gt;snackObject.getSnackPrice() * ammount&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;what you need is friend keyword. Define the &lt;/p&gt;&lt;pre&gt;&lt;code&gt;  friend class className;&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;I don&#x27;t really understand why you don&#x27;t just implement &lt;code&gt;get()&lt;/code&gt;? Accessing private data is really bad. You are breaking the encapsulation. But if you really want to know (i.e. you should NOT do it, it is really BAD), then you just return a reference to a private data as shown below&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;class A{public:    A(int a) : x(a) {}    int &amp;amp;getPrivateDataBAD() { return x; }    void print() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; }private:    int x;};class B{public:    void print(int &amp;amp;s) { std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl; }};int main(){    A obj(2);    B bObj;    bObj.print( obj.getPrivateDataBAD() );    return 0;}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
