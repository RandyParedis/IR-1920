<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How do I find the median of a list in python</Title>
<Body>&lt;p&gt;I am trying to find the median of a list. I have tried it two ways and it hasn&#x27;t worked in either (I have imported what I need and the list is there) selfies is the name of the list&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def median():    return numpy.median(numpy.array(selfies))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;this is the error&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;ret = umr_sum(arr, axis, dtype, out, keepdims)&lt;/p&gt;    &lt;p&gt;TypeError: cannot perform reduce with flexible type&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;and the other way was&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def median():    med = statistics.median(selfies)    return med&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;the error is&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;return (data[i - 1] + data[i])/2&lt;/p&gt;    &lt;p&gt;TypeError: unsupported operand type(s) for /: &#x27;str&#x27; and &#x27;int&#x27;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Thank you in advance&lt;/p&gt;</Body>
<Tags>python</Tags>
</question>
<answer>
<Body>&lt;p&gt;Use a .sort() or .sorted() to sort your list according to how you want,then retrieve list[math.floor(len(list)/2)].&lt;/p&gt;&lt;p&gt;If you don&#x27;t need to sort it and just want the middle value, use&lt;/p&gt;&lt;pre&gt;&lt;code&gt;list[math.floor(len(list)/2)].&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;&lt;strong&gt;Hello User9123,&lt;/strong&gt;&lt;/p&gt;&lt;h1&gt;Main Use of the Medain() function&lt;/h1&gt;&lt;hr&gt;&lt;p&gt;This module provides functions for calculating &lt;code&gt;mathematical statistics of numeric (Real-valued) data&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Unless explicitly noted otherwise, these functions support int, float, decimal.Decimal and fractions.Fraction. Behaviour with other types (whether in the numeric tower or not) is currently unsupported. Mixed types are also undefined and implementation-dependent. If your input data consists of mixed types, you may be able to use map() to ensure a consistent result, e.g. map(float, input_data).&lt;/p&gt;&lt;h1&gt;Your Problem&lt;/h1&gt;&lt;hr&gt;&lt;p&gt;When you use this function for the string so it is not work properly some time so better i suggest you used custom function. I give the solution in my below code.&lt;/p&gt;&lt;h1&gt;Explanation Function Median()&lt;/h1&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;statistics.median(data)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Return the median (middle value) of numeric data, using the common “mean of middle two” method. If data is empty, StatisticsError is raised. data can be a sequence or iterator.  &lt;/p&gt;&lt;p&gt;The median is a robust measure of central location, and is less affected by the presence of outliers in your data. When the number of data points is odd, the middle data point is returned:&lt;/p&gt;&lt;h1&gt;Solution of Problem&lt;/h1&gt;&lt;hr&gt;&lt;p&gt;If you use this function for the numeric value so try this below code,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def getMedian(numericValues):  theValues = sorted(numericValues)  if len(theValues) % 2 == 1:    return theValues[(len(theValues)+1)/2-1]  else:    lower = theValues[len(theValues)/2-1]    upper = theValues[len(theValues)/2]    return (float(lower + upper)) / 2 print getMedian([0,1,2,3,4,5]) # output = 2.5&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are use median function for the string so try this below code,  &lt;/p&gt;&lt;pre&gt;&lt;code&gt;def medianFind(mystring):    return mystring[(len(mystring)-1)/2]  #len returns the length of the stringprint medianFind(&quot;vmr&quot;)  #prints m&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I hope my answer is helpful.&lt;br&gt;If any query so comment please.&lt;/p&gt;</Body>
</answer>
</qroot>
