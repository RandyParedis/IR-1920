<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>c++ loop wrongly jumped out on centOS7?</Title>
<Body>&lt;p&gt;i have a project that works well on ubuntu after compiling, the snippet is like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;void Backtest::start() {    std::cout &amp;lt;&amp;lt; &quot;start  !!&quot; &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; bars.size()&amp;lt;&amp;lt; std::endl;    int jj=0;    while(jj&amp;lt;bars.size()){        std::cout &amp;lt;&amp;lt; &quot;on bar &quot; &amp;lt;&amp;lt; jj&amp;lt;&amp;lt;std::endl;        newBar(&amp;amp;bars[jj]);        jj++;    }}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;on ubuntu everything works well, bars size is around 3020, but on centOS 7 it terminates at only jj =3, gdb output:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(gdb) nextstart !!3020407     count = 0;(gdb) 408     jj=0;(gdb) 409     while(jj&amp;lt;bars.size()){(gdb) 410 std::cout &amp;lt;&amp;lt; &quot;on bar &quot; &amp;lt;&amp;lt; jj&amp;lt;&amp;lt;std::endl;(gdb) on bar 0411         newBar(&amp;amp;bars[jj]);(gdb) 412         jj++;(gdb) 409     while(jj&amp;lt;bars.size()){(gdb) 410 std::cout &amp;lt;&amp;lt; &quot;on bar &quot; &amp;lt;&amp;lt; jj&amp;lt;&amp;lt;std::endl;(gdb) on bar 1411         newBar(&amp;amp;bars[jj]);(gdb) 412         jj++;(gdb) 409     while(jj&amp;lt;bars.size()){(gdb) 410 std::cout &amp;lt;&amp;lt; &quot;on bar &quot; &amp;lt;&amp;lt; jj&amp;lt;&amp;lt;std::endl;(gdb) on bar 2411         newBar(&amp;amp;bars[jj]);(gdb) 412         jj++;(gdb) 409     while(jj&amp;lt;bars.size()){(gdb) 410 std::cout &amp;lt;&amp;lt; &quot;on bar &quot; &amp;lt;&amp;lt; jj&amp;lt;&amp;lt;std::endl;(gdb) on bar 3411         newBar(&amp;amp;bars[jj]);(gdb) asd|100000.000000,100000.000000|get cash 100000.0412         jj++;(gdb) 409     while(jj&amp;lt;bars.size()){(gdb) 415 }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;at gdb 409 it weirdly gives empty loop and terminates, what is possibly wrong here???&lt;/p&gt;&lt;pre&gt;&lt;code&gt;void Backtest::newBar(Bar* b){    if(Number == count+1){        tempbars.push_back(*b);        crossLimitOrder();        strategyPy-&amp;gt;onBar(tempbars);        tempbars.clear();        count = 0;    }else{        tempbars.push_back(*b);        count ++;    }        }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PS newBar is something else in the project, it basically is calling a strategyPy to do something, and that will call a boost python module to call C++ function(which gives some API to python, including getCash(), thats why it prints out in debug info)&lt;/p&gt;</Body>
<Tags>c++,loops,centos,gdb</Tags>
</question>
<answer>
<Body>&lt;p&gt;It would be interesting to print the value of &lt;code&gt;jj&lt;/code&gt; just after &lt;code&gt;get cash&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;My crystal ball says that it would have a very large positive or negative value, in which case your problem is stack buffer overflow somewhere in &lt;code&gt;newBar&lt;/code&gt;, or one of the functions it calls.&lt;/p&gt;&lt;p&gt;Building your program with &lt;a href=&quot;https://github.com/google/sanitizers/wiki/AddressSanitizer&quot; rel=&quot;nofollow noreferrer&quot;&gt;Address Sanitzer&lt;/a&gt; (&lt;code&gt;g++ -fsanitize=address ...&lt;/code&gt;) should point you straight at the problem.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;i print the value of jj just after get cash but it says its still 3&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;You have to realize that&lt;/p&gt;&lt;ul&gt;&lt;li&gt;there is no magic (either &lt;code&gt;jj&lt;/code&gt; is not really 3, or your compiler is broken (very unlikely))&lt;/li&gt;&lt;li&gt;debugging is a skill&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;What is possibly happening is that GDB prints only the lower 32 bits of &lt;code&gt;jj&lt;/code&gt;, but the compiler uses entire 64-bit register (assuming 64-bit machine) to perform the comparison (and expects the high bits to all be 0). And something in &lt;code&gt;newBar&lt;/code&gt; sets the high bits of &lt;code&gt;jj&lt;/code&gt; to non-zero value.&lt;/p&gt;&lt;p&gt;Now, you can debug this in one of several ways:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;use &lt;code&gt;disas&lt;/code&gt; command, find the actual &lt;code&gt;cmp&lt;/code&gt; instruction, examine registers at time of comparison, or&lt;/li&gt;&lt;li&gt;change the type of &lt;code&gt;jj&lt;/code&gt; from &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;size_t&lt;/code&gt; (at least GDB will then not perform any truncation), or&lt;/li&gt;&lt;li&gt;run under Address Sanitizer (as already suggested).&lt;/li&gt;&lt;/ul&gt;</Body>
</answer>
</qroot>
