<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How can a deduced template type be viewed in the Xcode debugger?</Title>
<Body>&lt;p&gt;How can a deduced template type be viewed in the Xcode debugger?&lt;/p&gt;&lt;p&gt;Using examples from Item 1 in Meyers&#x27; Effective Modern C++ (2015), notice how the value of the variable, and its type, are visible in Xcode&#x27;s &quot;variables view,&quot; but there&#x27;s no way to see the resulting deduction of the variable T.&lt;/p&gt;&lt;p&gt;Is it possible to see the deduced type of T in the Xcode debugger?&lt;/p&gt;&lt;p&gt;My boss gave me &lt;code&gt;typeId&lt;/code&gt;, as shown below, but I would like to see the type directly in the debugger. Additionally, this command yields inconsistend results across IDEs; e.g., Xcode outputs &quot;i&quot; for an int, while Visual Studio outputs &quot;int.&quot;&lt;/p&gt;&lt;p&gt;Full executable and output shown below. Thx, Keith :^)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Xcode Screenshot&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/qUkM3.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/qUkM3.png&quot; alt=&quot;Xcode type deduction&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Minimal, complete, and verifiable example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;template &amp;lt;typename T&amp;gt;int case1a(T&amp;amp; param) {    return param;}template &amp;lt;typename T&amp;gt;int case1b(const T&amp;amp; param) {    std::cout &amp;lt;&amp;lt; &quot;Type ID   : &quot; &amp;lt;&amp;lt; typeid(T).name() &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; &quot;Type param: &quot; &amp;lt;&amp;lt; typeid(param).name() &amp;lt;&amp;lt; std::endl;    return param;}template &amp;lt;typename T&amp;gt;int case2(T&amp;amp;&amp;amp; param) {    return param;}template &amp;lt;typename T&amp;gt;int case3(T param) {    return param;}int main() {    int a(23);    const int ar(a);    const int &amp;amp; car = a;    float b(7.);    std::cout &amp;lt;&amp;lt; &quot;case1a(a): &quot; &amp;lt;&amp;lt; case1a(a) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; &quot;case1a(ar): &quot; &amp;lt;&amp;lt; case1a(ar) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; &quot;case1a(car): &quot; &amp;lt;&amp;lt; case1a(car) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; &quot;case1b(a): &quot; &amp;lt;&amp;lt; case1b(a) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; &quot;case1b(ar): &quot; &amp;lt;&amp;lt; case1b(ar) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; &quot;case1b(car): &quot; &amp;lt;&amp;lt; case1b(car) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; &quot;case1b(b): &quot; &amp;lt;&amp;lt; case1b(b) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; &quot;case2(a): &quot; &amp;lt;&amp;lt; case2(a) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; &quot;case2(ar): &quot; &amp;lt;&amp;lt; case2(ar) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; &quot;case2(car): &quot; &amp;lt;&amp;lt; case2(car) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; &quot;case3(a): &quot; &amp;lt;&amp;lt; case3(a) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; &quot;case3(ar): &quot; &amp;lt;&amp;lt; case3(ar) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; &quot;case3(car): &quot; &amp;lt;&amp;lt; case3(car) &amp;lt;&amp;lt; std::endl;    std::cout &amp;lt;&amp;lt; std::endl;    return 0;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;case1a(a): 23case1a(ar): 23case1a(car): 23case1b(a): Type ID   : iType param: i23case1b(ar): Type ID   : iType param: i23case1b(car): Type ID   : iType param: i23case1b(b): Type ID   : fType param: f7case2(a): 23case2(ar): 23case2(car): 23case3(a): 23case3(ar): 23case3(car): 23Program ended with exit code: 0&lt;/code&gt;&lt;/pre&gt;</Body>
<Tags>c++,xcode,c++11,templates,type-deduction</Tags>
</question>
</qroot>
