<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>aiohttp Websocket client and HTTP server</Title>
<Body>&lt;p&gt;I&#x27;m writing an application that needs to take in events from two sources. Some events will come from a Websocket client connection, and some will come from incoming HTTP requests. Is it possible with aiohttp to have both of these listeners in the same application, or do I need two separate executables?&lt;/p&gt;&lt;p&gt;I currently have a function that takes websocket events, and calls a callback on each event&lt;/p&gt;&lt;pre&gt;&lt;code&gt;async def callback(msg):    print(msg)async def websocket():    session = aiohttp.ClientSession()    async with session.ws_connect(&#x27;http://example.org/websocket&#x27;) as ws:        async for msg in ws:            if msg.type == aiohttp.WSMsgType.TEXT:                await callback(msg.data)            elif msg.type == aiohttp.WSMsgType.CLOSED:                break            elif msg.type == aiohttp.WSMsgType.ERROR:                break&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The problem is that this blocks forever, so I don&#x27;t know how I could integrate this with the aiohttp server. If I do:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;await websocket()aiohttp.web.run_app(app)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;then &lt;code&gt;web.run_app&lt;/code&gt; is never called. Is there some way to accomplish this? It seems like the ideal case for asyncio, multiple things handling multiple events asynchronously. How do I do it?&lt;/p&gt;</Body>
<Tags>python,python-asyncio,aiohttp</Tags>
</question>
<answer>
<Body>&lt;p&gt;I was able to accomplish my goals by using the &lt;code&gt;on_startup&lt;/code&gt; handler of my aiohttp app.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;async def callback(msg):    print(msg)async def websocket(session):    async with session.ws_connect(&#x27;http://example.org/websocket&#x27;) as ws:        async for msg in ws:            if msg.type == aiohttp.WSMsgType.TEXT:                await callback(msg.data)            elif msg.type == aiohttp.WSMsgType.CLOSED:                break            elif msg.type == aiohttp.WSMsgType.ERROR:                breakasync def init(app):    session = aiohttp.ClientSession()    app[&#x27;websocket_task&#x27;] = app.loop.create_task(websocket(session))app = web.Application()app.on_startup.append(init)&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
