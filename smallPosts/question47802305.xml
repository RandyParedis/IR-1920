<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Iterating through QFutureSynchronizer&lt;T&gt;::results</Title>
<Body>&lt;p&gt;Can someone tell me what is wrong with these pieces of code :&lt;/p&gt;&lt;pre&gt;&lt;code&gt;std::vector&amp;lt;double&amp;gt; vUp;QFuture&amp;lt;double&amp;gt; tu, td;foreach(boost::tie(tu, td), boost::combine(Up_corr.futures(), Down_corr.futures())){   vUp.push_back((tu.result()+td.result())*0.5); }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I got the following error at run time:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Thread 1: EXC_BAD_ACCESS (code=1, address=0x51)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Up_corr and Down_corr are both QFutureSynchronizer and are well defined as the third methods present in this thread is working. Also, before passing through the above loop, I am waiting that both, Up_corr and Down_corr QtConcurent::run are finished.&lt;/p&gt;&lt;p&gt;This variant of the code is also not working&lt;/p&gt;&lt;pre&gt;&lt;code&gt;std::vector&amp;lt;double&amp;gt; vUp;QList&amp;lt; QFuture&amp;lt;double&amp;gt; &amp;gt;::const_iterator tu   = Up_corr.futures().cbegin();QList&amp;lt; QFuture&amp;lt;double&amp;gt; &amp;gt;::const_iterator td = Down_corr.futures().cbegin();for(size_t iCh = 0; iCh &amp;lt; 32; iCh++){     vUp.push_back((tu-&amp;gt;result()+td-&amp;gt;result())*0.5);     tu++;     td++;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It gives the same error when trying to access tu-&gt;result() or td-&gt;result().&lt;/p&gt;&lt;p&gt;The only method which is working is:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;std::vector&amp;lt;double&amp;gt; v1;std::vector&amp;lt;double&amp;gt; v2;foreach(QFuture&amp;lt;double&amp;gt; thread, Up_corr.futures())       v1.push_back(thread.result());foreach(QFuture&amp;lt;double&amp;gt; thread, Down_corr.futures())       v2.push_back(thread.result());for(size_t iCh = 0; iCh &amp;lt; 32; iCh++)       vUp.push_pack((v1[iCh]+v2[iCh])*0.5);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Why is the last one working while the two other failed with BAD ACCESS?&lt;/p&gt;&lt;p&gt;The last methods, which is working, is not optimal: to fill one vector, I will need three loops. For 32 elements it isn&#x27;t a big deal, but, I will also need to deal with List&gt; of 2k elements and reducing timing is my objective.&lt;/p&gt;</Body>
<Tags>c++,boost,iterator,qt5,qtconcurrent</Tags>
</question>
<answer>
<Body>&lt;p&gt;I donâ€™t know the &lt;code&gt;foreach&lt;/code&gt; macro but assuming it is similar to range-based &lt;code&gt;for&lt;/code&gt; it keeps the result of &lt;code&gt;futures()&lt;/code&gt; alive. The other variations use this result as part of the expression and then let it die: only a temporary bound directly to a &lt;code&gt;const&amp;amp;&lt;/code&gt; or to a &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; is kept alive. Other temporaries used in an expression are destroyed at the end of the full expression. You may want to try something like&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// ...auto&amp;amp;&amp;amp; ucf = Up_corr.futures();auto&amp;amp;&amp;amp; dcf = Down_corr.futures();foreach(boost::tie(tu, td), boost::combine(ucf, dcf)){    vUp.push_back((tu.result()+td.result())*0.5);}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
