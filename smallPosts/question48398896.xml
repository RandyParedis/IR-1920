<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How to filter the query_set by multi-params?</Title>
<Body>&lt;p&gt;How to filter the query_set by multi-params? &lt;/p&gt;&lt;pre&gt;&lt;code&gt;class UserListAPIView(ListAPIView):    &quot;&quot;&quot;    return the user list    &quot;&quot;&quot;    pagination_class = UserPageNumberPagination    class Meta:       ordering = [&#x27;-id&#x27;]    def get_serializer_class(self):        return UserListSerializer    def get_queryset(self):        username = self.request.query_params.get(&quot;username&quot;)        real_name = self.request.query_params.get(&quot;real_name&quot;)        phone = self.request.query_params.get(&quot;phone&quot;)        company_name = self.request.query_params.get(&quot;company_name&quot;)        return User.objects.filter(            is_admin=False,            is_staff=False,            is_superuser=False,            username=username,            real_name=real_name,            phone=phone,            company_name=company_name            )  # if `username, real_name, phone, company_name` all are None, there gets `[]`&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The serializer:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class UserListSerializer(ModelSerializer):    &quot;&quot;&quot;    user list serializer    &quot;&quot;&quot;    username = serializers.CharField(allow_null=True, allow_blank=True)    real_name = serializers.CharField(allow_null=True, allow_blank=True)    phone = serializers.CharField(allow_null=True, allow_blank=True)    company_name = serializers.CharField(allow_null=True, allow_blank=True)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You see, my &lt;code&gt;username , real_name, phone, company_name&lt;/code&gt; all are &lt;code&gt;allow_null&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;I want to query all the user that meet the conditions. &lt;/p&gt;&lt;p&gt;But gets &lt;code&gt;[]&lt;/code&gt;, when I do not pass the &lt;code&gt;username, real_name, phone, company_name&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;I want to if the &lt;code&gt;username&lt;/code&gt; is None, it do not filter the &lt;code&gt;username&lt;/code&gt;, if &lt;code&gt;real_name&lt;/code&gt; is None, it do not filter the &lt;code&gt;real_name&lt;/code&gt;. (I means it do not filter out it)&lt;/p&gt;&lt;p&gt;I have a idea, but it is fit for less fields, if there is only one &lt;code&gt;username&lt;/code&gt; field:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def get_queryset(self):    username = self.request.query_params.get(&quot;username&quot;)    if username == None or username == &#x27;&#x27;:        return User.objects.filter(                is_admin=False,                is_staff=False,                is_superuser=False)    else:         return User.objects.filter(                is_admin=False,                is_staff=False,                is_superuser=False,                username=username)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But there are so many fields, I can not write all judge conditions.I tried use &lt;/p&gt;&lt;pre&gt;&lt;code&gt;    return User.objects.filter(            is_admin=False,            is_staff=False,            is_superuser=False,            username__contains=username,            real_name__contains=real_name,            phone__contains=phone,            company_name__contains=company_name            ) &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But do not work too. &lt;/p&gt;&lt;p&gt;Is there a good way to realize this requirement? &lt;/p&gt;</Body>
<Tags>python,django,django-queryset</Tags>
</question>
<answer>
<Body>&lt;p&gt;You can create a dict then pass it using keyword expansions.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;filters = {&#x27;{}__contains&#x27;.format(key): value           for key, value in query_params.items()           if value is not None}return User.objects.filter(**filters)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If there is a pagination parameter, it could be excluded with:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;filters = {&#x27;{}__contains&#x27;.format(key): value               for key, value in query_params.items()               if value is not None and key != &quot;page&quot;}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;I hope this is what you are looking for.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;from django.db.models import Qobj_list = User.objects.filter(                is_admin=False,                is_staff=False,                is_superuser=False,                Q(username__contains=username)|                Q(real_name__contains=real_name)|                Q(phone__contains=phone) |                Q(company_name__contains=company_name)                )return obj_list&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;let me know if this work for you.&lt;/p&gt;</Body>
</answer>
</qroot>
