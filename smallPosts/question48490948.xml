<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How do have the same drawn object appear at the same time? (pygame)</Title>
<Body>&lt;p&gt;I&#x27;m trying to get the red rectangle (note) to show up more than once on the screen instead of having only 1 rectangle appear at one time. Is there any way I could achieve this without creating multiple identical rectangles and deleting more code? I&#x27;m a beginner to pygame so a simple answer would definitely be appreciated.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import pygameimport timepygame.init()cont = TruedelNote = FalsedelUser = FalsedelScoreUpdate = Falsereset = Falsewhite = (255, 255, 255)black = (0, 0, 0)red = (255, 0, 0)userColor = (0, 255, 0)grey = (224, 224, 224)displayX = 800displayY = 600noteY = -600currentScore = 0speed = 5gameDisplay = pygame.display.set_mode((displayX, displayY))pygame.display.set_caption(&quot;game&quot;)clock = pygame.time.Clock()def drawUser():    user = pygame.draw.rect(gameDisplay, userColor, [375, 430, 50, 50])def drawNote():    note = pygame.draw.rect(gameDisplay, red, [385, noteY, 30, 30])def crashDisplay():    font = pygame.font.Font(&quot;freesansbold.ttf&quot;, 115)    text = font.render(str(currentScore), True, black)    gameDisplay.blit(text, [150, 200])def scoreUpdate():    fontS = pygame.font.Font(&quot;freesansbold.ttf&quot;, 30)    textS = fontS.render(str(currentScore), True, black)    gameDisplay.blit(textS, [0, 0])while cont is True:    if reset is True:        reset = False        delNote = False    gameDisplay.fill(grey)    for event in pygame.event.get():        if event.type == pygame.KEYDOWN:            if event.key == pygame.K_RIGHT and noteY &amp;gt; 420 and noteY &amp;lt; 490:                delNote = True                reset = True            if event.key == pygame.K_RIGHT:                 userColor = (0, 150, 0)        if event.type == pygame.KEYUP:            if event.key == pygame.K_RIGHT:                userColor = (0, 255, 0)        if event.type == pygame.QUIT:            cont = False    if delScoreUpdate is False:        scoreUpdate()    if delUser is False:        drawUser()    if delNote is False:        noteY += speed        drawNote()    if reset is True:        noteY = -600        noteY += speed    if noteY &amp;gt; 600:        delUser = True        delScoreUpdate = True        delNote = True        crashDisplay()    pygame.display.update()    if delScoreUpdate is False:        clock.tick(60)        currentScore += 0.1        currentScore = round(currentScore, 4)pygame.quit()quit()&lt;/code&gt;&lt;/pre&gt;</Body>
<Tags>python,pygame,draw,rect</Tags>
</question>
<answer>
<Body>&lt;p&gt;Define a list with the note positions (&lt;code&gt;notes&lt;/code&gt;) and iterate over this list in your while loop to move and draw the notes and also for the collision detection in the event loop.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import pygamepygame.init()gameDisplay = pygame.display.set_mode((800, 600))clock = pygame.time.Clock()cont = Truered = (255, 0, 0)userColor = (0, 255, 0)grey = (224, 224, 224)speed = 5notes = [0, 100, 200]while cont:    # Event handling.    for event in pygame.event.get():        if event.type == pygame.KEYDOWN:            if event.key == pygame.K_RIGHT:                userColor = (0, 150, 0)                # Use enumerate to get the index and the                # item at the same time.                for i, noteY in enumerate(notes):                    # If the player rect collides with a note.                    if noteY &amp;gt; 420 and noteY &amp;lt; 490:                        notes[i] -= 660  # Reset the position.        elif event.type == pygame.KEYUP:            if event.key == pygame.K_RIGHT:                userColor = (0, 255, 0)        elif event.type == pygame.QUIT:            cont = False    # Game logic.    for i in range(len(notes)):  # Loop over the notes.        notes[i] += speed  # Move the note.        if notes[i] &amp;gt;= 600:  # If below the screen ...            notes[i] -= 660  # reset the position.    # Draw everything.    gameDisplay.fill(grey)    pygame.draw.rect(gameDisplay, userColor, [375, 430, 50, 50])    for noteY in notes:        pygame.draw.rect(gameDisplay, red, [385, noteY, 30, 30])    pygame.display.update()    clock.tick(60)pygame.quit()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could also put &lt;a href=&quot;http://www.pygame.org/docs/ref/rect.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pygame.Rect&lt;/code&gt;s&lt;/a&gt; into the list instead of just the y-position. They have some handy collision detection methods and attributes.&lt;/p&gt;</Body>
</answer>
</qroot>
