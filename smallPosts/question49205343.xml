<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Sending Terminal commands from a running script on remote back to my local?</Title>
<Body>&lt;p&gt;I&#x27;m developing on a remote server which I login using ssh and develop using vi. I however need to send Terminal notification commands &lt;code&gt;osascript -e &quot;display notification {} {} {}&quot;&lt;/code&gt; and such commands back to my local terminal so I can get sound/mac notifications on my system. How do I achieve this?&lt;/p&gt;&lt;p&gt;I know I can use &lt;code&gt;import os; os.sytem(&#x27;command&#x27;)&lt;/code&gt; for the script on server to send terminal commands on the machine its running in i.e., the server itself, but is there a similar command to send commands back to my local ? Ideally, I need this to be done from the scripts itself- because I have multiple triggers for notifications to be done.&lt;/p&gt;</Body>
<Tags>python,ssh,remote-access,openssh,python-os</Tags>
</question>
<answer>
<Body>&lt;p&gt;You need to use some sockets&lt;/p&gt;&lt;p&gt;On your server machine you need something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import socketIP = &quot;0.0.0.0&quot;  # Your Local Machine IPPORT = 5200  # Your Local Machine Listening Portdef send_message(msg):    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    s.connect((IP, PORT))    s.send(bytes(msg, &#x27;UTF-8&#x27;))    data = s.recv(4096)    s.close()    print(data)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use the method where ever you need, the only argument it takes is msg, simply it&#x27;s the command you need to send to your local machine&lt;/p&gt;&lt;p&gt;On your local machine this script should do what you need:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import socketimport osIP = &quot;0.0.0.0&quot;  # 0.0.0.0 Means every available IP to assign, but you need to use your external IP on the script that u will use on serverPORT = 5200  # The port you want to listen ons = socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.bind((IP, PORT))s.listen(1)while True:    conn, addr = s.accept()    print(&quot;Command from {}&quot;.format(addr))    data = conn.recv(4096)    if not data: continue    if data == b&#x27;stop&#x27;: break  # This line just defines a word that will make your local machine stop listening.    print(data)    command = data.decode(&#x27;UTF-8&#x27;)    os.system(command)    conn.send(data)conn.close()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You need to run The local machine script first&lt;/p&gt;</Body>
</answer>
</qroot>
