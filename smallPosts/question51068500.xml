<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>const char* vs char for array (single and double quotation) in c++</Title>
<Body>&lt;p&gt;I am new to C++&lt;/p&gt;&lt;p&gt;1)&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;using namespace std;int main() {    char arr[4];    arr[0] = &#x27;H&#x27;;    arr[1] = &#x27;e&#x27;;    arr[2] = &#x27;l&#x27;;    arr[3] = &#x27;o&#x27;;    for (int i = 0; i &amp;lt; 4; i++) {        cout &amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; endl;    }    system(&quot;pause&quot;);}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2)&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;using namespace std;int main() {    const char* arr[4];    arr[0] = &quot;H&quot;;    arr[1] = &quot;e&quot;;    arr[2] = &quot;l&quot;;    arr[3] = &quot;o&quot;;    for (int i = 0; i &amp;lt; 4; i++) {        cout &amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; endl;    }    system(&quot;pause&quot;);}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If I use &lt;code&gt;&quot;&quot;&lt;/code&gt; for &lt;code&gt;char[]&lt;/code&gt; array, or &lt;code&gt;&#x27;&#x27;&lt;/code&gt; for &lt;code&gt;const char*[]&lt;/code&gt; array, it doesn&#x27;t work.&lt;/p&gt;&lt;p&gt;Could somebody help me figure out the difference why it happens, and explain what &lt;code&gt;const char*&lt;/code&gt; actually means.&lt;/p&gt;</Body>
<Tags>c++,visual-c++</Tags>
</question>
<answer>
<Body>&lt;blockquote&gt;  &lt;p&gt;But if i use &quot;&quot; for char array or &#x27;&#x27; for const char* array it doesn&#x27;t  work&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In the first example you create an array of 4 &lt;code&gt;chars&lt;/code&gt; - &lt;code&gt;char arr[4];&lt;/code&gt; This means that every element of &lt;code&gt;arr&lt;/code&gt; is a &lt;code&gt;char&lt;/code&gt;. &lt;code&gt;&#x27;H&#x27;&lt;/code&gt; is a &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;&#x27;e&#x27;&lt;/code&gt; is a &lt;code&gt;char&lt;/code&gt;, etc. So when you assign a &lt;code&gt;char&lt;/code&gt; to array element that is a &lt;code&gt;char&lt;/code&gt;, it works.&lt;/p&gt;&lt;p&gt;In your second example you create array of 4 pointers to &lt;code&gt;const char&lt;/code&gt; - &lt;code&gt;const char* arr[4];&lt;/code&gt; This means every element of your array is a pointer, and it points to &lt;code&gt;char&lt;/code&gt; which you promise not to change. &lt;code&gt;&quot;H&quot;&lt;/code&gt; is a string literal, which is an array of 2 - a &lt;code&gt;char&lt;/code&gt; &lt;code&gt;&#x27;H&#x27;&lt;/code&gt; and a terminating null &lt;code&gt;&#x27;\0&#x27;&lt;/code&gt;. This array decays into a pointer to its first element, which is &lt;code&gt;&#x27;H&#x27;&lt;/code&gt; - a &lt;code&gt;const char&lt;/code&gt; (same for the rest of letters). Your array is array of pointers to &lt;code&gt;const char&lt;/code&gt;, you assign pointer to &lt;code&gt;const char&lt;/code&gt;, so it works.&lt;/p&gt;&lt;p&gt;If you swap &lt;code&gt;&#x27;&#x27;&lt;/code&gt; with &lt;code&gt;&quot;&quot;&lt;/code&gt; it will not work because the types of array elements will not match with data you will be assigning.&lt;/p&gt;</Body>
</answer>
</qroot>
