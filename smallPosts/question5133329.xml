<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>what happen to my code?</Title>
<Body>&lt;p&gt;I am new to C++. I am really confused between C and C++. I am familair with C and java, but not C++. Today I am going to write a linked list program using C++. But to what happened to my code ???          Thanks.&lt;/p&gt;&lt;p&gt;Raymond&lt;/p&gt;&lt;p&gt;the result:Unhandled exception at 0x00412656 in 09550978d.exe: 0xC0000005: Access violation writing location 0xcdcdcdcd.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt; using namespace std;struct word{    bool empty;    string name;    int count;    word* next;};typedef struct word word;word* create(word* theList){    word* head = (word*)malloc(sizeof(word));    head-&amp;gt;empty = false;    head-&amp;gt;name = &quot;&quot;;    head-&amp;gt;next = 0;    return head;}void print(word* theList){    word* current = theList;    while(current!=0)    {   cout &amp;lt;&amp;lt; current-&amp;gt;name &amp;lt;&amp;lt; &quot; : &quot; &amp;lt;&amp;lt; current-&amp;gt;count &amp;lt;&amp;lt; &quot; \n&quot; ;        current = current-&amp;gt;next;    }}void add(string myString, word* theList){    //word* newWord = (word*)malloc(sizeof(word));    if( theList-&amp;gt;empty == false )    {        theList-&amp;gt;empty = true;        theList-&amp;gt;name = myString;        theList-&amp;gt;next = 0;    }    else    {        word* current = theList;        while(current-&amp;gt;next!=0)        {            current = current-&amp;gt;next;        }        word* newWord = (word*)malloc(sizeof(word));        newWord-&amp;gt;empty = true;        newWord-&amp;gt;name = myString;        newWord-&amp;gt;next = 0;        current-&amp;gt;next = newWord;    }}int main(void){    word* theList = 0;    theList = create(theList);    add(&quot;Hello&quot;, theList);    //add(&quot;world&quot;, theList);}#include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt;using namespace std;class word{public:    string name;    int count;    word *next;word (string name);};word::word (string myName){    name = myName;    next = NULL;    count = 1;}class List{public:    bool isEmpty;    word* theHead;List();List(word* aHead);void print();void add(string myString);void search(string myString);};List::List(){    isEmpty = true;}List::List(word* aHead){    isEmpty = false;    theHead = aHead;}void List::add(string myString){    word* newWord = new word(myString);    if (isEmpty == true)    {        isEmpty = false;        theHead = newWord;    }    else    {        word* current = theHead;        if ( current-&amp;gt;next == NULL)        {            if( myString.compare(current-&amp;gt;name) == 0 )            {                current-&amp;gt;count = current-&amp;gt;count + 1;                return;            }        }        else        {            while ( current-&amp;gt;next != NULL )            {                if( myString.compare(current-&amp;gt;name) == 0 )                {                    current-&amp;gt;count = current-&amp;gt;count + 1;                    return;                }                current = current-&amp;gt;next;            }        }        current-&amp;gt;next = newWord;    }}void List::print (){    if (isEmpty)    {        cout &amp;lt;&amp;lt; &quot;nothing in the list&quot;;    }    else    {        word* current = theHead;        while(current !=  NULL)        {        cout &amp;lt;&amp;lt; current-&amp;gt;name &amp;lt;&amp;lt; &quot; : &quot; &amp;lt;&amp;lt; current-&amp;gt;count &amp;lt;&amp;lt; &quot; \n&quot; ;        current = current-&amp;gt;next;        }    }}void List::search(string myString){    if (isEmpty)    {        cout &amp;lt;&amp;lt; &quot;The word : &quot; &amp;lt;&amp;lt; myString &amp;lt;&amp;lt; &quot; is not in the List.\n&quot;;    }    else    {        word* current = theHead;        while( current != NULL )        {            if( myString.compare(current-&amp;gt;name) == 0 )            {                cout &amp;lt;&amp;lt; &quot;The word : &quot; &amp;lt;&amp;lt; myString &amp;lt;&amp;lt; &quot; is in the List.\n&quot;;                return;            }            else            {                current = current-&amp;gt;next;            }        }        cout &amp;lt;&amp;lt; &quot;The word : &quot; &amp;lt;&amp;lt; myString &amp;lt;&amp;lt; &quot; is not in the List.\n&quot;;    }    return;}int main(void){    List theList = List();    string str1 = &quot;Hello&quot;;    string str2 = &quot;world&quot;;    theList.add(str1);    theList.add(str2);    theList.add(str1);    theList.search(&quot;Hello&quot;);    theList.search(&quot;You&quot;);    theList.print();    int i;    scanf(&quot;%d&quot;, &amp;amp;i);}&lt;/code&gt;&lt;/pre&gt;</Body>
<Tags>c++,pointers,linked-list</Tags>
</question>
<answer>
<Body>&lt;p&gt;For one,  in Add function   &lt;/p&gt;&lt;pre&gt;&lt;code&gt;if( theList-&amp;gt;empty == false ) {     theList-&amp;gt;empty = true;     theList-&amp;gt;name = myString;     theList-&amp;gt;next = 0; }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;should be opposite - if list-&gt;empty == true, then set it to false.&lt;/p&gt;&lt;p&gt;As for the unhandled exception, a simple step by step 5 minute debugging session will both help you find your errors and will make you like and use the debugger. I mean it. &lt;strong&gt;DO TRY DEBUGGING&lt;/strong&gt;!!!&lt;/p&gt;&lt;p&gt;my2c&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Most obvious problem: use new and not malloc to allocate new objects: malloc doesn&#x27;t call constructor and one design principle of C++ is that constructors are called before any other operations on an object.&lt;/p&gt;&lt;p&gt;BTW, you code look like C using only the most basic C++ features.  It would never be written like this by someone knowing C++ (word would have a constructor and private member, even for people using C++ as a &quot;better C&quot;).&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;You should be using the &lt;code&gt;new&lt;/code&gt; operator instead of &lt;code&gt;malloc&lt;/code&gt;. See the difference &lt;a href=&quot;https://stackoverflow.com/questions/184537/in-what-cases-do-i-use-malloc-vs-new&quot;&gt;here&lt;/a&gt;. Also why use &lt;code&gt;struct&lt;/code&gt;s and &lt;code&gt;typedef&lt;/code&gt;s when c++ allows you to make a &lt;code&gt;class&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Here is my version of your code, its not bug free yet but it should illustrate how to use &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;classes&lt;/code&gt;. I will try to fix it fully and update you.&lt;/p&gt;&lt;p&gt;Also note that within the class structure of c++ you automatically get a &lt;code&gt;this&lt;/code&gt; pointer with member functions that acts as a pointer to the class, so you no longer have to pass in &lt;code&gt;word* theList&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Edit: I updated with working code, the only thing that doesn&#x27;t work is the count aspect to the list. Otherwise notice that there are two classes, &lt;code&gt;List&lt;/code&gt; interfaces with &lt;code&gt;word&lt;/code&gt; to create a linked list, I have not included any memory management aspects to the code (which would not be so hard using the c++ destructor, if you need such facilities please indicate so in the comments, and I will be sure to add.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;#60;iostream&amp;#62;#include &amp;#60;string&amp;#62;using namespace std;&lt;/p&gt;&lt;p&gt;class word{public:    string name;    int count;    word *next;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;word (string name);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;};&lt;/p&gt;&lt;p&gt;word::word (string myName){    name = myName;    next = NULL;    count = 0;}&lt;/p&gt;&lt;p&gt;class List{public:    bool isEmpty;    word* theHead;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;List();List(word* aHead);void print();void add(string myString);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;};&lt;/p&gt;&lt;p&gt;List::List(){    isEmpty = true;}&lt;/p&gt;&lt;p&gt;List::List(word* aHead){    isEmpty = false;    theHead = aHead;}&lt;/p&gt;&lt;p&gt;void List::add(string myString){    word* newWord = new word(myString);    if (isEmpty == true)    {        isEmpty = false;        theHead = newWord;    }    else    {        word* current = theHead;        while(current-&gt;next != NULL)        {            current = current-&gt;next;        }        current-&gt;next = newWord;    }}void List::print (){    if (isEmpty)    {        cout &amp;lt;&amp;lt; &quot;nothing in the list&quot;;    }    else    {        word* current = theHead;        while(current !=  NULL)        {        cout &amp;lt;&amp;lt; current-&gt;name &amp;lt;&amp;lt; &quot; : &quot; &amp;lt;&amp;lt; current-&gt;count &amp;lt;&amp;lt; &quot; \n&quot; ;        current = current-&gt;next;        }    }}&lt;/p&gt;&lt;p&gt;int main(void){    List theList = List();    string str1 = &quot;Hello&quot;;    string str2 = &quot;world&quot;;    theList.add(str1);    theList.add(str2);    theList.print();}&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Edit: Here is the destructor to free the allocated memory, make sure to add the prototype &lt;code&gt;~List()&lt;/code&gt; in the class declaration:&lt;pre&gt;&lt;code&gt;List::~List(){    if (!isEmpty)    {        word* prev = NULL;        word* current = theHead;        while(current !=  NULL)        {            prev = current;            current = current-&gt;next;            delete prev;        }    }}&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Hope this helps.&lt;/p&gt;</Body>
</answer>
</qroot>
