<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Using global C++object from C crashes application</Title>
<Body>&lt;p&gt;This is my first post, I&#x27;m new to this site, but I&#x27;ve been lurking around for a while now. I&#x27;ve got a good knowledge of C and very limited knowledge of C++. I guess. I&#x27;m on Windows (XPx64), VS2008.&lt;/p&gt;&lt;p&gt;I&#x27;m trying to wrap a C++ library, &lt;a href=&quot;http://arxiv.org/abs/physics/0408067&quot; rel=&quot;nofollow&quot;&gt;kdtree2&lt;/a&gt;, so that I can use it from C. The main issues relate to accessing the kdtree2 and kdtree2_result_vector classes. As the authors ftp server does not respond I&#x27;ve uploaded a copy of the original distribution &lt;a href=&quot;http://www65.zippyshare.com/v/16343620/file.html&quot; rel=&quot;nofollow&quot;&gt;kdtree2 src&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Just some quick info on the kd-tree (a form of a binary tree), &quot;&#x27;the data&#x27; are coordinates in n-dimensional Cartesian space and an index. What it is used for are nearest neighbour searches, so after constructing the tree (which will not be modified), one can query the tree for various types of nn-searches. The results in this case are returned in a vector object of structs (c-like structs).&lt;/p&gt;&lt;pre&gt;&lt;code&gt;struct kdtree2_result {  //   // the search routines return a (wrapped) vector  // of these.   //public:  float dis;  // its square Euclidean distance  int idx;    // which neighbor was found}; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;My imagined solution is to have an array of kdtree2 objects (one per thread). For the kdtree2_result_vector class I haven&#x27;t got a solution yet as I&#x27;m not getting past first base. &lt;strong&gt;It is not necessary to access the kdtree2 class directly&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;I only need to fill it with data and then use it (as the second function below is an example of). For this I&#x27;ve defined:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;kdtree2 *global_kdtree2;extern &quot;C&quot; void new_kdtree2 ( float **data, const int n, const int dim, bool arrange ) {    multi_array_ref&amp;lt;float,2&amp;gt; kdtree2_data ( ( float * ) &amp;amp;data [ 0 ][ 0 ], extents [ n ][ dim ], c_storage_order ( ) );    global_kdtree2 = new kdtree2 ( kdtree2_data, arrange );}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For then using that tree, I&#x27;ve defined:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;extern &quot;C&quot; void n_nearest_around_point_kdtree2 ( int idxin, int correltime, int nn ) {     kdtree2_result_vector result;    global_kdtree2-&amp;gt;n_nearest_around_point ( idxin, correltime, nn, result );}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;kdtree2_result_vector is derived from the vector class. This compiles without error, and the resulting library can be linked and it&#x27;s C-functions accessed from C.&lt;/p&gt;&lt;p&gt;The problem is that the invocation of n_nearest_around_point_kdtree2 crashes the program. I suspect somehow between setting up the tree and using it in the second function call, the tree somehow gets freed/destroyed. The calling c-test-program is posted below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;stdbool.h&amp;gt;#include &quot;kdtree2.h&quot;#define MALLOC_2D(type,x,y) ((type**)malloc_2D_kdtree2((x),(y),sizeof(type)))void **malloc_2D_kdtree2 ( const int x, const int y, const int type_size ) {    const int y_type_size = y * type_size;    void** x_idx = ( void ** ) malloc ( x * ( sizeof ( void ** ) + y_type_size ) );    if ( x_idx == NULL )        return NULL;    char* y_idx = ( char * ) ( x_idx + x );    for ( int i = 0; i &amp;lt; x; i++ )        x_idx [ i ] = y_idx + i * y_type_size;    return x_idx;}int main ( void ) {    float **data = MALLOC_2D ( float, 100, 3 );    for ( int i = 0; i &amp;lt; 100; i++ )        for ( int j = 0; j &amp;lt; 3; j++ )             data [ i ][ j ] = ( float ) ( 3 * i + j );    // this works fine    tnrp ( data, 100, 3, false );    new_kdtree2 ( data, 100, 3, false );    // this crashes the program    n_nearest_around_point_kdtree2 ( 9, 3, 6 );    delete_kdtree2 ( );    free ( data );    return 0;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As far as I can see, searching the internet, it should work, but I&#x27;m obviously missing something vital in the brave (for me) new world of C++.&lt;/p&gt;&lt;p&gt;EDIT:&lt;/p&gt;&lt;p&gt;Resolution, thanks to larsmans. I&#x27;ve defined the following class (derived from what larsmans posted earlier):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class kdtree {private:       float **data;    multi_array_ref&amp;lt;float,2&amp;gt; data_ref;    kdtree2 tree;public:    kdtree2_result_vector result;    kdtree ( float **data, int n, int dim, bool arrange ) :        data_ref ( ( float * ) &amp;amp;data [ 0 ][ 0 ], extents [ n ][ dim ], c_storage_order ( ) ),        tree ( data_ref, arrange )        {        }    void n_nearest_brute_force ( std::vector&amp;lt;float&amp;gt;&amp;amp; qv ) {        tree.n_nearest_brute_force ( qv, result ); }    void n_nearest ( std::vector&amp;lt;float&amp;gt;&amp;amp; qv, int nn ) {        tree.n_nearest ( qv, nn, result ); }    void n_nearest_around_point ( int idxin, int correltime, int nn ) {        tree.n_nearest_around_point ( idxin, correltime, nn, result ); }    void r_nearest ( std::vector&amp;lt;float&amp;gt;&amp;amp; qv, float r2 ) {        tree.r_nearest ( qv, r2, result ); }    void r_nearest_around_point ( int idxin, int correltime, float r2 ) {        tree.r_nearest_around_point ( idxin, correltime, r2, result ); }    int r_count ( std::vector&amp;lt;float&amp;gt;&amp;amp; qv, float r2 ) {        return tree.r_count ( qv, r2 ); }    int r_count_around_point ( int idxin, int correltime, float r2 ) {        return tree.r_count_around_point ( idxin, correltime, r2 ); }};&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code to call these functions from C:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;kdtree* global_kdtree2 [ 8 ];extern &quot;C&quot; void new_kdtree2 ( const int thread_id, float **data, const int n, const int dim, bool arrange ) {    global_kdtree2 [ thread_id ] = new kdtree ( data, n, dim, arrange );}extern &quot;C&quot; void delete_kdtree2 ( const int thread_id ) {    delete global_kdtree2 [ thread_id ];}extern &quot;C&quot; void n_nearest_around_point_kdtree2 ( const int thread_id, int idxin, int correltime, int nn, struct kdtree2_result **result ) {     global_kdtree2 [ thread_id ]-&amp;gt;n_nearest_around_point ( idxin, correltime, nn );    *result = &amp;amp;( global_kdtree2 [ thread_id ]-&amp;gt;result.front ( ) );}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and eventually the C-program to start using it all:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;stdbool.h&amp;gt;#include &quot;kdtree2.h&quot;int main ( void ) {    float **data = MALLOC_2D ( float, 100, 3 );    for ( int i = 0; i &amp;lt; 100; i++ )        for ( int j = 0; j &amp;lt; 3; j++ )             data [ i ][ j ] = ( float ) ( 3 * i + j );    int thread_id = 0;    new_kdtree2 ( thread_id, data, 100, 3, false );    struct kdtree2_result *result;    n_nearest_around_point_kdtree2 ( thread_id, 28, 3, 9, &amp;amp;result );    for ( int i = 0; i &amp;lt; 9; i++ )        printf ( &quot;result[%d]= (%d,%f)\n&quot;, i , result [ i ].idx, result [ i ].dis );    printf ( &quot;\n&quot; );    n_nearest_around_point_kdtree2 ( thread_id, 9, 3, 6, &amp;amp;result );    for ( int i = 0; i &amp;lt; 6; i++ )        printf ( &quot;result[%d]= (%d,%f)\n&quot;, i , result [ i ].idx, result [ i ].dis );    delete_kdtree2 ( thread_id );    free ( data );    return 0;}&lt;/code&gt;&lt;/pre&gt;</Body>
<Tags>c++,c,data-structures</Tags>
</question>
<answer>
<Body>&lt;p&gt;The API docs in the referenced paper are rather flaky and the author&#x27;s FTP server doesn&#x27;t respond, so I can&#x27;t tell with certainty, but my hunch is that&lt;/p&gt;&lt;pre&gt;&lt;code&gt;multi_array_ref&amp;lt;float,2&amp;gt; kdtree2_data((float *)&amp;amp;data[0][0], extents[n][dim],                                      c_storage_order( ));global_kdtree2 = new kdtree2(kdtree2_data, arrange);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;construct the &lt;code&gt;kdtree2&lt;/code&gt; by storing a reference to &lt;code&gt;kdtree2_data&lt;/code&gt; in the &lt;code&gt;global_kdtree2&lt;/code&gt; object, rather than making a full copy. Since &lt;code&gt;kdtree2_data&lt;/code&gt; is a local variable, it is destroyed when &lt;code&gt;new_kdtree2&lt;/code&gt; returns. You&#x27;ll have to keep it alive until &lt;code&gt;n_nearest_around_point_kdtree2&lt;/code&gt; is done.&lt;/p&gt;</Body>
</answer>
</qroot>
