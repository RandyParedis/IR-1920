<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Adding characters to a string in python 3</Title>
<Body>&lt;p&gt;I currently have a string that I want to edit by adding spaces between each character, so I currently have &lt;code&gt;s = &#x27;abcdefg&#x27;&lt;/code&gt; and I want it to become &lt;code&gt;s = &#x27;a b c d e f g&#x27;&lt;/code&gt;. Is there any easy way to do this using loops?&lt;/p&gt;</Body>
<Tags>python,string,python-3.x</Tags>
</question>
<answer>
<Body>&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &#x27; &#x27;.join(&#x27;abcdefg&#x27;)&#x27;a b c d e f g&#x27;&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;You did specify &quot;using loops&quot;&lt;/p&gt;&lt;p&gt;A string in Python is an iterable, meaning you can loop over it. &lt;/p&gt;&lt;p&gt;Using loops:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; s = &#x27;abcdefg&#x27;&amp;gt;&amp;gt;&amp;gt; s2=&#x27;&#x27;&amp;gt;&amp;gt;&amp;gt; for c in s:...    s2+=c+&#x27; &#x27;&amp;gt;&amp;gt;&amp;gt; s2&#x27;a b c d e f g &#x27;    #note the trailing space there...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using a comprehension, you can produce a list:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; [e+&#x27; &#x27; for e in s][&#x27;a &#x27;, &#x27;b &#x27;, &#x27;c &#x27;, &#x27;d &#x27;, &#x27;e &#x27;, &#x27;f &#x27;, &#x27;g &#x27;]  #note the undesired trailing space...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use &lt;code&gt;map&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import operator&amp;gt;&amp;gt;&amp;gt; map(operator.concat,s,&#x27; &#x27;*len(s))[&#x27;a &#x27;, &#x27;b &#x27;, &#x27;c &#x27;, &#x27;d &#x27;, &#x27;e &#x27;, &#x27;f &#x27;, &#x27;g &#x27;]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then you have that pesky list instead of a string and a trailing space...&lt;/p&gt;&lt;p&gt;You could use a regex:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import re&amp;gt;&amp;gt;&amp;gt; re.sub(r&#x27;(.)&#x27;,r&#x27;\1 &#x27;,s)&#x27;a b c d e f g &#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can even fix the trailing space with a regex:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; re.sub(r&#x27;(.(?!$))&#x27;,r&#x27;\1 &#x27;,s)&#x27;a b c d e f g&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you have a list, use &lt;code&gt;join&lt;/code&gt; to produce a string:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &#x27;&#x27;.join([e+&#x27; &#x27; for e in s])&#x27;a b c d e f g &#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use the &lt;code&gt;string.rstrip()&lt;/code&gt; string method to remove the unwanted trailing whitespace: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &#x27;&#x27;.join([e+&#x27; &#x27; for e in s]).rstrip()&#x27;a b c d e f g&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can even write to a memory buffer and get a string:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from cStringIO import StringIO&amp;gt;&amp;gt;&amp;gt; fp=StringIO()&amp;gt;&amp;gt;&amp;gt; for c in s:...    st=c+&#x27; &#x27;...    fp.write(st)... &amp;gt;&amp;gt;&amp;gt; fp.getvalue().rstrip()&#x27;a b c d e f g&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But since &lt;a href=&quot;http://docs.python.org/library/string.html#string.join&quot; rel=&quot;nofollow&quot;&gt;join&lt;/a&gt; works on lists or iterables, you might as well use join on the string:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &#x27; &#x27;.join(&#x27;abcdefg&#x27;)&#x27;a b c d e f g&#x27;   # no trailing space, simple!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;The use of &lt;code&gt;join&lt;/code&gt; in this way is one of the most important Python idioms.&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;Use it. &lt;/p&gt;&lt;p&gt;There are performance considerations as well. Read &lt;a href=&quot;http://skymind.com/~ocrow/python_string/&quot; rel=&quot;nofollow&quot;&gt;this comparison&lt;/a&gt; on various string concatenation methods in Python. &lt;/p&gt;</Body>
</answer>
</qroot>
