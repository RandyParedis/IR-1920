<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How to do interval arithmetic on sympy 1.3?</Title>
<Body>&lt;p&gt;How do I do interval arithmetic in Sympy 1.3?  (specifically, addition and multiplication)&lt;/p&gt;&lt;p&gt;For example, given:  &lt;/p&gt;&lt;pre&gt;&lt;code&gt;q1 = Interval(0,255)q2 = Interval(0,255)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The addition of those two intervals should be &lt;code&gt;Interval(0, 510)&lt;/code&gt;.  (The plus operator is overloaded to mean &quot;union&quot;, so q1+q2 yields Interval(0,255).)&lt;/p&gt;&lt;p&gt;If I try &lt;code&gt;Add(q1, q2)&lt;/code&gt;, I get an exception:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  Traceback (most recent call last):  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;  File &quot;/usr/local/lib/python2.7/dist-packages/sympy/core/cache.py&quot;, line 93, in wrapper    retval = cfunc(*args, **kwargs)  File &quot;/usr/local/lib/python2.7/dist-packages/sympy/core/compatibility.py&quot;, line 850, in wrapper    result = user_function(*args, **kwds)  File &quot;/usr/local/lib/python2.7/dist-packages/sympy/core/operations.py&quot;, line 45, in __new__    c_part, nc_part, order_symbols = cls.flatten(args)  File &quot;/usr/local/lib/python2.7/dist-packages/sympy/core/add.py&quot;, line 223, in flatten    newseq.append(Mul(c, s))  File &quot;/usr/local/lib/python2.7/dist-packages/sympy/core/cache.py&quot;, line 93, in wrapper    retval = cfunc(*args, **kwargs)  File &quot;/usr/local/lib/python2.7/dist-packages/sympy/core/compatibility.py&quot;, line 850, in wrapper    result = user_function(*args, **kwds)  File &quot;/usr/local/lib/python2.7/dist-packages/sympy/core/operations.py&quot;, line 45, in __new__    c_part, nc_part, order_symbols = cls.flatten(args)  File &quot;/usr/local/lib/python2.7/dist-packages/sympy/core/mul.py&quot;, line 186, in flatten    r, b = b.as_coeff_Mul()AttributeError: &#x27;Interval&#x27; object has no attribute &#x27;as_coeff_Mul&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(I get a similar exception for &lt;code&gt;Mul&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;Yet, the code to add two intervals seems to be right here:  &lt;a href=&quot;https://github.com/sympy/sympy/blob/sympy-1.3/sympy/sets/handlers/add.py#L22&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/sympy/sympy/blob/sympy-1.3/sympy/sets/handlers/add.py#L22&lt;/a&gt;&lt;/p&gt;&lt;p&gt;But the dispatcher mechanism doesn&#x27;t seem to be catching the case of Interval + Interval. &lt;/p&gt;&lt;p&gt;How do I do addition and multiplication on intervals in sympy?&lt;/p&gt;</Body>
<Tags>python,sympy,intervals</Tags>
</question>
<answer>
<Body>&lt;p&gt;Sympy Intervals do not perform interval arithmetic. The function you found in the repository is one of the handlers for &lt;code&gt;sympy.sets.setexpr.SetExpr&lt;/code&gt;, an expression type that takes values in a given set:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;from sympy import Intervalfrom sympy.sets.setexpr import SetExprq1 = SetExpr(Interval(0, 255))q2 = SetExpr(Interval(0, 255))result = q1 + q2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;SetExpr&lt;/code&gt; is currently hidden-ish and mostly undocumented.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;In addition to &lt;code&gt;SetExpr(Interval(...))&lt;/code&gt; you can also use &lt;code&gt;AccumBounds&lt;/code&gt; which is older and was originally intended to give answers to &quot;find the limit of &lt;code&gt;f&lt;/code&gt;&quot; where &lt;code&gt;f&lt;/code&gt; is an oscillating function. As far as arithmetics is concerned it works about the same: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;AccumBounds(3, 5) + AccumBounds(2, 8)  #  AccumBounds(5, 13)AccumBounds(-2, 5) * AccumBounds(2, 8)  #  AccumBounds(-16, 40)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;but there are some interval computations where the implementation of &lt;code&gt;AccumBounds&lt;/code&gt; is more complete.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sin(AccumBounds(0, 3))  #  AccumBounds(0, 1)sin(SetExpr(Interval(0, 3)))  #  SetExpr(ImageSet(Lambda(x, sin(x)), Interval(0, 3)))&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
