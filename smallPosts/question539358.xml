<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Calling functions in a DLL from C++</Title>
<Body>&lt;p&gt;I have a solution in VS 2008 with 2 projects in it. One is a DLL written in C++ and the other is a simple C++ console application created from a blank project. I would like know how to call the functions in the DLL from the application.&lt;/p&gt;&lt;p&gt;Assume I am starting with a blank C++ project and that I want to call a function called &lt;code&gt;int IsolatedFunction(int someParam)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;How do I call it?&lt;/p&gt;</Body>
<Tags>c++,visual-studio-2008,dll,dllimport</Tags>
</question>
<answer>
<Body>&lt;p&gt;Presuming you&#x27;re talking about dynamic runtime loading of DLLs, you&#x27;re looking for LoadLibrary and GetProAddress. There&#x27;s an example on &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms686944(VS.85).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;MSDN&lt;/a&gt;.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Can also export functions from dll and import from the exe, it is more tricky at first but in the end is much easier than calling LoadLibrary/GetProcAddress. See &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/16ya5xae%28VS.80%29.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;MSDN&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;When creating the project with the VS wizard there&#x27;s a check box in the dll that let you export functions.&lt;/p&gt;&lt;p&gt;Then, in the exe application you only have to #include a header from the dll with the proper definitions, and add the dll project as a dependency to the exe application.&lt;/p&gt;&lt;p&gt;Check this other question if you want to investigate this point further &lt;a href=&quot;https://stackoverflow.com/questions/538134/exporting-functions-from-a-dll-with-dllexport&quot;&gt;Exporting functions from a DLL with dllexport&lt;/a&gt;.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;You can either go the LoadLibrary/GetProcAddress route (as Harper mentioned in his answer, here&#x27;s link to the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms686944(VS.85).aspx&quot; rel=&quot;noreferrer&quot;&gt;run-time dynamic linking MSDN sample &lt;/a&gt; again) or you can link your console application to the .lib produced from the DLL project and include the hea.h file with the declaration of your function (as described in the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms686923(VS.85).aspx&quot; rel=&quot;noreferrer&quot;&gt;load-time dynamic linking MSDN sample&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;In both cases, you need to make sure your DLL exports the function you want to call properly. The easiest way to do it is by using __declspec(dllexport) on the function declaration (as shown in the creating a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms682507(VS.85).aspx&quot; rel=&quot;noreferrer&quot;&gt;simple dynamic-link library MSDN sample&lt;/a&gt;), though you can do it also through the corresponding .def file in your DLL project.&lt;/p&gt;&lt;p&gt;For more information on the topic of DLLs, you should browse through the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms682592(VS.85).aspx&quot; rel=&quot;noreferrer&quot;&gt;MSDN About Dynamic-Link Libraries&lt;/a&gt; topic.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;When the DLL was created an import lib is usually automatically created and you should use that linked in to your program along with header files to call it but if not then you can manually call windows functions like &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms684175(VS.85).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;LoadLibrary&lt;/a&gt; and &lt;a href=&quot;http://www.google.co.nz/url?sa=t&amp;amp;source=web&amp;amp;ct=res&amp;amp;cd=1&amp;amp;url=http%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fms683212(VS.85).aspx&amp;amp;ei=XmWTSf3pLYnYsAPjydy8Cw&amp;amp;usg=AFQjCNHvhHicarLfNxcSbLJXopZ-U3sPQQ&amp;amp;sig2=boXZ-q6L8seK6j21FVmD_A&quot; rel=&quot;nofollow noreferrer&quot;&gt;GetProcAddress&lt;/a&gt; to get it working.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;There are many ways to do this but I think one of the easiest options is to link the application to the DLL at link time and then use a &lt;em&gt;definition file&lt;/em&gt; to define the symbols to be exported from the DLL.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; The definition file approach works bests for &lt;em&gt;undecorated&lt;/em&gt; symbol names. If you want to export decorated symbols then it is probably better to &lt;em&gt;NOT USE&lt;/em&gt; the definition file approach.&lt;/p&gt;&lt;p&gt;Here is an simple example on how this is done.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Define the function in the &lt;em&gt;export.h&lt;/em&gt; file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;int WINAPI IsolatedFunction(const char *title, const char *test);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Define the function in the &lt;em&gt;export.cpp&lt;/em&gt; file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;windows.h&amp;gt;int WINAPI IsolatedFunction(const char *title, const char *test){    MessageBox(0, title, test, MB_OK);    return 1;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Define the function as an export in the &lt;em&gt;export.def&lt;/em&gt; defintion file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;EXPORTS    IsolatedFunction          @1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Create a DLL project and add the &lt;em&gt;export.cpp&lt;/em&gt; and &lt;em&gt;export.def&lt;/em&gt; files to this project. Building this project will create an &lt;em&gt;export.dll&lt;/em&gt; and an &lt;em&gt;export.lib&lt;/em&gt; file.&lt;/p&gt;&lt;p&gt;The following two steps link to the DLL at link time. If you don&#x27;t want to define the entry points at link time, ignore the next two steps and use the &lt;strong&gt;LoadLibrary&lt;/strong&gt; and &lt;strong&gt;GetProcAddress&lt;/strong&gt; to load the function entry point at runtime.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Create a &lt;em&gt;Test&lt;/em&gt; application project to use the dll by adding the &lt;em&gt;export.lib&lt;/em&gt; file to the project. Copy the &lt;em&gt;export.dll&lt;/em&gt; file to ths same location as the &lt;em&gt;Test&lt;/em&gt; console executable.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; Call the &lt;em&gt;IsolatedFunction&lt;/em&gt; function from within the Test application as shown below.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &quot;stdafx.h&quot;// get the function prototype of the imported function#include &quot;../export/export.h&quot;int APIENTRY WinMain(HINSTANCE hInstance,                     HINSTANCE hPrevInstance,                     LPSTR     lpCmdLine,                     int       nCmdShow){    // call the imported function found in the dll    int result = IsolatedFunction(&quot;hello&quot;, &quot;world&quot;);    return 0;}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;The following are the 5 steps required:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;declare the function pointer&lt;/li&gt;&lt;li&gt;Load the library&lt;/li&gt;&lt;li&gt;Get the procedure address&lt;/li&gt;&lt;li&gt;assign it to function pointer&lt;/li&gt;&lt;li&gt;call the function using function pointer&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;You can find the step by step VC++ IDE screen shot at &lt;a href=&quot;http://www.softwareandfinance.com/Visual_CPP/DLLDynamicBinding.html&quot; rel=&quot;noreferrer&quot;&gt;http://www.softwareandfinance.com/Visual_CPP/DLLDynamicBinding.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Here is the code snippet: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;int main(){/***__declspec(dllimport) bool GetWelcomeMessage(char *buf, int len); // used for static binding ***/    typedef bool (*GW)(char *buf, int len);    HMODULE hModule = LoadLibrary(TEXT(&quot;TestServer.DLL&quot;));    GW GetWelcomeMessage = (GW) GetProcAddress(hModule, &quot;GetWelcomeMessage&quot;);    char buf[128];    if(GetWelcomeMessage(buf, 128) == true)        std::cout &amp;lt;&amp;lt; buf;        return 0;}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
