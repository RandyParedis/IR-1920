<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Statsmodels OLS with rolling window problem</Title>
<Body>&lt;p&gt;I would like to do a regression with a rolling window, but I got only one parameter back after the regression:&lt;/p&gt;&lt;pre&gt;&lt;code&gt; rolling_beta = sm.OLS(X2, X1, window_type=&#x27;rolling&#x27;, window=30).fit() rolling_beta.params&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result:&lt;/p&gt;&lt;pre&gt;&lt;code&gt; X1    5.715089 dtype: float64&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What could be the problem?&lt;/p&gt;&lt;p&gt;Thanks in advance, Roland&lt;/p&gt;</Body>
<Tags>python,regression</Tags>
</question>
<answer>
<Body>&lt;p&gt;I think the problem is that the parameters &lt;code&gt;window_type=&#x27;rolling&#x27;&lt;/code&gt; and &lt;code&gt;window=30&lt;/code&gt; simply do not do anything. First I&#x27;ll show you why, and at the end I&#x27;ll provide a setup I&#x27;ve got lying around for linear regressions on rolling windows.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; The problem with your function:&lt;/p&gt;&lt;p&gt;Since you haven&#x27;t provided some sample data, here&#x27;s a function that returns a dataframe of a desired size with some random numbers:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# Function to build synthetic dataimport numpy as npimport pandas as pdimport statsmodels.api as smfrom collections import OrderedDictdef sample(rSeed, periodLength, colNames):    np.random.seed(rSeed)    date = pd.to_datetime(&quot;1st of Dec, 1999&quot;)       cols = OrderedDict()    for col in colNames:        cols[col] = np.random.normal(loc=0.0, scale=1.0, size=periodLength)    dates = date+pd.to_timedelta(np.arange(periodLength), &#x27;D&#x27;)    df = pd.DataFrame(cols, index = dates)    return(df)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Output:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;X1        X22018-12-01 -1.085631 -1.2940852018-12-02  0.997345 -1.0387882018-12-03  0.282978  1.7437122018-12-04 -1.506295 -0.7980632018-12-05 -0.578600  0.029683...2019-01-17  0.412912 -1.3634722019-01-18  0.978736  0.3794012019-01-19  2.238143 -0.379176&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, try:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rolling_beta = sm.OLS(df[&#x27;X2&#x27;], df[&#x27;X1&#x27;], window_type=&#x27;rolling&#x27;, window=30).fit()rolling_beta.params&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Output:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;X1   -0.075784dtype: float64&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And this at least represents the structure of your output too, meaning that you&#x27;re expecting an estimate for each of your sample windows, but instead you get a single estimate. So I looked around for some other examples using the same function online and in the statsmodels docs, but I was unable to find specific examples that actually worked. What I did find were a few discussions talking about how this functionality was deprecated a while ago. So then I tested the same function with some bogus input for the parameters:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rolling_beta = sm.OLS(df[&#x27;X2&#x27;], df[&#x27;X1&#x27;], window_type=&#x27;amazing&#x27;, window=3000000).fit()rolling_beta.params&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Output:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;X1   -0.075784dtype: float64&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And as you can see, the estimates are the same, and no error messages are returned for the bogus input. So I suggest that you take a look at the function below. This is something I&#x27;ve put together to perform rolling regression estimates.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; A function for regressions on rolling windows of a pandas dataframe&lt;/p&gt;&lt;pre&gt;&lt;code&gt;df = sample(rSeed = 123, colNames = [&#x27;X1&#x27;, &#x27;X2&#x27;, &#x27;X3&#x27;], periodLength = 50)def RegressionRoll(df, subset, dependent, independent, const, win, parameters):    &quot;&quot;&quot;    RegressionRoll takes a dataframe, makes a subset of the data if you like,    and runs a series of regressions with a specified window length, and    returns a dataframe with BETA or R^2 for each window split of the data.    Parameters:    ===========    df: pandas dataframe    subset: integer - has to be smaller than the size of the df    dependent: string that specifies name of denpendent variable    inependent: LIST of strings that specifies name of indenpendent variables    const: boolean - whether or not to include a constant term    win: integer - window length of each model    parameters: string that specifies which model parameters to return:                BETA or R^2    Example:    ========        RegressionRoll(df=df, subset = 50, dependent = &#x27;X1&#x27;, independent = [&#x27;X2&#x27;],                   const = True, parameters = &#x27;beta&#x27;, win = 30)    &quot;&quot;&quot;    # Data subset    if subset != 0:        df = df.tail(subset)    else:        df = df    # Loopinfo    end = df.shape[0]    win = win    rng = np.arange(start = win, stop = end, step = 1)    # Subset and store dataframes    frames = {}    n = 1    for i in rng:        df_temp = df.iloc[:i].tail(win)        newname = &#x27;df&#x27; + str(n)        frames.update({newname: df_temp})        n += 1    # Analysis on subsets    df_results = pd.DataFrame()    for frame in frames:        #print(frames[frame])        # Rolling data frames        dfr = frames[frame]        y = dependent        x = independent        if const == True:            x = sm.add_constant(dfr[x])            model = sm.OLS(dfr[y], x).fit()        else:            model = sm.OLS(dfr[y], dfr[x]).fit()        if parameters == &#x27;beta&#x27;:            theParams = model.params[0:]            coefs = theParams.to_frame()            df_temp = pd.DataFrame(coefs.T)            indx = dfr.tail(1).index[-1]            df_temp[&#x27;Date&#x27;] = indx            df_temp = df_temp.set_index([&#x27;Date&#x27;])        if parameters == &#x27;R2&#x27;:            theParams = model.rsquared            df_temp = pd.DataFrame([theParams])            indx = dfr.tail(1).index[-1]            df_temp[&#x27;Date&#x27;] = indx            df_temp = df_temp.set_index([&#x27;Date&#x27;])            df_temp.columns = [&#x27;, &#x27;.join(independent)]        df_results = pd.concat([df_results, df_temp], axis = 0)    return(df_results)df_rolling = RegressionRoll(df=df, subset = 50, dependent = &#x27;X1&#x27;, independent = [&#x27;X2&#x27;], const = True, parameters = &#x27;beta&#x27;,                                     win = 30)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Output: A dataframe with beta estimates for OLS of X2 on X1 for each 30 period window of the data.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;const        X2Date                          2018-12-30  0.044042  0.0326802018-12-31  0.074839 -0.0232942019-01-01 -0.063200  0.077215...2019-01-16 -0.075938 -0.2151082019-01-17 -0.143226 -0.2155242019-01-18 -0.129202 -0.170304&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
