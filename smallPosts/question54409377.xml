<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How to implement drawing with mouse using QPainter + QPixmap?</Title>
<Body>&lt;p&gt;I&#x27;m trying to implement drawing by mouse.&lt;/p&gt;&lt;p&gt;When I run my code and try to draw, I see no results on canvas. What&#x27;s wrong with it?&lt;/p&gt;&lt;p&gt;Code below only contains class Canvas code and doesn&#x27;t include UI and other things in my project.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;from PyQt5 import uicfrom PyQt5.QtCore import *from PyQt5.QtGui import *from PyQt5.QtWidgets import *class Canvas(QLabel):    def __init__(self, parent=None):        super().__init__(parent)        p = self.palette()        p.setColor(self.backgroundRole(), Qt.white)        self.setAutoFillBackground(True)        self.setPalette(p)                self.setPixmap(QPixmap())        self.pen = QPen()        self.last = None        self.painter = QPainter(self.pixmap())        self.painter.begin(self)            def paintEvent(self, event):        pass    def mouseMoveEvent(self, event):        if self.last:            self.painter.setPen(self.pen)            self.painter.drawLine(self.last, event.pos())            self.last = event.pos()            self.update()    def mousePressEvent(self, event):        self.last = event.pos()    def mouseReleaseEvent(self, event):        self.last = None&lt;/code&gt;&lt;/pre&gt;</Body>
<Tags>python,pyqt,pyqt5</Tags>
</question>
<answer>
<Body>&lt;p&gt;Give the pixmap a size, save it as member variable, dont &lt;code&gt;pass&lt;/code&gt; in the &lt;code&gt;paintEvent&lt;/code&gt; and reset pixmap after drawing on it.&lt;/p&gt;&lt;p&gt;(Careful you are using &lt;code&gt;event.pos()&lt;/code&gt; which is the position inside the &lt;code&gt;QLabel&lt;/code&gt;, when you resize the &lt;code&gt;QPixmap&lt;/code&gt; and &lt;code&gt;QLabel&lt;/code&gt; sizes are not the same anymore and you get an offset.)&lt;/p&gt;&lt;pre&gt;&lt;code&gt;from PyQt5 import uicfrom PyQt5.QtCore import *from PyQt5.QtGui import *from PyQt5.QtWidgets import *class Canvas(QLabel):    def __init__(self, parent=None):        super().__init__(parent)        p = self.palette()        p.setColor(self.backgroundRole(), Qt.white)        self.setAutoFillBackground(True)        self.setPalette(p)        self.myPixmap = QPixmap(200,200)        self.setMinimumSize(200,200)        self.painter = QPainter(self.myPixmap)        self.pen = QPen(Qt.black)        self.painter.setPen(self.pen)        self.painter.fillRect(0,0,200,200, Qt.white)        self.setPixmap(self.myPixmap)        self.last = None    def mouseMoveEvent(self, event):        if self.last:            self.painter.drawLine(self.last, event.pos())            self.last = event.pos()            self.setPixmap(self.myPixmap)            self.update()    def mousePressEvent(self, event):        self.last = event.pos()    def mouseReleaseEvent(self, event):        self.last = None    def updateSize(self, width, height):        pm = QPixmap(width, height)        pm.fill(Qt.white)        old = self.myPixmap        self.myPixmap = pm        self.pen = QPen(Qt.black)        self.painter = QPainter(pm)        self.painter.drawPixmap(0,0,old)        self.setPixmap(pm)    def resizeEvent(self, event):        if event.oldSize().width() &amp;gt; 0:            self.updateSize(event.size().width(), event.size().height())&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
