<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Pandas Groupby and apply a custom function to each N- rows of a Column in that group</Title>
<Body>&lt;p&gt;I have a pandas dataframe, and i want to perform a groupby  over a column and apply a custom function to another column. But that function has to be applied over every two entries of the apply-column.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;df = pd.DataFrame({&#x27;id&#x27;:[1,1,2,2,2,3,3,3,3,3], &#x27;vals&#x27;:[&#x27;ANZ&#x27;, &#x27;ABC&#x27;, &#x27;SAT&#x27;, &#x27;SATYA&#x27;, &#x27;SQL&#x27;, &#x27;WER&#x27;, &#x27;DEA&#x27;, &#x27;KIP&#x27;, &#x27;FTY&#x27;, &#x27;TCZ&#x27;] })#dfid  vals  1   ANZ1   ABC2   SAT2   SATYA2   SQL3   WER3   DEA3   KIP3   FTY3   TCZ# i need a column &quot;res&quot;, as a func applied to column vals&#x27;s each two rows on a group by on column &#x27;id&#x27;. ### myfunc takes two argument and return one value.df[&#x27;res&#x27;] = df.groupby(&#x27;id&#x27;)[&#x27;vals&#x27;].apply(myfunc)###dfid  vals   res1   ANZ    myfunc(None, ANZ)1   ABC    myfunc(&#x27;ANZ&#x27;, &#x27;ABC&#x27;)2   SAT    myfunc(None, &#x27;SAT&#x27;)2   SATYA  myfunc(&#x27;SAT&#x27;, &#x27;SATYA&#x27;)2   SQL    myfunc(&#x27;SATYA&#x27;, &#x27;SQL&#x27;)3   WER    myfunc(None, &#x27;WER&#x27;)3   DEA    myfunc(&#x27;WER&#x27;, &#x27;DEA&#x27;)3   KIP    myfunc(&#x27;DEA&#x27;, &#x27;KIP&#x27;)3   FTY    myfunc(&#x27;KIP&#x27;, &#x27;FTY&#x27;)3   TCZ    myfunc(&#x27;FTY&#x27;, &#x27;TCZ&#x27;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But currently not able to form the expression for apply(), as fora group by .apply(x), x will be a series and i am unable to find a way to use index wise access on x(pandas groupby series object).&lt;/p&gt;&lt;p&gt;Please guide me on how to achieve this, Thanks in Adv.&lt;/p&gt;</Body>
<Tags>python,pandas</Tags>
</question>
<answer>
<Body>&lt;p&gt;So i tried out something like below.&lt;/p&gt;&lt;p&gt;Myfunc is used to find string similarity between two string, i used the awesome fuzzywuzzy library for that&lt;/p&gt;&lt;pre&gt;&lt;code&gt;from fuzzywuzzy import fuzzdef myfunc(x):    x = x.tolist() # converted series to list    y = []    for i in range(0, len(x)):        if i == 0:            y.append(None)        else:            ## apply ratio between prev_Row_vals and Current_Row_vals            y.append(fuzz.token_set_ratio(x[i - 1], x[i]) / 10)    return y  ## Now the group by and apply/transform function  df[&#x27;res&#x27;] = df.groupby(&#x27;id&#x27;)[&#x27;vals&#x27;].transform(lambda x: myfunc(x))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But i am not sure if it is the pythonic way to do such thing. Please do let me know if there is more pythonic way to do this. Thanks. &lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;IIUC, you can try the below;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;df[&#x27;new_value&#x27;]=df.vals.shift()df.groupby(df.index//2)[&#x27;vals&#x27;,&#x27;new_value&#x27;].apply(lambda x: pd.Series(list(zip(x.new_value,x.vals))))\.stack().reset_index(drop=True)0      (nan, ANZ)1      (ANZ, ABC)2      (ABC, SAT)3    (SAT, SATYA)4    (SATYA, SQL)5      (SQL, WER)6      (WER, DEA)7      (DEA, KIP)8      (KIP, FTY)9      (FTY, TCZ)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; Modifying the code a little to match the output :&lt;/p&gt;&lt;pre&gt;&lt;code&gt;a=df.groupby(&#x27;id&#x27;)[&#x27;vals&#x27;].apply(lambda x: pd.DataFrame(list(zip(x.shift(),x))))df[&#x27;new&#x27;]=list(zip(a[0],a[1]))print(df)   id   vals           new0   1    ANZ    (nan, ANZ)1   1    ABC    (ANZ, ABC)2   2    SAT    (nan, SAT)3   2  SATYA  (SAT, SATYA)4   2    SQL  (SATYA, SQL)5   3    WER    (nan, WER)6   3    DEA    (WER, DEA)7   3    KIP    (DEA, KIP)8   3    FTY    (KIP, FTY)9   3    TCZ    (FTY, TCZ)&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;I would like to propose to do your task slightly other way.&lt;/p&gt;&lt;p&gt;Start from generating a column with &lt;code&gt;vals&lt;/code&gt; from the previous rowin the current group. I named it &lt;code&gt;prev&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Then call your function using &lt;code&gt;apply&lt;/code&gt; to each row in &lt;code&gt;df&lt;/code&gt;, substitutingthe result do &lt;code&gt;res&lt;/code&gt; column.&lt;code&gt;myfunc&lt;/code&gt; gets the current row and has to extract &lt;code&gt;prev&lt;/code&gt; and&lt;code&gt;vals&lt;/code&gt; from it, then return the result.&lt;/p&gt;&lt;p&gt;The only remaining thing is to drop &lt;code&gt;prev&lt;/code&gt; column.&lt;/p&gt;&lt;p&gt;So the whole script can look like below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import pandas as pddef myfunc(x):    pr = x.prev    t1 = pr if pd.notnull(pr) else None    t2 = x.vals    return f&#x27;myfunc({repr(t1)}, {repr(t2)})&#x27;df = pd.DataFrame({&#x27;id&#x27;:[1,1,2,2,2,3,3,3,3,3], &#x27;vals&#x27;:    [&#x27;ANZ&#x27;, &#x27;ABC&#x27;, &#x27;SAT&#x27;, &#x27;SATYA&#x27;, &#x27;SQL&#x27;, &#x27;WER&#x27;, &#x27;DEA&#x27;, &#x27;KIP&#x27;, &#x27;FTY&#x27;, &#x27;TCZ&#x27;] })df[&#x27;prev&#x27;] = df.groupby(&#x27;id&#x27;).shift()df[&#x27;res&#x27;] = df.apply(myfunc, axis=1)df.drop(&#x27;prev&#x27;, axis=1, inplace=True)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you &lt;code&gt;print(df)&lt;/code&gt;, you will get:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;   id   vals                     res0   1    ANZ     myfunc(None, &#x27;ANZ&#x27;)1   1    ABC    myfunc(&#x27;ANZ&#x27;, &#x27;ABC&#x27;)2   2    SAT     myfunc(None, &#x27;SAT&#x27;)3   2  SATYA  myfunc(&#x27;SAT&#x27;, &#x27;SATYA&#x27;)4   2    SQL  myfunc(&#x27;SATYA&#x27;, &#x27;SQL&#x27;)5   3    WER     myfunc(None, &#x27;WER&#x27;)6   3    DEA    myfunc(&#x27;WER&#x27;, &#x27;DEA&#x27;)7   3    KIP    myfunc(&#x27;DEA&#x27;, &#x27;KIP&#x27;)8   3    FTY    myfunc(&#x27;KIP&#x27;, &#x27;FTY&#x27;)9   3    TCZ    myfunc(&#x27;FTY&#x27;, &#x27;TCZ&#x27;)&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
