<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How to loop through list of cities to calculate distances between them</Title>
<Body>&lt;p&gt;I&#x27;m working on a brain teaser where I want to calculate all of the possible distances between 4 cities. I wrote a function where you can input the x and y coordinates of the two cities and it&#x27;ll calculate the distance between them.&lt;/p&gt;&lt;p&gt;While I can individually call the function 6 times,that seems inefficient if the data set gets bigger. I think I should be using nested &quot;for loops&quot; but I can&#x27;t figure out a way to properly increment the inner loop.  &lt;/p&gt;&lt;p&gt;My initial idea was to create a list of object and use that in inner loop. &lt;/p&gt;&lt;p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-code&quot;&gt;&lt;pre class=&quot;snippet-code-html lang-html prettyprint-override&quot;&gt;&lt;code&gt;import math #Imports the math moduledef calc_euclidean(x1,y1,x2,y2): #Function takes 4 arguments    xDistancesqrd=math.pow((x2-x1),2) #x2-x1 squared    yDistancesqrd=math.pow((y2-y1),2) #y2-y1 squared    euclideanDistance=math.sqrt(xDistancesqrd+yDistancesqrd) #distance=square root (x2-x1)^2+(y2-y1)^2    return euclideanDistance #Returns the result of the calculation, the euclidean distance between the points.Budapest=[47.4979, 19.0402]Vienna=[48.210033, 16.363449]Sofia=[42.6977, 23.3219]Zagreb=[45.8150, 15.9819]cities=[Budapest,Vienna,Sofia,Zagreb]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</Body>
<Tags>python,loops,nested-loops</Tags>
</question>
<answer>
<Body>&lt;p&gt;Use &lt;a href=&quot;https://docs.python.org/3/library/itertools.html#itertools.combinations&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;itertools.combinations()&lt;/code&gt;&lt;/a&gt; like:&lt;/p&gt;&lt;h3&gt;Code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;for c1, c2 in it.combinations(cities, 2):    print(c1, c2, calc_euclidean(c1[0], c1[1], c2[0], c2[1]))&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Test Code:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;import math  # Imports the math moduleimport itertools as itdef calc_euclidean(x1, y1, x2, y2):  # Function takes 4 arguments    xDistancesqrd = math.pow((x2 - x1), 2)  # x2-x1 squared    yDistancesqrd = math.pow((y2 - y1), 2)  # y2-y1 squared    euclideanDistance = math.sqrt(        xDistancesqrd + yDistancesqrd)  # distance=square root (x2-x1)^2+(y2-y1)^2    return euclideanDistance  # Returns the result of the calculation, the euclidean distance between the points.Budapest = [47.4979, 19.0402]Vienna = [48.210033, 16.363449]Sofia = [42.6977, 23.3219]Zagreb = [45.8150, 15.9819]cities = [Budapest, Vienna, Sofia, Zagreb]for c1, c2 in it.combinations(cities, 2):    print(c1, c2, calc_euclidean(c1[0], c1[1], c2[0], c2[1]))&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Results:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[47.4979, 19.0402] [48.210033, 16.363449] 2.769860885620431[47.4979, 19.0402] [42.6977, 23.3219] 6.432330443159777[47.4979, 19.0402] [45.815, 15.9819] 3.4907522541710128[48.210033, 16.363449] [42.6977, 23.3219] 8.877266213327731[48.210033, 16.363449] [45.815, 15.9819] 2.4252345681376934[42.6977, 23.3219] [45.815, 15.9819] 7.974531916670721&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
