<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Edit files with the same names</Title>
<Body>&lt;p&gt;Files that are named the same, e.g.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;File.txtFile(2).txtFile(3).txtFile(4).txt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And so on. How do I do so that no matter how many files with the same name I throw in in the same directory they will all be edited by my script?Something that makes Python take e.g. &lt;code&gt;File(Some number here).txt&lt;/code&gt; and edit them no matter what number is present?&lt;/p&gt;&lt;h2&gt;New explanation&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;param = &#x27;ORIGINAL PARAMS/PARAM.SFO&#x27;with open (param, &#x27;rb&#x27;) as p, open(&#x27;PATCHED PARAMS/PARAM.SFO&#x27;, &#x27;wb&#x27;) as o:        o.write(p.read().replace(b&#x27;\x85&#x27;, b&#x27;\xA5&#x27;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I want this to open files in the directory &lt;code&gt;&#x27;ORIGINAL PARAMS&#x27;&lt;/code&gt; with same names as described above. Then it should edit them, then output them to &lt;code&gt;&#x27;PATCHED PARAMS&#x27;&lt;/code&gt; with the same names but bytes x85 changed to xA5.&lt;/p&gt;&lt;p&gt;Also @BoboDarph, your code didn&#x27;t work for me.&lt;/p&gt;</Body>
<Tags>python,python-3.x</Tags>
</question>
<answer>
<Body>&lt;p&gt;After digging through the comments section, I think I may have a solution for OP&#x27;s problem. As usual, the question seems to be an X vs Y issue, where OP asks for something but expects something else in return.&lt;/p&gt;&lt;p&gt;So, in accordance to OP&#x27;s comments, here&#x27;s a possible implementation.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import osimport inspect# Assuming you have a project with the following tree structure:&#x27;&#x27;&#x27;&#x27;&amp;lt;current_dir&amp;gt;     my_script.py     ORIGINAL PARAMS         PARAM.SFO     ...     PATCHED PARAMS         notPARAM.SFO         PARAM.SFO         PARAM(1).SFO         PARAM(2).SFO         ...&#x27;&#x27;&#x27;&#x27;&#x27;# The following script will list the contents of PATCHED PARAMS, filter all files that start with PARAM, then for each# open the source_filename, read it, replace all \x85 binary characters with \xA5 characters in the bytestream# and write the resulting bytestream to the previously opened PARAM* file.# Do note that opening a file with wb will either create it if it does not exist, or completely overwrite it# In order to avoid problems with relative paths, we get the current directory of the scriptcurrentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))# Knowing the relative structure of our project, we could always assume that the target of our script is in the# same PATCHED PARAMS folder, so we save that path as another script variablepatched_params_directory = &#x27;PATCHED PARAMS&#x27;patched_params = os.path.join(currentdir, patched_params_directory)# This would be the initial source file that contains the values (the one you read and get the value to replace)original_directory = &#x27;ORIGINAL PARAMS&#x27;original_filename = &#x27;PARAM.SFO&#x27;# And this would be it&#x27;s full path. This is here to avoid issues with relative pathssource_filename = os.path.join(currentdir, os.path.join(original_directory, original_filename))# This is the prefix of all the files we want to alterparams_file_prefix = &#x27;PARAM&#x27;# For every file in the contents of the PATCHED PARAMS directory that starts with PARAM# So for example PARAM(1) would be accepted, while 1PARAM would not# param or PaRaM would also not be accepted. If you want those to be accepted, cast both filenames and prefix to lowerfor file in [_ for _ in os.listdir(patched_params) if _.startswith(params_file_prefix)]:    # Calculate the destination filename based on our filter    dest_filename = os.path.join(patched_params, file)    # Open both source and dest files, parse the source, write changes to dest    with open(dest_filename, &#x27;wb&#x27;) as f, open(source_filename, &#x27;rb&#x27;) as p:        f.write(p.read().replace(b&#x27;\x85&#x27;, b&#x27;\xA5&#x27;))&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
