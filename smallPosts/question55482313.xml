<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>How do I prevent my Tweepy Twitter bot from going over Twitter&#x27;s rate limit?</Title>
<Body>&lt;p&gt;I am having difficulty keeping my Twitter bot from going over Twitter&#x27;s rate limit and was wondering if I could have some help implementing a way to fix this issue.&lt;/p&gt;&lt;p&gt;Tweepy&#x27;s API and many google searches recommend using the function &#x27;def limit_handled(cursor)&#x27; in order to limit this. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;# Prevents sending too many requests to Twitter&#x27;s serversdef limit_handled(cursor):    while True:        try:            yield cursor.next()        except tweepy.RateLimitError:            time.sleep(15 * 60)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So how I decided to implement that was by changing&lt;/p&gt;&lt;pre&gt;&lt;code&gt;search_results = api.search(q=&quot;#henny&quot;,count=10000,                           lang=&quot;en&quot;,                           since_id=last_seen_id,tweet_mode=&#x27;extended&#x27;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to&lt;/p&gt;&lt;pre&gt;&lt;code&gt;search_results = limit_handled(tweepy.Cursor(api.search,q=&quot;#henny&quot;,count=10000,                            lang=&quot;en&quot;, since_id=last_seen_id,tweet_mode=&#x27;extended&#x27;).items())&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using tweepy.Cursor seemed to be the only way to use the &#x27;limit_handled&#x27; function because that function needs a cursor as an input. Two issues came from this implementation:&lt;/p&gt;&lt;p&gt;1.)&lt;/p&gt;&lt;p&gt;I was getting this error:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):  File &quot;henny_twitter_bot.py&quot;, line 39, in limit_handled    yield cursor.next()  File &quot;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tweepy/cursor.py&quot;, line 197, in next    self.current_page = self.page_iterator.next()  File &quot;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tweepy/cursor.py&quot;, line 134, in next    raise StopIterationStopIterationThe above exception was the direct cause of the following exception:Traceback (most recent call last):  File &quot;henny_twitter_bot.py&quot;, line 84, in &amp;lt;module&amp;gt;    respond_to_search(search_results, tweet_list)  File &quot;henny_twitter_bot.py&quot;, line 60, in respond_to_search    for result in search_results:RuntimeError: generator raised StopIteration&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Maybe this error was what I was looking for? When I ran the code this way and logged onto my Twitter, I didn&#x27;t receive a notification that I had spammed their servers like I did the first time I ran this program without keeping the rate limit in mind.&lt;/p&gt;&lt;p&gt;2.)&lt;/p&gt;&lt;p&gt;It seems like the program is no longer paying any attention to my &#x27;last_seen_id&#x27; variable which prevents my program from sending duplicate responses.&lt;/p&gt;&lt;p&gt;Here is my code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;CONSUMER_KEY = config.CONSUMER_KEYCONSUMER_SECRET = config.CONSUMER_SECRETACCESS_KEY = config.ACCESS_KEYACCESS_SECRET = config.ACCESS_SECRET# Twitter authorizationauth = tweepy.OAuthHandler(CONSUMER_KEY,CONSUMER_SECRET)auth.set_access_token(ACCESS_KEY, ACCESS_SECRET)api = tweepy.API(auth,wait_on_rate_limit = True)FILE_NAME = &#x27;last_seen_id.txt&#x27;# Methods for updating the last seen tweet to prevent duplicate postsdef retrieve_last_seen_id(file_name):    f_read = open(file_name, &#x27;r&#x27;)    last_seen_id = int(f_read.read().strip())    f_read.close()    return last_seen_iddef store_last_seen_id(last_seen_id, file_name):    f_write = open(file_name, &#x27;w&#x27;)    f_write.write(str(last_seen_id))    f_write.close()    return# Prevents sending too many requests to Twitter&#x27;s serversdef limit_handled(cursor):    while True:        try:            yield cursor.next()        except tweepy.RateLimitError:            time.sleep(15 * 60)last_seen_id = retrieve_last_seen_id(FILE_NAME)# Create list of tweetstweet_list = []tweet_list.append(&quot;Follow me for a free bottle of henny! Hit my DMs!&quot;)tweet_list.append(&quot;Want a free bottle of henny?? Follow my account and shoot me a DM!&quot;)tweet_list.append(&quot;Free bottle of henny to the next 50 people that follow me!&quot;)# Search Twitter for tweets including keywordsearch_results = api.search(q=&quot;#henny&quot;,count=10000,                           lang=&quot;en&quot;,                           since_id=last_seen_id,tweet_mode=&#x27;extended&#x27;)def respond_to_search(search_results, tweet_list):    # Loops through resulting tweets    for result in reversed(search_results):        # Chooses random tweet from list        tweet = random.choice(tweet_list)        # Prints         print(result.id)        print(&quot;HENNY BOT INITIATED&quot;)        # Posts resulting tweets and shows what the bot will tweet        print(&quot;@&quot; + result.user.screen_name + &quot;: &#x27;&quot; + result.full_text + &quot;&#x27;&quot;)        print(&quot;@TheDJHenny: &#x27;@&quot; + result.user.screen_name + &quot; &quot; + tweet + &quot;&#x27;\n&quot;)        # Updated last_seen_id to prevent responding to the same tweet        last_seen_id = result.id        store_last_seen_id(last_seen_id, FILE_NAME)        # Posts Tweet        api.update_status(&#x27;@&#x27; + result.user.screen_name +                             &quot; &quot; + random.choice(tweet_list), result.id)    return None# Runs functionrespond_to_search(search_results, tweet_list)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If someone could help me figure out this problem it would be greatly appreciated! I am creating this bot for solely educational purposes.&lt;/p&gt;</Body>
<Tags>python,tweepy</Tags>
</question>
</qroot>
