<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Understanding print in return statements</Title>
<Body>&lt;p&gt;The return statement returns extra apostrophes and brackets, which I could not figure out why.&lt;/p&gt;&lt;p&gt;This code finds whether a substring is present in the string. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;    def find(the_string, search_this):     if search_this in the_string:         a = the_string.find(search_this)         # returns the unexpected          return (search_this, &quot;found at&quot;, str(a))     else:         # the correct output I am looking for         return (search_this + &quot; was not found at &quot; + the_string)     print(find(&quot;qweabc&quot;,&quot;abc&quot;))     print(find(&quot;abcd&quot;, &quot;xyz&quot;))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first return statement returns me with a print statement which is not desirable.&lt;/p&gt;&lt;p&gt;Example: &lt;code&gt;(&#x27;abc&#x27;, &#x27;found at&#x27;, &#x27;3&#x27;)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The second return statement returns me with a print statement which is the one I am looking for:&lt;/p&gt;&lt;p&gt;Example: &lt;code&gt;xyz was not found at abcd&lt;/code&gt;&lt;/p&gt;&lt;p&gt;When printed out, why does the first return statement have extra brackets and apostrophes?&lt;/p&gt;</Body>
<Tags>python,return</Tags>
</question>
<answer>
<Body>&lt;p&gt;You want to replace &lt;code&gt;return (search_this, &quot;found at&quot;, str(a))&lt;/code&gt; with &lt;code&gt;return (search_this + &quot;found at&quot; + str(a))&lt;/code&gt;&lt;/p&gt;&lt;p&gt;or preferably:&lt;code&gt;return &quot;{} found at {}&quot;.format(search_this, a)&lt;/code&gt;&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;When you use &lt;code&gt;return (search_this, &quot;found at&quot;, str(a))&lt;/code&gt;, you&#x27;re creating a &lt;code&gt;tuple&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;You can do it like this (&lt;code&gt;Python 2.6&lt;/code&gt; or above):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return &quot;{} found at {}&quot;.format(search_this, str(a))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or you can do it like this (&lt;code&gt;Python 3.6&lt;/code&gt; or above):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return f&quot;{search_this} found at {str(a)}&quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Testing your example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def find(the_string, search_this):    if search_this in the_string:        a = the_string.find(search_this)        return f&quot;{search_this} found at {str(a)}&quot;    else:        return (search_this + &quot; was not found at &quot; + the_string)print(find(&quot;qweabc&quot;,&quot;abc&quot;))print(find(&quot;abcd&quot;, &quot;xyz&quot;))output:abc found at 3xyz was not found at abcd&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;This expression creates a &lt;code&gt;tuple&lt;/code&gt; of three strings. In Python a &lt;code&gt;tuple&lt;/code&gt; is similar to a list:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;In [138]: (&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;)                                            Out[138]: (&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This expression joins three strings into one string:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;In [139]: (&#x27;one&#x27;+ &#x27;two&#x27;+ &#x27;three&#x27;)                                            Out[139]: &#x27;onetwothree&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;()&lt;/code&gt; in this case a just a grouping tool, and don&#x27;t make a change:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;In [140]: &#x27;one&#x27;+ &#x27;two&#x27;+ &#x27;three&#x27;                                              Out[140]: &#x27;onetwothree&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To create a &lt;code&gt;tuple&lt;/code&gt; with one item, such as a string, you have to include a comma:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;In [141]: (&#x27;one&#x27;+ &#x27;two&#x27;+ &#x27;three&#x27;,)                                           Out[141]: (&#x27;onetwothree&#x27;,)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In fact, it&#x27;s the commas that create the tuple (more so than the &lt;code&gt;()&lt;/code&gt;)&lt;/p&gt;&lt;pre&gt;&lt;code&gt;In [142]: &#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;                                              Out[142]: (&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and for comparison a list:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;In [143]: [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]                                            Out[143]: [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This notation for strings, tuples, and lists can be confusing at the start, but worth learning well.&lt;/p&gt;&lt;p&gt;and one other variation - passing the three strings to a &lt;code&gt;print&lt;/code&gt; function:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;In [144]: print(&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;)                                       one two three&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
