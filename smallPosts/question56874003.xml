<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Convert Windows relative path to POSIX relative path so I can join POSIX absolute path and Windows relative path</Title>
<Body>&lt;p&gt;I&#x27;m looking for a platform-independent solution. Everything works on Linux because &lt;code&gt;os.walk&lt;/code&gt; already returns POSIX paths. However, if I&#x27;m on Windows I might get the following two paths:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;abspath = &quot;/x/y/z&quot; # given path for a remote server which uses POSIX pathsrelpath = &quot;a\\b\\c&quot; # acquired from local file system via os.walk, so it uses slash or backslash depending on the platform&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The desired result of the joined path for this example would be:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&#x27;/x/y/z/a/b/c&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, naturally, using &lt;code&gt;posixpath.join&lt;/code&gt; results in:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; posixpath.join(abspath, relpath)&#x27;/x/y/z/a\\b\\c&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So when I&#x27;m on Windows and have a relative path like &lt;code&gt;a\\b\\c&lt;/code&gt;, I think it might make sense to convert it to a POSIX relative path &lt;code&gt;a/b/c&lt;/code&gt; first, so I am able to use &lt;code&gt;posixpath.join&lt;/code&gt; afterwards?&lt;/p&gt;&lt;p&gt;However, I don&#x27;t believe simply replacing every backslash with a slash is best practice - or is it? I couldn&#x27;t find any function which provides such a conversion.&lt;/p&gt;</Body>
<Tags>python,windows,path,relative-path,absolute-path</Tags>
</question>
<answer>
<Body>&lt;p&gt;Try using &lt;code&gt;pathlib.Path&lt;/code&gt;, it removes the tricky parts of manipulating paths across platforms.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/pathlib.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://docs.python.org/3/library/pathlib.html&lt;/a&gt;&lt;/p&gt;&lt;pre class=&quot;lang-py prettyprint-override&quot;&gt;&lt;code&gt;from pathlib import Path, PosixPathif __name__ == &#x27;__main__&#x27;:    BASE_DIR = Path(&#x27;/path/to/base&#x27;)    rel_path = r&#x27;path\to\rel&#x27;    print(BASE_DIR)    print(rel_path)    print(BASE_DIR / rel_path)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;output:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;\path\to\basepath\to\rel\path\to\base\path\to\rel&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Instead of using &lt;code&gt;os&lt;/code&gt; which depends on the platform, or &lt;code&gt;posixpath&lt;/code&gt; which will only work with POSIX paths, Python&#x27;s &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pathlib&lt;/code&gt;&lt;/a&gt; module seems to be a good choice here:&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;This module offers classes representing filesystem paths with semantics appropriate for different operating systems&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Here is a solution for the example from the question above:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def example(abspath, relpath):    import pathlib    abspath = pathlib.PurePosixPath(abspath)    relpath = pathlib.PurePath(relpath)    return str(abspath.joinpath(relpath))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;pathlib.PurePosixPath&lt;/code&gt; is being used for &lt;code&gt;abspath&lt;/code&gt; because the final path is supposed to be a POSIX path and &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.PurePath&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pathlib.PurePath&lt;/code&gt;&lt;/a&gt; works on both Windows and Linux:&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;code&gt;pathlib.PurePath&lt;/code&gt; - A generic class that represents the systemâ€™s path flavour (instantiating it creates either a &lt;code&gt;PurePosixPath&lt;/code&gt; or a &lt;code&gt;PureWindowsPath&lt;/code&gt;)&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;An example call on Linux might look like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; example(&quot;/x/y/z&quot;, &quot;a/b/c&quot;)&#x27;/x/y/z/a/b/c&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An example call on Windows might look like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; example(&quot;/x/y/z&quot;, &quot;a\\b\\c&quot;)&#x27;/x/y/z/a/b/c&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So it produces the correct POSIX path on both platforms.&lt;/p&gt;</Body>
</answer>
</qroot>
