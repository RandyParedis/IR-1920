<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>KDevelop 4.2.2 syntax highlighting questions</Title>
<Body>&lt;p&gt;For my C++ development I am running KDevelop on Ubuntu Natty, I have two questions:&lt;/p&gt;&lt;p&gt;1) It highlights all my variables in random rainbow colors - how can I change that? I want all my variables in light blue. &lt;/p&gt;&lt;p&gt;2) The functions color is always purple, how can I change that?&lt;/p&gt;&lt;p&gt;I&#x27;d appreciate if someone knows the answer.&lt;/p&gt;&lt;p&gt;Thank you!!&lt;/p&gt;</Body>
<Tags>c++,kdevelop4</Tags>
</question>
<answer>
<Body>&lt;p&gt;The answer to both your questions is simple: at the moment you cannot.&lt;/p&gt;&lt;p&gt;You can make sure that all variables are highlighted in the same color, but this color will be black and cannot be changed. Go to&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Settings -&gt; Configure KDevelop... -&gt; Language Support&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;And make sure that in the &lt;code&gt;Semantic Code Highlighting&lt;/code&gt; part both &lt;code&gt;Local Colorization Intensity&lt;/code&gt; and &lt;code&gt;Global Colorization Intensity&lt;/code&gt; are set to zero (i.e. slide the slider to the left).&lt;/p&gt;&lt;p&gt;However, why would you want this? Personally, I find it very convenient to have a different color for every variable. It lets you very easily spot all occurrences of a particular variable.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Do not get rid of variables with different colors, you will ask yourself how you did in the past without it.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Yeah... the source code is quite &quot;poor&quot;... there are many hard coded values with no options to change them... Fortunately, it&#x27;s open source ;)&lt;/p&gt;&lt;p&gt;I ran out with the same problem : I agree, the rainbow color increase readability in some ways but personally, it distracts me... So I did this patch to kdevplatform :&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  diff -aur -x &#x27;*.user&#x27; -x CMakeFiles kdevplatform-1.7.0-o/language/highlighting/colorcache.cpp kdevplatform-1.7.0-n/language/highlighting/colorcache.cpp  --- kdevplatform-1.7.0-o/language/highlighting/colorcache.cpp 2014-08-26 19:49:48.000000000 +0000  +++ kdevplatform-1.7.0-n/language/highlighting/colorcache.cpp 2014-10-23 19:50:37.667559094 +0000  @@ -43,37 +43,38 @@  #define ifDebug(x)  -// ######### start interpolation  +//// ######### start interpolation  -uint totalColorInterpolationStepCount = 6;  -uint interpolationWaypoints[] = {0xff0000, 0xff9900, 0x00ff00, 0x00aaff, 0x0000ff, 0xaa00ff};  -//Do less steps when interpolating to/from green: Green is very dominant, and different mixed green tones are hard to distinguish(and always seem green).  -uint interpolationLengths[] = {0xff, 0xff, 0xbb, 0xbb, 0xbb, 0xff};  -  -uint totalGeneratedColors = 10;  -  -uint totalColorInterpolationSteps()  -{  -  uint ret = 0;  -  for(uint a = 0; a &amp;lt; totalColorInterpolationStepCount; ++a)  -    ret += interpolationLengths[a];  -  return ret;  -}  -  -///Generates a color from the color wheel. @param step Step-number, one of totalColorInterpolationSteps  -QColor interpolate(uint step)  -{  -  uint waypoint = 0;  -  while(step &amp;gt; interpolationLengths[waypoint]) {  -    step -= interpolationLengths[waypoint];  -    ++waypoint;  -  }  -  -  uint nextWaypoint = (waypoint + 1) % totalColorInterpolationStepCount;  -  -  return KColorUtils::mix( QColor(interpolationWaypoints[waypoint]), QColor(interpolationWaypoints[nextWaypoint]),  -                           float(step) / float(interpolationLengths[waypoint]) );  -}  +//uint totalColorInterpolationStepCount = 6;  +//uint interpolationWaypoints[] = {0xff0000, 0xff9900, 0x00ff00, 0x00aaff, 0x0000ff, 0xaa00ff};  +////Do less steps when interpolating to/from green: Green is very dominant, and different mixed green tones are hard to distinguish(and always seem green).  +//uint interpolationLengths[] = {0xff, 0xff, 0xbb, 0xbb, 0xbb, 0xff};  +  +//uint totalGeneratedColors = 10;  +  +//uint totalColorInterpolationSteps()  +//{  +//  uint ret = 0;  +//  for(uint a = 0; a &amp;lt; totalColorInterpolationStepCount; ++a)  +//    ret += interpolationLengths[a];  +//  return ret;  +//}  +  +/////Generates a color from the color wheel. @param step Step-number, one of totalColorInterpolationSteps  +  +//QColor interpolate(uint step)  +//{  +//  uint waypoint = 0;  +//  while(step &amp;gt; interpolationLengths[waypoint]) {  +//    step -= interpolationLengths[waypoint];  +//    ++waypoint;  +//  }  +  +//  uint nextWaypoint = (waypoint + 1) % totalColorInterpolationStepCount;  +  +//  return KColorUtils::mix( QColor(interpolationWaypoints[waypoint]), QColor(interpolationWaypoints[nextWaypoint]),  +//                           float(step) / float(interpolationLengths[waypoint]) );  +//}  // ######### end interpolation  namespace KDevelop {  @@ -144,6 +145,7 @@     m_defaultColors = new CodeHighlightingColors(this);     m_colors.clear();  +  /*     uint step = totalColorInterpolationSteps() / totalGeneratedColors;     uint currentPos = m_colorOffset;     ifDebug(kDebug() &amp;lt;&amp;lt; &quot;text color:&quot; &amp;lt;&amp;lt; m_foregroundColor;)  @@ -152,6 +154,7 @@     ifDebug(kDebug() &amp;lt;&amp;lt; &quot;color&quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &quot;interpolated from&quot; &amp;lt;&amp;lt; currentPos &amp;lt;&amp;lt; &quot; &amp;lt; &quot; &amp;lt;&amp;lt; totalColorInterpolationSteps() &amp;lt;&amp;lt; &quot;:&quot; &amp;lt;&amp;lt; (void*) m_colors.last().rgb();)     currentPos += step;     }  +  */     m_validColorCount = m_colors.count();     m_colors.append(m_foregroundColor);  }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;it removes the color generated, so that variables are now really black (foreground color).&lt;/p&gt;&lt;p&gt;for the 2) it seems the current version respects the kate syntax color (not sure).&lt;/p&gt;&lt;p&gt;on Archlinux I also did this PKGBUILD :&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  pkgname=kdevplatform-no-rainbow-highlight  _pkgname=kdevplatform without rainbow colors highlighting  pkgver=1.7.0  _pkgver=4.7.0  pkgrel=2  pkgdesc=&quot;A C/C++ development platform for KDE&quot;  arch=(&#x27;i686&#x27; &#x27;x86_64&#x27;)  url=&quot;http://www.kdevelop.org/&quot;  license=(&#x27;GPL&#x27;)  provides=(&#x27;kdevplatform&#x27;)  conflicts=(&#x27;kdevplatform&#x27;)  depends=(&#x27;kdelibs&#x27; &#x27;subversion&#x27; &#x27;qjson&#x27;)  optdepends=(&quot;kdesdk-kompare: difference checking&quot;)  makedepends=(&#x27;cmake&#x27; &#x27;automoc4&#x27; &#x27;boost&#x27;)  install=&quot;${_pkgname}.install&quot;  source=(&quot;http://download.kde.org/stable/kdevelop/${_pkgver}/src/${_pkgname}-${pkgver}.tar.xz&quot;        &quot;no-rainbow-color.patch&quot;  )  sha1sums=(&#x27;9fc196e7cb09ab33fd5cfbf5af19aa7c513efdc9&#x27;           &#x27;bed3c7e470a6a5a56bf1611e0effd7b8a8761e33&#x27;)  prepare() {  cd ${_pkgname}-${pkgver}  patch -p1 -i ${srcdir}/no-rainbow-color.patch  cd ${srcdir}  mkdir build  }  build() {  cd build  cmake ../${_pkgname}-${pkgver} \     -DCMAKE_INSTALL_PREFIX=/usr \     -DCMAKE_SKIP_RPATH=ON \     -DCMAKE_BUILD_TYPE=Release  make  }  package() {  cd build  make DESTDIR=&quot;${pkgdir}&quot; install  }&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
