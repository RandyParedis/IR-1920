<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Is there anything wrong with importing a python module into a routine or class definition?</Title>
<Body>&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;Possible Duplicate:&lt;/strong&gt;&lt;br&gt;  &lt;a href=&quot;https://stackoverflow.com/questions/128478/should-python-import-statements-always-be-at-the-top-of-a-module&quot;&gt;Should Python import statements always be at the top of a module?&lt;/a&gt;  &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I recently answered a &lt;a href=&quot;https://stackoverflow.com/questions/7082597/in-matplotlib-how-do-you-change-the-fontsize-of-a-single-figure/7083198#7083198&quot;&gt;SO question&lt;/a&gt; and provided this routine as a solution:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;def set_fontsize(fig,fontsize):    import matplotlib    &quot;&quot;&quot;    For each text object of a figure fig, set the font size to fontsize    &quot;&quot;&quot;    if not isinstance(fig,matplotlib.figure.Figure):        raise Exception(&quot;fig is not a matplotlib.figure.Figure&quot;)    for textobj in fig.findobj(match=matplotlib.text.Text):         textobj.set_fontsize(fontsize)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I imported &lt;code&gt;matplotlib&lt;/code&gt; into the definition of &lt;code&gt;set_fontsize(fig,fontsize)&lt;/code&gt; because it&#x27;s not guaranteed that someone using this routine would import matplotlib at a more-global scope (better terminology?). Especially since many of the matplotlib examples invoke routines using this import: &lt;code&gt;import matplotlib.pyplot as plt&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Are there instances where my import of matplotlib would cause a conflict?&lt;/p&gt;&lt;p&gt;Are there any efficiency costs? &lt;/p&gt;&lt;p&gt;Is there a preferable/more-common alternative to test if &lt;code&gt;fig&lt;/code&gt; is an instance of &lt;code&gt;matplotlib.figure.Figure&lt;/code&gt;; an alternative that does not require importing the module?&lt;/p&gt;</Body>
<Tags>python,import,module,instance</Tags>
</question>
<answer>
<Body>&lt;p&gt;There&#x27;s nothing particularly wrong with importing inside the function - although you should do it after the docstring, otherwise Python won&#x27;t see the docstring - but your reasoning doesn&#x27;t make any sense.&lt;/p&gt;&lt;p&gt;If you import at module level, and someone imports your function, the function has access to all the things in its module, including imports. Users of your function don&#x27;t need to import anything specifically.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;there&#x27;s nothing wrong with importing inside functions and classes - it&#x27;s a useful way of handling mutually recursive imports (where two files each imports the other), for example.&lt;/p&gt;&lt;p&gt;however, there &lt;em&gt;is&lt;/em&gt; something wrong with checking the type of an argument.  idiomatic python would &lt;em&gt;not&lt;/em&gt; check the type of fig.  instead, just let misuse fail wherever it fails.  this is because you are breaking &quot;duck typing&quot; - people cannot call your routine with objects that &quot;work like&quot; fig, even if they want to (an obvious example is testing mocks; another example is someone writing a replacement for matplotlib that has the same API, but looks or works better).&lt;/p&gt;&lt;p&gt;so, for the code you have there, it is not necessary to have the import at all.  just use &lt;code&gt;fig&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;more generally, imports are cached when first used, so you typically don&#x27;t need to worry much about efficiency (i&#x27;m not saying it&#x27;s perfect, but it&#x27;s the kind of thing you need to profile before worrying about).&lt;/p&gt;</Body>
</answer>
</qroot>
