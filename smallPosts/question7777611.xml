<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>When and why would you seal a class?</Title>
<Body>&lt;p&gt;In C# and C++/CLI the keyword &lt;code&gt;sealed&lt;/code&gt; (or &lt;code&gt;NotInheritable&lt;/code&gt; in VB) is used to protect a class from any inheritance chance (the class will be non-inheritable). I know that one feature of object-oriented programming is inheritance and  I feel that the use of &lt;code&gt;sealed&lt;/code&gt; goes against this feature, it stops inheritance. Is there an example that shows the benefit of &lt;code&gt;sealed&lt;/code&gt; and when it is important to use it?&lt;/p&gt;</Body>
<Tags>c#,.net,oop,c++-cli</Tags>
</question>
<answer>
<Body>&lt;ol&gt;&lt;li&gt;&lt;p&gt;On a class that implements security features, so that the original object cannot be &quot;impersonated&quot;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;More generally, I recently exchanged with a person at Microsoft, who told me they tried to limit the inheritance to the places where it really made full sense, because it becomes expensive performance-wise if left untreated.&lt;br&gt; The sealed keyword tells the CLR that there is no class further down to look for methods, and that speeds things up.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;In most performance-enhancing tools on the market nowadays, you will find a checkbox that will seal all your classes that aren&#x27;t inherited.&lt;br&gt;Be careful though, because if you want to allow plugins or assembly discovery through MEF, you will run into problems.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;An addendum to Baboon&#x27;s excellent answer:&lt;/p&gt;&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;If a class isn&#x27;t &lt;em&gt;designed&lt;/em&gt; for inheritance, subclasses might break &lt;a href=&quot;https://en.wikipedia.org/wiki/Class_invariant&quot; rel=&quot;nofollow noreferrer&quot;&gt;class invariants&lt;/a&gt;. This really only applies if you&#x27;re creating a public API, of course, but as I rule of thumb I seal any class not explicitly designed to be subclassed.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;On a related note, applicable to unsealed classes only: any method created &lt;code&gt;virtual&lt;/code&gt; is an extension point, or at least looks like it should be an extension point. Declaring methods &lt;code&gt;virtual&lt;/code&gt; should be a conscious decision as well. (In C# this is a conscious decision; in Java it isn&#x27;t.)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: Some relevant links:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.safaribooksonline.com/library/view/effective-java-2nd/9780137150021/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Effective Java, 2nd Edition&lt;/a&gt; by Joshua Bloch. See item 17 (requires Safari subscription)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@rufuszh90/effective-java-item-17-design-and-document-for-inheritance-or-else-prohibit-it-be6041719fbc&quot; rel=&quot;nofollow noreferrer&quot;&gt;Effective Java Item 17: Design and document for inheritance or else prohibit it&lt;/a&gt; (discussion of same item)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Also note that &lt;a href=&quot;https://kotlinlang.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Kotlin&lt;/a&gt; seals classes by default; &lt;a href=&quot;https://kotlinlang.org/docs/reference/classes.html#inheritance&quot; rel=&quot;nofollow noreferrer&quot;&gt;its &lt;code&gt;open&lt;/code&gt; keyword is the opposite of Java&#x27;s &lt;code&gt;final&lt;/code&gt; or the &lt;code&gt;sealed&lt;/code&gt; of C#&lt;/a&gt;. (To be sure, &lt;a href=&quot;https://discuss.kotlinlang.org/t/classes-final-by-default/166&quot; rel=&quot;nofollow noreferrer&quot;&gt;there is no universal agreement that this is a good thing&lt;/a&gt;.)&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;I think this post has some good point, the specific case was when trying to cast a non-sealed class to any random interface, compiler doesn&#x27;t throw error; but when sealed is used the compiler throws error that it can&#x27;t convert. Sealed class brings additional code access security.&lt;br&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/239939/Csharp-Tweaks-Why-to-use-the-sealed-keyword-on-cla&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.codeproject.com/Articles/239939/Csharp-Tweaks-Why-to-use-the-sealed-keyword-on-cla&lt;/a&gt;&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;Marking a class as &lt;code&gt;Sealed&lt;/code&gt; prevents tampering of important classes that can compromise security, or affect performance. &lt;/p&gt;&lt;p&gt;Many times, sealing a class also makes sense when one is designing a utility class with fixed behaviour, which we don&#x27;t want to change. &lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;System&lt;/code&gt; namespace in &lt;code&gt;C#&lt;/code&gt; provides many classes which are sealed, such as &lt;code&gt;String&lt;/code&gt;. If not sealed, it would be possible to extend its functionality, which might be undesirable, as it&#x27;s a fundamental type with given functionality. &lt;/p&gt;&lt;p&gt;Similarly, &lt;code&gt;structures&lt;/code&gt; in &lt;code&gt;C#&lt;/code&gt; are always implicitly sealed. Hence one cannot derive one structure/class from another structure. The reasoning for this is that &lt;code&gt;structures&lt;/code&gt; are used to model only &lt;strong&gt;stand-alone, atomic, user-defined&lt;/strong&gt; data types, which we don&#x27;t want to modify. &lt;/p&gt;&lt;p&gt;Sometimes, when you are building class hierarchies, you might want to cap off a certain branch in the inheritance chain, based on your domain model or business rules. &lt;/p&gt;&lt;p&gt;For example, a &lt;code&gt;Manager&lt;/code&gt; and &lt;code&gt;PartTimeEmployee&lt;/code&gt; are both &lt;code&gt;Employee&lt;/code&gt;s, but you don&#x27;t have any role after part-time employees in your organization. In this case, you might want to seal &lt;code&gt;PartTimeEmployee&lt;/code&gt; to prevent further branching. On the other hand, if you have hourly or weekly part-time employees, it might make sense to inherit them from &lt;code&gt;PartTimeEmployee&lt;/code&gt;. &lt;/p&gt;</Body>
</answer>
</qroot>
