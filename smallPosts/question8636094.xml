<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Is it valid to write the template type&#x27;s parameter list in a constructor declaration?</Title>
<Body>&lt;p&gt;Old GCC 4.1.2 &lt;a href=&quot;http://codepad.org/vlxxxHJX&quot; rel=&quot;nofollow noreferrer&quot;&gt;accepts&lt;/a&gt;, and new GCC 4.5.1 &lt;a href=&quot;http://www.ideone.com/8sFjl&quot; rel=&quot;nofollow noreferrer&quot;&gt;accepts&lt;/a&gt;, the following program.&lt;/p&gt;&lt;p&gt;But is it actually correct? What does the standard say about declaring a constructor with the type&#x27;s template parameter like this?&lt;/p&gt;&lt;p&gt;&lt;sup&gt;(I find it interesting that I&#x27;m not allowed to &lt;a href=&quot;http://codepad.org/vyfV9RTn&quot; rel=&quot;nofollow noreferrer&quot;&gt;do the same in the out-of-line definition&lt;/a&gt;.)&lt;/sup&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;template &amp;lt;typename T&amp;gt;struct Foo {   Foo&amp;lt;T&amp;gt;(); // &amp;lt;---};template &amp;lt;typename T&amp;gt;Foo&amp;lt;T&amp;gt;::Foo() {  std::cout &amp;lt;&amp;lt; &quot;:)&quot;;}int main() {   Foo&amp;lt;int&amp;gt; f;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;sub&gt;The reason I ask is that it was proposed in comments on &lt;a href=&quot;https://stackoverflow.com/questions/8635981/c-undefined-constructor/8636007#8636007&quot;&gt;this answer&lt;/a&gt; that GCC may be in error here.&lt;/sub&gt;&lt;/p&gt;</Body>
<Tags>c++,templates</Tags>
</question>
<answer>
<Body>&lt;p&gt;I will put a mail copy of a possible DR I recently sent out on Christmas here&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Is the following code well formed?&lt;/p&gt;&lt;pre&gt;&lt;code&gt;template&amp;lt;typename T&amp;gt;struct A {  A&amp;lt;T&amp;gt;();};&lt;/code&gt;&lt;/pre&gt;    &lt;p&gt;The several compilers that I tested (clang, g++ and comeau conline)  accept this. Indeed 12.1 does not forbid this (&lt;code&gt;A&amp;lt;T&amp;gt;&lt;/code&gt; is a name of that  class and is not a typedef-name), but 8.3p1 says&lt;/p&gt;    &lt;p&gt;&lt;em&gt;An unqualified-id occurring in a declarator-id shall be a simple  identifier except for the declaration of some special functions (12.3,  12.4, 13.5) ...&lt;/em&gt;&lt;/p&gt;    &lt;p&gt;A constructor is a special member function, but the list of cross  references does not include 12.1. Does that mean that the above code  is ill-formed? Or is this an accidental omission?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;If you do the same in an out-of-line definition, you will try to pass template arguments to a constructor. This is valid code&lt;/p&gt;&lt;pre&gt;&lt;code&gt;struct A {  template&amp;lt;typename T&amp;gt; A();};template&amp;lt;&amp;gt; A::A&amp;lt;int&amp;gt;() { }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The spec says that when the injected class name is used in a qualified name when looking into the scope of the class (just as in &lt;code&gt;A::A&lt;/code&gt;), then when name lookup accepts function/constructor names, the injected class name reference will be translated to be resolved to the constructor(s) of that class (if the name lookup context only accepts types, then the name will remain the injected class name, and will denote the class type). After &lt;code&gt;A::A&lt;/code&gt;, name lookup is complete and yields the constructor. The &lt;code&gt;&amp;lt;int&amp;gt;&lt;/code&gt; can then only be parsed as a template argument list. If there is no template among your constructors, your code will be invalid.&lt;/p&gt;</Body>
</answer>
</qroot>
