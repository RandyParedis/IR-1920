<?xml version="1.0" encoding="utf-8"?>
<qroot>
<question>
<Title>Specialized function in non specialised Template class</Title>
<Body>&lt;p&gt;Please refer to the below code&lt;br&gt; &lt;a href=&quot;http://ideone.com/KiaWb&quot; rel=&quot;nofollow&quot;&gt;Specialized function in non specialized Template class&lt;/a&gt;&lt;br&gt;Is it possible to write a specialized function foo, for non specialized template class MyClass [Line Number 7] ? If yes, then, what is the syntax for the same.&lt;br&gt;Regards,&lt;br&gt;Atul  &lt;/p&gt;</Body>
<Tags>c++,templates</Tags>
</question>
<answer>
<Body>&lt;p&gt;Look at my example below, I have tried answer your question (if I guessed right) in the simplest code possible by me:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;using namespace std;template&amp;lt;typename T&amp;gt;class Some{public:    template&amp;lt;typename U&amp;gt; void foo(U val);};template&amp;lt;typename T&amp;gt;template&amp;lt;typename U&amp;gt;void Some&amp;lt;T&amp;gt;::foo(U val){    cout &amp;lt;&amp;lt; &quot;Non specialized&quot; &amp;lt;&amp;lt; endl;}template&amp;lt;&amp;gt;template&amp;lt;&amp;gt;void Some&amp;lt;char&amp;gt;::foo(char val){    cout &amp;lt;&amp;lt; &quot;Char specialized&quot; &amp;lt;&amp;lt; endl;}int main(){    Some&amp;lt;int&amp;gt; t1;    t1.foo(5);    Some&amp;lt;char&amp;gt; t2;    t2.foo(&#x27;c&#x27;);    return 0;}&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;The important thing to note here is that &quot;You cannot specialize your class and function   Independently&quot; i.e you have to specialize both at the same time as done in the example.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Also, with this you lose the opportunity to specialize your class for that data type &quot;char&quot; in this case. (Need to confirm on this).&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; :: Confirmed on point 2.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;This can be done if you create a full specialization of the class template.  Just refer to the answer in this question: &lt;a href=&quot;https://stackoverflow.com/questions/9330561/if-i-want-to-specialise-just-one-method-in-a-template-how-do-i-do-it/9330636#9330636&quot;&gt;If I want to specialise just one method in a template, how do I do it?&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Otherwise if you want to have a given function with the same signature have two different behaviors depending on the instantiated version of the class, and that instantiation is a &lt;em&gt;partial specialization&lt;/em&gt; of the template class, you will have to make a separate specialization of the template class.&lt;/p&gt;&lt;p&gt;Keep in mind that if you want to avoid redundant code in this second case, you can always create a base template class that will have the functionality that will not change, and then create derived template classes that will contain the unique functionality necessary for each partial specialization.&lt;/p&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;If you wanted to specialize MyClass&amp;lt; bool &gt;::Foo, it would look like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;template &amp;lt;&amp;gt;void MyClass&amp;lt;bool&amp;gt;::Foo(bool A){  // code goes here}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
<answer>
<Body>&lt;p&gt;If you are asking that,&lt;/p&gt;&lt;p&gt;(1) you want a function &lt;code&gt;Foo()&lt;/code&gt; which doesn&#x27;t take any argument and    returns &lt;code&gt;void&lt;/code&gt; inside &lt;code&gt;MyClass&lt;/code&gt;&lt;/p&gt;&lt;p&gt;(2) This &lt;code&gt;Foo()&lt;/code&gt; should be exclusive to the &lt;code&gt;MyClass&lt;/code&gt; when the    template type is &lt;code&gt;bool&lt;/code&gt;, i.e. only for &lt;code&gt;MyClass&amp;lt;bool&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;then here is the way:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;template&amp;lt;class Precision&amp;gt;class MyClass {  ...public:  ...  void Foo ();  // don&#x27;t implement here};...template&amp;lt;&amp;gt;void MyClass&amp;lt;bool&amp;gt;::Foo ()  // implementing only for &#x27;MyClass&amp;lt;bool&amp;gt;&#x27;{        // invoking for other &#x27;MyClass&amp;lt;&amp;gt;&#x27; will result in compiler error  ...}&lt;/code&gt;&lt;/pre&gt;</Body>
</answer>
</qroot>
